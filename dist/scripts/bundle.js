config.$inject=["$routeProvider","$locationProvider"];var ahNuts=angular.module("cne",["ngRoute","firebase","ngSanitize"]);function aSalesdayController(e,t,s,o){var n="sales_days/"+s.salesdayid;this.salesdaySelected=s.salesdayid,this.currentCME=o(firebase.database().ref().child(n)),t.info("in a salesday controller")}function cmeScheduleController(e,t,s,o,n){this.calendarDays=n(firebase.database().ref().child("calender/2018")),t.info("in the CME Schedule controller")}function customersController(e,t,s,o,n,r,l){var a=this;a.customerList=l(firebase.database().ref().child("customers")),a.customerSalesDays=[],a.selectedCustomer={seasons:{2018:{id:2018}}},a.testList=["a","b","c"],a.state={selected:{customer:{$index:"",$id:""},salesday:{$index:"test",$id:"test"}}},t.info("in the customers controller"),a.selectCustomer=function(e){a.state.selected.customer.$index=e,a.state.selected.customer.$id=a.customerList[e].$id,a.selectedCustomer=r(firebase.database().ref().child("customers").child(a.customerList[e].$id)),a.customerSalesDays=o.compile.customer_sales_days(a.state.selected.customer.$id)},a.updateCustomer=function(){a.selectedCustomer.$save().then(function(e){console.log("updated record successfully")}).catch(function(e){console.log("error updating record",e)})},a.changeRecord=function(e){a.state.selected.customer.$index;switch({prev:0,next:1}[e]){case 0:a.selectCustomer(a.state.selected.customer.$index-1);break;case 1:a.selectCustomer(a.state.selected.customer.$index+1)}},a.generate_bulk_salesdays=function(){console.log("generating bulk salesdays",a.selectedCustomer.sales_days)}}function landingController(e,t){t.info("in the landing controller")}function loginController(e,t,s){var o=this;o.credentials={username:"",password:""},o.active={username:!1,password:!1},o.submitCreds=function(e,t){console.log("submitCreds clicked"),s.authUser.email(e,t).then(function(e){console.log("was success",e)}).catch(function(e){console.log("Error:",e)})},t.info("in the login controller")}function salesDaysController(t,e,s,o,n,r,l){var i=this;i.salesdaysList=o(firebase.database().ref().child("sales_days")),i.selectedRecord={id:"2039752"},i.testCustomers=["Beaverton","Orenco"],i.testSeasons=["2018","2017"],i.testTimes=["9:00 AM","9:15 AM","9:30 AM","9:45 AM"],i.scheduling_params={customer:"",customer_id:"",season:"",bookend_dates:{first:"",last:""},repeats:"",event_days:{Mon:!1,Tue:!1,Wed:!1,Thu:!1,Fri:!1,Sat:!1,Sun:!1},same_day_load_in_out:!0,schedule:{load_in:"",load_out:"",open:"",close:"",sales_start:"",sales_end:""}},i.tempIterations=[],i.tempTimes={load_in:"",load_out:"",open:"",close:"",sales_start:"",sales_end:""},e.info("in the sales days controller"),i.updateRecord=function(e){console.log("got this id",e)},i.addSalesDay=function(){i.salesdaysList.$add({date:(new Date).toISOString(),schedule:{load_in:{datetime:"",sales_day_id:""},load_out:{datetime:"",sales_day_id:""},open:"",close:"",sales_start:"",sales_end:""},customer:"",season:{name:"",frequency:"",instance:0,total:0}}).then(function(e){console.log(e.key),i.selectedRecord=n(firebase.database().ref().child("sales_days").child(e.key)),console.log(i.selectedRecord)}).catch(function(e){console.log("error",e)})},i.generateSalesDays=function(){var e;(e=i.scheduling_params,new Promise(function(t,s){l.sales_days.compile_batch(e).then(function(e){t(e)}).catch(function(e){s(e)})})).then(function(e){console.log("successfully built",e),i.tempIterations=e,t.$apply()}).catch(function(e){console.log(e)})},i.foramtTime=function(e){console.log("formatting time",e);var t=new Date,s=t.getFullYear(),o=t.getMonth(),n=t.getDate(),r=i.tempTimes[e].split(":"),l=r[1].split(" "),a=parseInt(r[0]),c=l[0];"PM"==l[1]&&(a+=12).toString(),o<10&&(o="0"+o),n<10&&(n="0"+n),a<10&&(a="0"+a),i.scheduling_params.schedule[e]=s+"-"+o+"-"+n+"T"+a+":"+c+":00-07:00"},i.saveSalesDays=function(){i.tempIterations.forEach(function(e){i.salesdaysList.$add(e).then(function(e){var t=e.key;console.log(t)})})}}function customerList(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/customer-list.directive.htm",replace:!0,scope:{},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(e,t,s,o){}function s(e,t){console.log("in costomer List controller")}return s.$inject=["$scope","$log"],e}function customerSalesDays(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/customer-sales-days.directive.htm",replace:!0,scope:{salesdaysList:"=",salesdaySelected:"="},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(s,e,t,o){s.$watch("vm.salesdaysList",function(e,t){e&&s.loadSaleDays()},!0)}function s(e,t,n){var r=this;r.detailedSalesDaysList=[],console.log("in the customerSalesDaysController"),e.loadSaleDays=function(){var s=[];Object.keys(r.salesdaysList).forEach(function(e){var t,o;s.push((t=r.salesdaysList[e],o="sales_days/"+t,new Promise(function(t,s){n.get.a_record(o).then(function(e){t(e)}).catch(function(e){s(e)})})))}),Promise.all(s).then(function(e){r.detailedSalesDaysList=e}).catch(function(e){console.log("error",e)})},e.salesDaySelected=function(e){r.salesdaySelected=r.detailedSalesDaysList[e].$id}}return s.$inject=["$scope","$log","firebaseService"],e}function loginPassword(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-password.directive.htm",replace:!0,scope:{password:"=",active:"="},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(e,t,s,o){}function s(e,t){}return s.$inject=["$scope","$log"],e}function loginUsername(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-username.directive.htm",replace:!0,scope:{username:"=",active:"="},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(e,t,s,o){}function s(e,t){}return s.$inject=["$scope","$log"],e}function salesDayTxs(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/sales-day-transactions.directive.htm",replace:!0,scope:{txsList:"=",salesdaySelected:"="},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(s,e,t,o){s.$watch("vm.salesdaySelected",function(e,t){e&&s.loadSDTxs()},!0)}function s(e,t,o){var s=this;function n(e,t){e+=t;return new Promise(function(t,s){o.get.a_record(e).then(function(e){t(e)}).catch(function(e){s(e)})})}s.promiseList=[],s.detailedTxList=[],console.log("in the salesDayTxsController"),e.loadSDTxs=function(){n("sales_days/",s.salesdaySelected).then(function(t){Object.keys(t.transactions).forEach(function(e){"placeholder"!=t.transactions[e]&&s.promiseList.push(n("transactions/",t.transactions[e]))}),Promise.all(s.promiseList).then(function(e){console.log(e),s.detailedTxList=e}).catch(function(e){console.log("error",e)})}).catch(function(e){console.log("error",e)})}}return s.$inject=["$scope","$log","firebaseService"],e}function config(e,t){t.hashPrefix(""),e.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/customers",{templateUrl:"views/customersPage.htm",controller:"customersController",controllerAs:"vm",resolve:{customerList:customerList}}).when("/salesdays",{templateUrl:"views/salesDaysPage.htm",controller:"salesDaysController",controllerAs:"vm"}).when("/salesdays/:salesdayid",{templateUrl:"views/aSalesdayPage.htm",controller:"aSalesdayController",controllerAs:"vm"}).when("/login",{templateUrl:"views/loginPage.htm",controller:"loginController",controllerAs:"vm"}).when("/cme_schedule",{templateUrl:"views/cmeSchedulingPage.htm",controller:"cmeScheduleController",controllerAs:"vm"}).otherwise({redirectTo:"/"})}function customerList(){return new Promise(function(e,t){e("good test")})}function dataService(o){return{sales_days:{compile_batch:function(e){return new Promise(function(t,s){o({method:"POST",url:"/api/sales_days/compile_new_sales_days_batch",headers:{"Content-Type":"application/json"},data:e}).then(function(e){t(e.data)},function(e){s(e)})})}}}}function firebaseService(e,o,t){return{get:{customer_list:function(){return new Promise(function(e,t){})},a_record:function(s){return new Promise(function(e,t){e(o(firebase.database().ref().child(s)))})}},authUser:{email:function(e,s){return console.log("authenticating user"),new Promise(function(t,o){firebase.auth().signInWithEmailAndPassword(e,s).then(function(e){t(e)}).catch(function(e){var t=e.code,s=e.message;o({code:t,message:s})})})}},compile:{customer_sales_days:function(e){}},test:function(){return"good test from FB Service"}}}angular.module("cne").controller("aSalesdayController",aSalesdayController),aSalesdayController.$inject=["$scope","$log","$routeParams","$firebaseObject"],angular.module("cne").controller("cmeScheduleController",cmeScheduleController),cmeScheduleController.$inject=["$scope","$log","$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").controller("customersController",customersController),customersController.$inject=["$scope","$log","customerList","firebaseService","$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").controller("landingController",landingController),landingController.$inject=["$scope","$log"],angular.module("cne").controller("loginController",loginController),loginController.$inject=["$scope","$log","firebaseService"],angular.module("cne").controller("salesDaysController",salesDaysController),salesDaysController.$inject=["$scope","$log","$firebase","$firebaseArray","$firebaseObject","$http","dataService"],angular.module("cne").directive("customerList",customerList),angular.module("cne").directive("customerSalesDays",customerSalesDays),angular.module("cne").directive("loginPassword",loginPassword),angular.module("cne").directive("loginUsername",loginUsername),angular.module("cne").directive("salesDayTxs",salesDayTxs),angular.module("cne").config(config),angular.module("cne").factory("dataService",dataService),dataService.$inject=["$http"],angular.module("cne").factory("firebaseService",firebaseService),firebaseService.$inject=["$firebase","$firebaseObject","$firebaseArray"];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
