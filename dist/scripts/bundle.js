config.$inject=["$routeProvider","$locationProvider"];var ahNuts=angular.module("cne",["ngRoute","firebase","ngSanitize"]);function customersController(r,e,o,t,n,l,i){var c=this;c.customerList=["a","b","c"],c.testList=i(firebase.database().ref().child("customers")),e.info("in the customers controller"),t.get.customer_list().then(function(e){c.customerList=e,r.$apply()}).catch(function(e){console.log("error")})}function landingController(e,r){r.info("in the landing controller")}function loginController(e,r){var o=this;o.credentials={username:"",password:""},o.active={username:!1,password:!1},o.submitCreds=function(e,r){console.log("submitting credentials",e,r)},r.info("in the login controller")}function customerList(){r.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/customer-list.directive.htm",replace:!0,scope:{},link:r,controller:o,controllerAs:"vm",bindToController:!0};function r(e,r,o,t){}function o(e,r){console.log("in costomer List controller")}return o.$inject=["$scope","$log"],e}function loginPassword(){r.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-password.directive.htm",replace:!0,scope:{password:"=",active:"="},link:r,controller:o,controllerAs:"vm",bindToController:!0};function r(e,r,o,t){}function o(e,r){}return o.$inject=["$scope","$log"],e}function loginUsername(){r.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-username.directive.htm",replace:!0,scope:{username:"=",active:"="},link:r,controller:o,controllerAs:"vm",bindToController:!0};function r(e,r,o,t){}function o(e,r){}return o.$inject=["$scope","$log"],e}function firebaseService(e,r,o){return{get:{customer_list:function(){return new Promise(function(e,r){e(["one","two","three"])})}},test:function(){return"good test from FB Service"}}}function config(e,r){r.hashPrefix(""),e.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/customers",{templateUrl:"views/customersPage.htm",controller:"customersController",controllerAs:"vm",resolve:{customerList:customerList}}).when("/login",{templateUrl:"views/loginPage.htm",controller:"loginController",controllerAs:"vm"}).otherwise({redirectTo:"/"})}function customerList(){return new Promise(function(e,r){e("good test")})}angular.module("cne").controller("customersController",customersController),customersController.$inject=["$scope","$log","customerList","firebaseService","$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").controller("landingController",landingController),landingController.$inject=["$scope","$log"],angular.module("cne").controller("loginController",loginController),loginController.$inject=["$scope","$log"],angular.module("cne").directive("customerList",customerList),angular.module("cne").directive("loginPassword",loginPassword),angular.module("cne").directive("loginUsername",loginUsername),angular.module("cne").factory("firebaseService",firebaseService),firebaseService.$inject=["$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").config(config);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
