config.$inject=["$routeProvider","$locationProvider"];var ahNuts=angular.module("cne",["ngRoute","firebase","ngSanitize"]);function aSalesdayController(e,t,s,o){var r="sales_days/"+s.salesdayid;this.salesdaySelected=s.salesdayid,this.currentCME=o(firebase.database().ref().child(r)),t.info("in a salesday controller")}function cashDrawerAssignmentsController(e,t,s,o,r,n){var a=this,l=new Date;a.sqrLocations=r(firebase.database().ref().child("reference_lists/sqr_locations")),a.sqrEmployees=r(firebase.database().ref().child("reference_lists/sqr_employees")),a.searchlist={times:{start:l,end:l}},a.cashDrawerList=r(firebase.database().ref().child("sqr_cash_drawers")),a.cmeList=[{test:"test"},{test:"test"},{test:"test"}],a.selected={location:"Oregon"},t.info("in the cash drawer assignment controller",n)}function cmeScheduleController(e,t,s,o,r){this.calendarDays=r(firebase.database().ref().child("calender/2018")),t.info("in the CME Schedule controller")}function customersController(e,t,s,o,r,n,a){var l=this;l.customerList=a(firebase.database().ref().child("customers")),l.customerSalesDays=[],l.selectedCustomer={seasons:{2018:{id:2018}}},l.testList=["a","b","c"],l.state={selected:{customer:{$index:"",$id:""},salesday:{$index:"test",$id:"test"}}},t.info("in the customers controller"),l.selectCustomer=function(e){l.state.selected.customer.$index=e,l.state.selected.customer.$id=l.customerList[e].$id,l.selectedCustomer=n(firebase.database().ref().child("customers").child(l.customerList[e].$id)),l.customerSalesDays=o.compile.customer_sales_days(l.state.selected.customer.$id)},l.updateCustomer=function(){l.selectedCustomer.$save().then(function(e){console.log("updated record successfully")}).catch(function(e){console.log("error updating record",e)})},l.changeRecord=function(e){l.state.selected.customer.$index;switch({prev:0,next:1}[e]){case 0:l.selectCustomer(l.state.selected.customer.$index-1);break;case 1:l.selectCustomer(l.state.selected.customer.$index+1)}},l.generate_bulk_salesdays=function(){console.log("generating bulk salesdays",l.selectedCustomer.sales_days)}}function landingController(e,t){t.info("in the landing controller")}function loginController(e,t,s){var o=this;o.credentials={username:"",password:""},o.active={username:!1,password:!1},o.submitCreds=function(e,t){console.log("submitCreds clicked"),s.authUser.email(e,t).then(function(e){console.log("was success",e)}).catch(function(e){console.log("Error:",e)})},t.info("in the login controller")}function salesDaysController(t,e,s,o,r,n,a){var i=this;i.salesdaysList=o(firebase.database().ref().child("sales_days")),i.selectedRecord={id:"2039752"},i.testCustomers=["Beaverton","Orenco"],i.testSeasons=["2018","2017"],i.testTimes=["9:00 AM","9:15 AM","9:30 AM","9:45 AM"],i.scheduling_params={customer:"",customer_id:"",season:"",bookend_dates:{first:"",last:""},repeats:"",event_days:{Mon:!1,Tue:!1,Wed:!1,Thu:!1,Fri:!1,Sat:!1,Sun:!1},same_day_load_in_out:!0,schedule:{load_in:"",load_out:"",open:"",close:"",sales_start:"",sales_end:""}},i.tempIterations=[],i.tempTimes={load_in:"",load_out:"",open:"",close:"",sales_start:"",sales_end:""},e.info("in the sales days controller"),i.updateRecord=function(e){console.log("got this id",e)},i.addSalesDay=function(){i.salesdaysList.$add({date:(new Date).toISOString(),schedule:{load_in:{datetime:"",sales_day_id:""},load_out:{datetime:"",sales_day_id:""},open:"",close:"",sales_start:"",sales_end:""},customer:"",season:{name:"",frequency:"",instance:0,total:0}}).then(function(e){console.log(e.key),i.selectedRecord=r(firebase.database().ref().child("sales_days").child(e.key)),console.log(i.selectedRecord)}).catch(function(e){console.log("error",e)})},i.generateSalesDays=function(){var e;(e=i.scheduling_params,new Promise(function(t,s){a.sales_days.compile_batch(e).then(function(e){t(e)}).catch(function(e){s(e)})})).then(function(e){console.log("successfully built",e),i.tempIterations=e,t.$apply()}).catch(function(e){console.log(e)})},i.foramtTime=function(e){console.log("formatting time",e);var t=new Date,s=t.getFullYear(),o=t.getMonth(),r=t.getDate(),n=i.tempTimes[e].split(":"),a=n[1].split(" "),l=parseInt(n[0]),c=a[0];"PM"==a[1]&&(l+=12).toString(),o<10&&(o="0"+o),r<10&&(r="0"+r),l<10&&(l="0"+l),i.scheduling_params.schedule[e]=s+"-"+o+"-"+r+"T"+l+":"+c+":00-07:00"},i.saveSalesDays=function(){i.tempIterations.forEach(function(e){i.salesdaysList.$add(e).then(function(e){var t=e.key;console.log(t)})})}}function squareTxsController(e,t,s,o,r,n){var a=this,l=moment(new Date).subtract(1,"day");a.selectedLocation="Oregon",a.selectedDate=new Date(l.format("MM-DD-YYYY")),a.dayHrs=[1,2,3,4,5,6,7,8,9,10,11,12,1,2,3,4,5,6,7,8,9,10,11,12],a.sqrLocations=n(firebase.database().ref().child("reference_lists/sqr_locations")),t.info("in a square Txs controller",l.format()),a.dayChange=function(e){var t=moment(new Date(a.selectedDate));switch({"-":0,"+":1}[e]){case 0:t.subtract(1,"day");break;case 1:t.add(1,"day")}a.selectedDate=new Date(t.format("MM-DD-YYYY"))}}function customerList(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/customer-list.directive.htm",replace:!0,scope:{},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(e,t,s,o){}function s(e,t){console.log("in costomer List controller")}return s.$inject=["$scope","$log"],e}function customerSalesDays(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/customer-sales-days.directive.htm",replace:!0,scope:{salesdaysList:"=",salesdaySelected:"="},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(s,e,t,o){s.$watch("vm.salesdaysList",function(e,t){e&&s.loadSaleDays()},!0)}function s(e,t,r){var n=this;n.detailedSalesDaysList=[],console.log("in the customerSalesDaysController"),e.loadSaleDays=function(){var s=[];Object.keys(n.salesdaysList).forEach(function(e){var t,o;s.push((t=n.salesdaysList[e],o="sales_days/"+t,new Promise(function(t,s){r.get.a_record(o).then(function(e){t(e)}).catch(function(e){s(e)})})))}),Promise.all(s).then(function(e){n.detailedSalesDaysList=e}).catch(function(e){console.log("error",e)})},e.salesDaySelected=function(e){n.salesdaySelected=n.detailedSalesDaysList[e].$id}}return s.$inject=["$scope","$log","firebaseService"],e}function loginPassword(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-password.directive.htm",replace:!0,scope:{password:"=",active:"="},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(e,t,s,o){}function s(e,t){}return s.$inject=["$scope","$log"],e}function loginUsername(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-username.directive.htm",replace:!0,scope:{username:"=",active:"="},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(e,t,s,o){}function s(e,t){}return s.$inject=["$scope","$log"],e}function salesDayTxs(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/sales-day-transactions.directive.htm",replace:!0,scope:{txsList:"=",salesdaySelected:"="},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(s,e,t,o){s.$watch("vm.salesdaySelected",function(e,t){e&&s.loadSDTxs()},!0)}function s(s,e,o){var r=this;function n(e,t){e+=t;return new Promise(function(t,s){o.get.a_record(e).then(function(e){t(e)}).catch(function(e){s(e)})})}r.promiseList=[],r.detailedTxList=[],console.log("in the salesDayTxsController"),s.loadSDTxs=function(){n("sales_days/",r.salesdaySelected).then(function(t){Object.keys(t.transactions).forEach(function(e){"placeholder"!=t.transactions[e]&&r.promiseList.push(n("transactions/",t.transactions[e]))}),Promise.all(r.promiseList).then(function(e){r.detailedTxList=e,s.$apply()}).catch(function(e){console.log("error",e)})}).catch(function(e){console.log("error",e)})}}return s.$inject=["$scope","$log","firebaseService"],e}function dataService(o){return{sales_days:{compile_batch:function(e){return new Promise(function(t,s){o({method:"POST",url:"/api/sales_days/compile_new_sales_days_batch",headers:{"Content-Type":"application/json"},data:e}).then(function(e){t(e.data)},function(e){s(e)})})}}}}function firebaseService(e,r,t){return{get:{customer_list:function(){return new Promise(function(e,t){})},a_record:function(o){return new Promise(function(t,s){var e=r(firebase.database().ref().child(o));e.$loaded().then(function(e){t(e)}).catch(function(e){s(e)})})}},authUser:{email:function(e,s){return console.log("authenticating user"),new Promise(function(t,o){firebase.auth().signInWithEmailAndPassword(e,s).then(function(e){t(e)}).catch(function(e){var t=e.code,s=e.message;o({code:t,message:s})})})}},compile:{customer_sales_days:function(e){}},test:function(){return"good test from FB Service"}}}function config(e,t){t.hashPrefix(""),e.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/customers",{templateUrl:"views/customersPage.htm",controller:"customersController",controllerAs:"vm",resolve:{customerList:customerList}}).when("/salesdays",{templateUrl:"views/salesDaysPage.htm",controller:"salesDaysController",controllerAs:"vm"}).when("/salesdays/:salesdayid",{templateUrl:"views/aSalesdayPage.htm",controller:"aSalesdayController",controllerAs:"vm"}).when("/cash_drawer_assignments",{templateUrl:"views/cashDrawerAssignmentsPage.htm",controller:"cashDrawerAssignmentsController",controllerAs:"vm"}).when("/square_txs",{templateUrl:"views/squareTxsPage.htm",controller:"squareTxsController",controllerAs:"vm"}).when("/login",{templateUrl:"views/loginPage.htm",controller:"loginController",controllerAs:"vm"}).when("/cme_schedule",{templateUrl:"views/cmeSchedulingPage.htm",controller:"cmeScheduleController",controllerAs:"vm"}).otherwise({redirectTo:"/"})}function customerList(){return new Promise(function(e,t){e("good test")})}angular.module("cne").controller("aSalesdayController",aSalesdayController),aSalesdayController.$inject=["$scope","$log","$routeParams","$firebaseObject"],angular.module("cne").controller("cashDrawerAssignmentsController",cashDrawerAssignmentsController),cashDrawerAssignmentsController.$inject=["$scope","$log","$firebase","$firebaseObject","$firebaseArray","dataService"],angular.module("cne").controller("cmeScheduleController",cmeScheduleController),cmeScheduleController.$inject=["$scope","$log","$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").controller("customersController",customersController),customersController.$inject=["$scope","$log","customerList","firebaseService","$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").controller("landingController",landingController),landingController.$inject=["$scope","$log"],angular.module("cne").controller("loginController",loginController),loginController.$inject=["$scope","$log","firebaseService"],angular.module("cne").controller("salesDaysController",salesDaysController),salesDaysController.$inject=["$scope","$log","$firebase","$firebaseArray","$firebaseObject","$http","dataService"],angular.module("cne").controller("squareTxsController",squareTxsController),squareTxsController.$inject=["$scope","$log","$routeParams","$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").directive("customerList",customerList),angular.module("cne").directive("customerSalesDays",customerSalesDays),angular.module("cne").directive("loginPassword",loginPassword),angular.module("cne").directive("loginUsername",loginUsername),angular.module("cne").directive("salesDayTxs",salesDayTxs),angular.module("cne").factory("dataService",dataService),dataService.$inject=["$http"],angular.module("cne").factory("firebaseService",firebaseService),firebaseService.$inject=["$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").config(config);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
