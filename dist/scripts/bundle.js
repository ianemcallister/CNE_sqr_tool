config.$inject=["$routeProvider","$locationProvider"];var ahNuts=angular.module("cne",["ngRoute","firebase","ngSanitize"]);function aCustomersController(e,t,s,o,r,n){var l=this,a=s.customerid;l.customerProfile=r(firebase.database().ref().child("customers").child(a)),l.tempSalesDays=[],l.selected={season_id:""},t.info("in a customer controller"),l.selectSeason=function(e){l.selected.season_id=e,console.log("id",l.selected.season_id)},l.generateSalesDaysList=function(){var e=l.customerProfile.seasons[l.selected.season_id].start_date,t=l.customerProfile.seasons[l.selected.season_id].end_date,s=l.customerProfile.seasons[l.selected.season_id].repeats,o=l.customerProfile.seasons[l.selected.season_id].repeat_on,r=moment(e),n=moment(t);if(console.log("trying to generate",e,t,s,o),""!=e&&""!=t&&""!=s&&""!=o){console.log("good values",r);for(var a=!1;!a;)r=r.add(1,"day"),o[{0:"sun",1:"mon",2:"tue",3:"wed",4:"thu",5:"fri",6:"sat"}[r.day()]]&&l.tempSalesDays.push(1),moment(r).isSame(n)&&(a=!0);console.log(l.tempSalesDays)}else console.log("missing values")},l.saveChanges=function(){l.customerProfile.$save(),console.log("saved change")}}function aSalesdayController(e,t,s,o){var r="sales_days/"+s.salesdayid;this.salesdaySelected=s.salesdayid,this.currentCME=o(firebase.database().ref().child(r)),t.info("in a salesday controller")}function cashDrawerAssignmentsController(e,t,s,o,r,n){var a=this,l=new Date;a.sqrLocations=r(firebase.database().ref().child("reference_lists/sqr_locations")),a.sqrEmployees=r(firebase.database().ref().child("reference_lists/sqr_employees")),a.searchlist={times:{start:l,end:l}},a.cashDrawerList=r(firebase.database().ref().child("sqr_cash_drawers")),a.cmeList=[{test:"test"},{test:"test"},{test:"test"}],a.selected={location:"Oregon"},t.info("in the cash drawer assignment controller",n)}function cmeScheduleController(e,t,s,o,r){this.calendarDays=r(firebase.database().ref().child("calender/2018")),t.info("in the CME Schedule controller")}function customersController(e,t,s,o,r,n,a,l){var c=this;c.customerList=l(firebase.database().ref().child("customers")),c.customerSalesDays=[],c.selectedCustomer={seasons:{2018:{id:2018}}},c.testList=["a","b","c"],c.state={selected:{customer:{$index:"",$id:""},salesday:{$index:"test",$id:"test"}}},t.info("in the customers controller"),c.selectCustomer=function(e){c.state.selected.customer.$index=e,c.state.selected.customer.$id=c.customerList[e].$id,c.selectedCustomer=a(firebase.database().ref().child("customers").child(c.customerList[e].$id)),c.customerSalesDays=r.compile.customer_sales_days(c.state.selected.customer.$id)},c.updateCustomer=function(){c.selectedCustomer.$save().then(function(e){console.log("updated record successfully")}).catch(function(e){console.log("error updating record",e)})},c.changeRecord=function(e){c.state.selected.customer.$index;switch({prev:0,next:1}[e]){case 0:c.selectCustomer(c.state.selected.customer.$index-1);break;case 1:c.selectCustomer(c.state.selected.customer.$index+1)}},c.generate_bulk_salesdays=function(){console.log("generating bulk salesdays",c.selectedCustomer.sales_days)},c.changePage=function(){var e="/customers/"+c.state.selected.customer.$id;console.log("redirecting to",e),s.path(e)}}function landingController(e,t){t.info("in the landing controller")}function loginController(e,t,s){this.credentials={username:"",password:""},this.active={username:!1,password:!1},this.submitCreds=function(e,t){console.log("submitCreds clicked"),s.authUser.email(e,t).then(function(e){console.log("was success",e)}).catch(function(e){console.log("Error:",e)})},t.info("in the login controller")}function salesDaysController(t,e,s,o,r,n,a){var i=this;i.salesdaysList=o(firebase.database().ref().child("sales_days")),i.selectedRecord={id:"2039752"},i.testCustomers=["Beaverton","Orenco"],i.testSeasons=["2018","2017"],i.testTimes=["9:00 AM","9:15 AM","9:30 AM","9:45 AM"],i.scheduling_params={customer:"",customer_id:"",season:"",bookend_dates:{first:"",last:""},repeats:"",event_days:{Mon:!1,Tue:!1,Wed:!1,Thu:!1,Fri:!1,Sat:!1,Sun:!1},same_day_load_in_out:!0,schedule:{load_in:"",load_out:"",open:"",close:"",sales_start:"",sales_end:""}},i.tempIterations=[],i.tempTimes={load_in:"",load_out:"",open:"",close:"",sales_start:"",sales_end:""},e.info("in the sales days controller"),i.updateRecord=function(e){console.log("got this id",e)},i.addSalesDay=function(){i.salesdaysList.$add({date:(new Date).toISOString(),schedule:{load_in:{datetime:"",sales_day_id:""},load_out:{datetime:"",sales_day_id:""},open:"",close:"",sales_start:"",sales_end:""},customer:"",season:{name:"",frequency:"",instance:0,total:0}}).then(function(e){console.log(e.key),i.selectedRecord=r(firebase.database().ref().child("sales_days").child(e.key)),console.log(i.selectedRecord)}).catch(function(e){console.log("error",e)})},i.generateSalesDays=function(){var e;(e=i.scheduling_params,new Promise(function(t,s){a.sales_days.compile_batch(e).then(function(e){t(e)}).catch(function(e){s(e)})})).then(function(e){console.log("successfully built",e),i.tempIterations=e,t.$apply()}).catch(function(e){console.log(e)})},i.foramtTime=function(e){console.log("formatting time",e);var t=new Date,s=t.getFullYear(),o=t.getMonth(),r=t.getDate(),n=i.tempTimes[e].split(":"),a=n[1].split(" "),l=parseInt(n[0]),c=a[0];"PM"==a[1]&&(l+=12).toString(),o<10&&(o="0"+o),r<10&&(r="0"+r),l<10&&(l="0"+l),i.scheduling_params.schedule[e]=s+"-"+o+"-"+r+"T"+l+":"+c+":00-07:00"},i.saveSalesDays=function(){i.tempIterations.forEach(function(e){i.salesdaysList.$add(e).then(function(e){var t=e.key;console.log(t)})})}}function squareTxsController(s,e,t,o,r,n,a){var l=this,c=moment(new Date).subtract(1,"day"),i=a.sqr_locations.list(),d=a.sqr_employees.list();r(firebase.database().ref().child("sales_days"));function u(){var e,t;e=moment(l.selectedDate).hours(23).minutes(59).seconds(59).format(),t=moment(l.selectedDate).format(),a.sqr_txs.full_day(l.selectedLocation.id,t,e).then(function(e){console.log("got a response with",e.length,"records"),l.daystransactions=e,s.$apply()}).catch(function(e){console.log("ERROR",e)}),function(){var e=l.selectedDate.getFullYear(),t=l.selectedDate.getMonth()+1,s=l.selectedDate.getDate();t<10&&(t="0"+t);s<10&&(s="0"+s);var o="/calender/"+e+"/"+e+"-"+t+"-"+s+"/sales_days";l.salesDays=r(firebase.database().ref().child(o))}()}l.salesDays="",l.filteredSalesDays=[],l.selectedLocation={name:"Oregon",id:""},l.selectedDate=new Date(c.format("MM-DD-YYYY")),l.dayHrs=[1,2,3,4,5,6,7,8,9,10,11,12,1,2,3,4,5,6,7,8,9,10,11,12],l.daystransactions=[],e.info("in a square Txs controller",c.format()),l.dayChange=function(e){var t=moment(new Date(l.selectedDate));switch({"-":0,"+":1}[e]){case 0:t.subtract(1,"day");break;case 1:t.add(1,"day")}l.selectedDate=new Date(t.format("MM-DD-YYYY")),u()},l.employeeName=function(s){var o="";return Object.keys(l.sqrEmployees).forEach(function(e){var t=l.sqrEmployees[e].first_name+" "+l.sqrEmployees[e].last_name;l.sqrEmployees[e].id==s&&(o=t)}),o},Promise.all([i,d]).then(function(e){l.sqrLocations=e[0],l.sqrEmployees=e[1],console.log(l.sqrLocations),console.log(l.sqrEmployees),l.sqrLocations.forEach(function(e){e.name==l.selectedLocation.name&&(l.selectedLocation.id=e.id)}),u()}).catch(function(e){console.log("error",e)})}function txsBlockController(e,t){var s=moment(new Date).subtract(1,"day");this.selectedDate=new Date(s.format("MM-DD-YYYY")),this.txBlocks=["test","test","test"],console.log("txsBlockController")}function customerList(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/customer-list.directive.htm",replace:!0,scope:{},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(e,t,s,o){}function s(e,t){console.log("in costomer List controller")}return s.$inject=["$scope","$log"],e}function customerSalesDays(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/customer-sales-days.directive.htm",replace:!0,scope:{salesdaysList:"=",salesdaySelected:"="},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(s,e,t,o){s.$watch("vm.salesdaysList",function(e,t){e&&s.loadSaleDays()},!0)}function s(e,t,r){var n=this;n.detailedSalesDaysList=[],console.log("in the customerSalesDaysController"),e.loadSaleDays=function(){var s=[];Object.keys(n.salesdaysList).forEach(function(e){var t,o;s.push((t=n.salesdaysList[e],o="sales_days/"+t,new Promise(function(t,s){r.get.a_record(o).then(function(e){t(e)}).catch(function(e){s(e)})})))}),Promise.all(s).then(function(e){n.detailedSalesDaysList=e}).catch(function(e){console.log("error",e)})},e.salesDaySelected=function(e){n.salesdaySelected=n.detailedSalesDaysList[e].$id},n.addSalesDaysToCal=function(){console.log("addSalesDaysToCal")}}return s.$inject=["$scope","$log","firebaseService"],e}function dateSelector(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/date-selector.directive.htm",replace:!0,scope:{selectedDate:"="},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(e,t,s,o){}function s(e,t){var s=this;console.log("in date selector controller"),s.dayChange=function(e){var t=moment(new Date(s.selectedDate));switch({"-":0,"+":1}[e]){case 0:t.subtract(1,"day");break;case 1:t.add(1,"day")}s.selectedDate=new Date(t.format("MM-DD-YYYY"))}}return s.$inject=["$scope","$log"],e}function loginPassword(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-password.directive.htm",replace:!0,scope:{password:"=",active:"="},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(e,t,s,o){}function s(e,t){}return s.$inject=["$scope","$log"],e}function loginUsername(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-username.directive.htm",replace:!0,scope:{username:"=",active:"="},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(e,t,s,o){}function s(e,t){}return s.$inject=["$scope","$log"],e}function salesDayTxs(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/sales-day-transactions.directive.htm",replace:!0,scope:{txsList:"=",salesdaySelected:"="},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(s,e,t,o){s.$watch("vm.salesdaySelected",function(e,t){e&&s.loadSDTxs()},!0)}function s(s,e,o){var r=this;function n(e,t){e+=t;return new Promise(function(t,s){o.get.a_record(e).then(function(e){t(e)}).catch(function(e){s(e)})})}r.promiseList=[],r.detailedTxList=[],console.log("in the salesDayTxsController"),s.loadSDTxs=function(){n("sales_days/",r.salesdaySelected).then(function(t){Object.keys(t.transactions).forEach(function(e){"placeholder"!=t.transactions[e]&&r.promiseList.push(n("transactions/",t.transactions[e]))}),Promise.all(r.promiseList).then(function(e){r.detailedTxList=e,s.$apply()}).catch(function(e){console.log("error",e)})}).catch(function(e){console.log("error",e)})}}return s.$inject=["$scope","$log","firebaseService"],e}function txBlockSalesDaysTable(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/tx-block-sales-days-table.directive.htm",replace:!0,scope:{},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(e,t,s,o){}function s(e,t){console.log("in tx-block sales days table controller")}return s.$inject=["$scope","$log"],e}function txBlockTable(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/tx-block-table.directive.htm",replace:!0,scope:{txBlocks:"="},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(e,t,s,o){}function s(e,t){console.log("in tx-block table controller")}return s.$inject=["$scope","$log"],e}function dataService(i){return{sqr_locations:{list:function(){var e={};return console.log("getting locations list"),new Promise(function(t,s){i({method:"POST",url:"/squarepos/locations",headers:{"Content-Type":"application/json"},data:e}).then(function(e){t(e.data)},function(e){s(e)})})}},sqr_employees:{list:function(e,t,s,o,r,n,a,l){var c={status:e,external_id:t,limit:s,order:o,begin_updated_at:r,end_updated_at:n,begin_created_at:a,end_created_at:l};return console.log("getting employees list"),new Promise(function(t,s){i({method:"POST",url:"/squarepos/employees",headers:{"Content-Type":"application/json"},data:c}).then(function(e){t(e.data)},function(e){s(e)})})}},sqr_txs:{full_day:function(e,t,s){var o={location:e,start:t,end:s};return console.log("getting day's Transactions"),new Promise(function(t,s){i({method:"POST",url:"/squarepos/txs",headers:{"Content-Type":"application/json"},data:o}).then(function(e){t(e.data)},function(e){s(e)})})}},sales_days:{compile_batch:function(e){return new Promise(function(t,s){i({method:"POST",url:"/api/sales_days/compile_new_sales_days_batch",headers:{"Content-Type":"application/json"},data:e}).then(function(e){t(e.data)},function(e){s(e)})})}}}}function firebaseService(e,r,t){return{get:{customer_list:function(){return new Promise(function(e,t){})},a_record:function(o){return new Promise(function(t,s){var e=r(firebase.database().ref().child(o));e.$loaded().then(function(e){t(e)}).catch(function(e){s(e)})})}},authUser:{email:function(e,s){return console.log("authenticating user"),new Promise(function(t,o){firebase.auth().signInWithEmailAndPassword(e,s).then(function(e){t(e)}).catch(function(e){var t=e.code,s=e.message;o({code:t,message:s})})})}},compile:{customer_sales_days:function(e){}},test:function(){return"good test from FB Service"}}}function config(e,t){t.hashPrefix(""),e.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/customers",{templateUrl:"views/customersPage.htm",controller:"customersController",controllerAs:"vm",resolve:{customerList:customerList}}).when("/customers/:customerid",{templateUrl:"views/aCustomersPage.htm",controller:"aCustomersController",controllerAs:"vm",resolve:{customerList:customerList}}).when("/salesdays",{templateUrl:"views/salesDaysPage.htm",controller:"salesDaysController",controllerAs:"vm"}).when("/salesdays/:salesdayid",{templateUrl:"views/aSalesdayPage.htm",controller:"aSalesdayController",controllerAs:"vm"}).when("/cash_drawer_assignments",{templateUrl:"views/cashDrawerAssignmentsPage.htm",controller:"cashDrawerAssignmentsController",controllerAs:"vm"}).when("/square_txs",{templateUrl:"views/squareTxsPage.htm",controller:"squareTxsController",controllerAs:"vm"}).when("/tx_blocks",{templateUrl:"views/txsBlockPage.htm",controller:"txsBlockController",controllerAs:"vm"}).when("/login",{templateUrl:"views/loginPage.htm",controller:"loginController",controllerAs:"vm"}).when("/cme_schedule",{templateUrl:"views/cmeSchedulingPage.htm",controller:"cmeScheduleController",controllerAs:"vm"}).otherwise({redirectTo:"/"})}function customerList(){return new Promise(function(e,t){e("good test")})}angular.module("cne").controller("aCustomersController",aCustomersController),aCustomersController.$inject=["$scope","$log","$routeParams","$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").controller("aSalesdayController",aSalesdayController),aSalesdayController.$inject=["$scope","$log","$routeParams","$firebaseObject"],angular.module("cne").controller("cashDrawerAssignmentsController",cashDrawerAssignmentsController),cashDrawerAssignmentsController.$inject=["$scope","$log","$firebase","$firebaseObject","$firebaseArray","dataService"],angular.module("cne").controller("cmeScheduleController",cmeScheduleController),cmeScheduleController.$inject=["$scope","$log","$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").controller("customersController",customersController),customersController.$inject=["$scope","$log","$location","customerList","firebaseService","$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").controller("landingController",landingController),landingController.$inject=["$scope","$log"],angular.module("cne").controller("loginController",loginController),loginController.$inject=["$scope","$log","firebaseService"],angular.module("cne").controller("salesDaysController",salesDaysController),salesDaysController.$inject=["$scope","$log","$firebase","$firebaseArray","$firebaseObject","$http","dataService"],angular.module("cne").controller("squareTxsController",squareTxsController),squareTxsController.$inject=["$scope","$log","$routeParams","$firebase","$firebaseObject","$firebaseArray","dataService"],angular.module("cne").controller("txsBlockController",txsBlockController),txsBlockController.$inject=["$scope","$log"],angular.module("cne").directive("customerList",customerList),angular.module("cne").directive("customerSalesDays",customerSalesDays),angular.module("cne").directive("dateSelector",dateSelector),angular.module("cne").directive("loginPassword",loginPassword),angular.module("cne").directive("loginUsername",loginUsername),angular.module("cne").directive("salesDayTxs",salesDayTxs),angular.module("cne").directive("txBlockSalesDaysTable",txBlockSalesDaysTable),angular.module("cne").directive("txBlockTable",txBlockTable),angular.module("cne").factory("dataService",dataService),dataService.$inject=["$http"],angular.module("cne").factory("firebaseService",firebaseService),firebaseService.$inject=["$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").config(config);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMvd2ViYXBwLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9hLWN1c3RvbWVyLWNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL2Etc2FsZXNkYXktY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvY2FzaC1kcmF3ZXItYXNzaWdubWVudHMtY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvY21lLXNjaGVkdWxlLWNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL2N1c3RvbWVycy1jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9sYW5kaW5nLWNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL2xvZ2luLWNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL3NhbGVzZGF5cy1jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9zcXVhcmUtdHhzLWNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL3R4cy1ibG9jay1jb250cm9sbGVyLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2N1c3RvbWVyLWxpc3QuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvY3VzdG9tZXItc2FsZXMtZGF5cy5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvZGF0ZS1zZWxlY3Rvci5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvbG9naW4tcGFzc3dvcmQuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2xvZ2luLXVzZXJuYW1lLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9zYWxlcy1kYXktdHJhbnNhY3Rpb25zLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy90eC1ibG9jay1zYWxlcy1kYXlzLXRhYmxlLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy90eC1ibG9jay10YWJsZS5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2ZhY3Rvcmllcy9kYXRhLnNlcnZpY2UuanMiLCJzY3JpcHRzL2ZhY3Rvcmllcy9maXJlYmFzZS5zZXJ2aWNlLmpzIiwic2NyaXB0cy9yb3V0ZXMvcm91dGVzLWNvbmZpZy5qcyJdLCJuYW1lcyI6WyJhaE51dHMiLCJhbmd1bGFyIiwibW9kdWxlIiwiYUN1c3RvbWVyc0NvbnRyb2xsZXIiLCIkc2NvcGUiLCIkbG9nIiwiJHJvdXRlUGFyYW1zIiwiJGZpcmViYXNlIiwiJGZpcmViYXNlT2JqZWN0IiwiJGZpcmViYXNlQXJyYXkiLCJ2bSIsInRoaXMiLCJjdXN0b21lcklkIiwiY3VzdG9tZXJpZCIsImN1c3RvbWVyUHJvZmlsZSIsImZpcmViYXNlIiwiZGF0YWJhc2UiLCJyZWYiLCJjaGlsZCIsInRlbXBTYWxlc0RheXMiLCJzZWxlY3RlZCIsInNlYXNvbl9pZCIsImluZm8iLCJzZWxlY3RTZWFzb24iLCJpZCIsImNvbnNvbGUiLCJsb2ciLCJnZW5lcmF0ZVNhbGVzRGF5c0xpc3QiLCJzdGFydCIsInNlYXNvbnMiLCJzdGFydF9kYXRlIiwiZW5kIiwiZW5kX2RhdGUiLCJyZXBlYXRPYmplY3QiLCJyZXBlYXRzIiwicmVwZWF0T24iLCJyZXBlYXRfb24iLCJjb3VudGVyRGF0ZSIsIm1vbWVudCIsImVuZERhdGUiLCJmbGFnIiwiYWRkIiwiMCIsIjEiLCIyIiwiMyIsIjQiLCI1IiwiNiIsImRheSIsInB1c2giLCJpc1NhbWUiLCJzYXZlQ2hhbmdlcyIsIiRzYXZlIiwiYVNhbGVzZGF5Q29udHJvbGxlciIsImRiUGF0aCIsInNhbGVzZGF5aWQiLCJzYWxlc2RheVNlbGVjdGVkIiwiY3VycmVudENNRSIsImNhc2hEcmF3ZXJBc3NpZ25tZW50c0NvbnRyb2xsZXIiLCJkYXRhU2VydmljZSIsImN1cnJlbnRUaW1lIiwiRGF0ZSIsInNxckxvY2F0aW9ucyIsInNxckVtcGxveWVlcyIsInNlYXJjaGxpc3QiLCJ0aW1lcyIsImNhc2hEcmF3ZXJMaXN0IiwiY21lTGlzdCIsInRlc3QiLCJsb2NhdGlvbiIsImNtZVNjaGVkdWxlQ29udHJvbGxlciIsImNhbGVuZGFyRGF5cyIsImN1c3RvbWVyc0NvbnRyb2xsZXIiLCIkbG9jYXRpb24iLCJjdXN0b21lckxpc3QiLCJmaXJlYmFzZVNlcnZpY2UiLCJjdXN0b21lclNhbGVzRGF5cyIsInNlbGVjdGVkQ3VzdG9tZXIiLCIyMDE4IiwidGVzdExpc3QiLCJzdGF0ZSIsImN1c3RvbWVyIiwiJGluZGV4IiwiJGlkIiwic2FsZXNkYXkiLCJzZWxlY3RDdXN0b21lciIsImluZGV4X2lkIiwiY29tcGlsZSIsImN1c3RvbWVyX3NhbGVzX2RheXMiLCJ1cGRhdGVDdXN0b21lciIsInRoZW4iLCJzIiwiY2F0Y2giLCJlIiwiY2hhbmdlUmVjb3JkIiwic2VsZWN0IiwicHJldiIsIm5leHQiLCJnZW5lcmF0ZV9idWxrX3NhbGVzZGF5cyIsInNhbGVzX2RheXMiLCJjaGFuZ2VQYWdlIiwicGFnZVBhdGgiLCJwYXRoIiwibGFuZGluZ0NvbnRyb2xsZXIiLCJsb2dpbkNvbnRyb2xsZXIiLCJjcmVkZW50aWFscyIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJhY3RpdmUiLCJzdWJtaXRDcmVkcyIsInBhc3MiLCJhdXRoVXNlciIsImVtYWlsIiwic2FsZXNEYXlzQ29udHJvbGxlciIsIiRodHRwIiwic2FsZXNkYXlzTGlzdCIsInNlbGVjdGVkUmVjb3JkIiwidGVzdEN1c3RvbWVycyIsInRlc3RTZWFzb25zIiwidGVzdFRpbWVzIiwic2NoZWR1bGluZ19wYXJhbXMiLCJjdXN0b21lcl9pZCIsInNlYXNvbiIsImJvb2tlbmRfZGF0ZXMiLCJmaXJzdCIsImxhc3QiLCJldmVudF9kYXlzIiwiTW9uIiwiVHVlIiwiV2VkIiwiVGh1IiwiRnJpIiwiU2F0IiwiU3VuIiwic2FtZV9kYXlfbG9hZF9pbl9vdXQiLCJzY2hlZHVsZSIsImxvYWRfaW4iLCJsb2FkX291dCIsIm9wZW4iLCJjbG9zZSIsInNhbGVzX3N0YXJ0Iiwic2FsZXNfZW5kIiwidGVtcEl0ZXJhdGlvbnMiLCJ0ZW1wVGltZXMiLCJ1cGRhdGVSZWNvcmQiLCJyZWNvcmRfaWQiLCJhZGRTYWxlc0RheSIsIiRhZGQiLCJkYXRlIiwidG9JU09TdHJpbmciLCJkYXRldGltZSIsInNhbGVzX2RheV9pZCIsIm5hbWUiLCJmcmVxdWVuY3kiLCJpbnN0YW5jZSIsInRvdGFsIiwia2V5IiwiZ2VuZXJhdGVTYWxlc0RheXMiLCJwYXJhbXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNvbXBpbGVfYmF0Y2giLCIkYXBwbHkiLCJmb3JhbXRUaW1lIiwic2VjdGlvbiIsInRvZGF5IiwieWVhciIsImdldEZ1bGxZZWFyIiwibW9udGgiLCJnZXRNb250aCIsImdldERhdGUiLCJ0aW1lU3BsaXQiLCJzcGxpdCIsIm1pblNwbGl0IiwiaG91ciIsInBhcnNlSW50IiwibWludXRlIiwidG9TdHJpbmciLCJzYXZlU2FsZXNEYXlzIiwiZm9yRWFjaCIsImNtZV9pdGVyYXRpb24iLCJzcXVhcmVUeHNDb250cm9sbGVyIiwieWVzdGVyZGF5Iiwic3VidHJhY3QiLCJzcXJfbG9jYXRpb25zIiwibGlzdCIsInNxcl9lbXBsb3llZXMiLCJzeW5jTGlzdHMiLCJlbmRPZkRheSIsInN0YXJ0T2ZEYXkiLCJzZWxlY3RlZERhdGUiLCJob3VycyIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwiZm9ybWF0Iiwic3FyX3R4cyIsImZ1bGxfZGF5Iiwic2VsZWN0ZWRMb2NhdGlvbiIsImxlbmd0aCIsImRheXN0cmFuc2FjdGlvbnMiLCJzYWxlc0RheXMiLCJ1cGRhdGVTYWxlZGF5c0xpc3QiLCJmaWx0ZXJlZFNhbGVzRGF5cyIsImRheUhycyIsImRheUNoYW5nZSIsImRpcmVjdGlvbiIsImN1cnJlbnREYXRlIiwiLSIsIisiLCJlbXBsb3llZU5hbWUiLCJlbXBsb3llZV9pZCIsImVtcGxveWVlX25hbWUiLCJPYmplY3QiLCJrZXlzIiwibmV3TmFtZSIsImZpcnN0X25hbWUiLCJsYXN0X25hbWUiLCJhbGwiLCJ0eHNCbG9ja0NvbnRyb2xsZXIiLCJ0eEJsb2NrcyIsImRpcmVjdGl2ZSIsInJlc3RyaWN0IiwidGVtcGxhdGVVcmwiLCJyZXBsYWNlIiwic2NvcGUiLCJsaW5rIiwibGlua0Z1bmMiLCJjb250cm9sbGVyIiwiY3VzdG9tZXJMaXN0Q29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsImJpbmRUb0NvbnRyb2xsZXIiLCJlbCIsImF0dHIiLCJjdHJsIiwiJGluamVjdCIsImN1c3RvbWVyU2FsZXNEYXlzQ29udHJvbGxlciIsIiR3YXRjaCIsIm5ld1ZhbHVlIiwib2xkVmFsdWUiLCJsb2FkU2FsZURheXMiLCJkZXRhaWxlZFNhbGVzRGF5c0xpc3QiLCJhbGxQcm9taXNlcyIsImdldCIsImFfcmVjb3JkIiwic2FsZXNEYXlTZWxlY3RlZCIsImluZGV4IiwiYWRkU2FsZXNEYXlzVG9DYWwiLCJkYXRlU2VsZWN0b3IiLCJkYXRlU2VsZWN0b3JDb250cm9sbGVyIiwic2VsZiIsImxvZ2luUGFzc3dvcmQiLCJsb2dpblBhc3N3b3JkQ29udHJvbGxlciIsImxvZ2luVXNlcm5hbWUiLCJsb2dpblVzZXJuYW1lQ29udHJvbGxlciIsInNhbGVzRGF5VHhzIiwidHhzTGlzdCIsInNhbGVzRGF5VHhzQ29udHJvbGxlciIsImxvYWRTRFR4cyIsImxvYWRBUmNyZCIsInByb21pc2VMaXN0IiwiZGV0YWlsZWRUeExpc3QiLCJkZXRhaWxlZERheSIsInRyYW5zYWN0aW9ucyIsInR4QmxvY2tTYWxlc0RheXNUYWJsZSIsInR4QmxvY2tTYWxlc0RheXNUYWJsZUNvbnRyb2xsZXIiLCJ0eEJsb2NrVGFibGUiLCJ0eEJsb2NrVGFibGVDb250cm9sbGVyIiwicG9zdE9iamVjdCIsIm1ldGhvZCIsInVybCIsImhlYWRlcnMiLCJDb250ZW50LVR5cGUiLCJkYXRhIiwicmVzcG9uc2UiLCJlcnJvciIsInN0YXR1cyIsImV4dGVybmFsX2lkIiwibGltaXQiLCJvcmRlciIsImJlZ2luX3VwZGF0ZWRfYXQiLCJlbmRfdXBkYXRlZF9hdCIsImJlZ2luX2NyZWF0ZWRfYXQiLCJlbmRfY3JlYXRlZF9hdCIsInN0YXJ0RGF0ZSIsImN1c3RvbWVyX2xpc3QiLCJkZXNpcmVkUmVjb3JkIiwiJGxvYWRlZCIsImF1dGgiLCJzaWduSW5XaXRoRW1haWxBbmRQYXNzd29yZCIsImVycm9yQ29kZSIsImNvZGUiLCJlcnJvck1lc3NhZ2UiLCJtZXNzYWdlIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCIkbG9jYXRpb25Qcm92aWRlciIsImhhc2hQcmVmaXgiLCJ3aGVuIiwib3RoZXJ3aXNlIiwicmVkaXJlY3RUbyIsImZhY3RvcnkiXSwibWFwcGluZ3MiOiJzREFDQSxJQUFBQSxPQUFBQyxRQUFBQyxPQUFBLE1BQUEsQ0FBQSxVQUFBLFdBQUEsZUNNQSxTQUFBQyxxQkFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FHQSxJQUFBQyxFQUFBQyxLQUNBQyxFQUFBTixFQUFBTyxXQUdBSCxFQUFBSSxnQkFBQU4sRUFBQU8sU0FBQUMsV0FBQUMsTUFBQUMsTUFBQSxhQUFBQSxNQUFBTixJQUNBRixFQUFBUyxjQUFBLEdBQ0FULEVBQUFVLFNBQUEsQ0FDQUMsVUFBQSxJQUlBaEIsRUFBQWlCLEtBQUEsNEJBV0FaLEVBQUFhLGFBQUEsU0FBQUMsR0FDQWQsRUFBQVUsU0FBQUMsVUFBQUcsRUFDQUMsUUFBQUMsSUFBQSxLQUFBaEIsRUFBQVUsU0FBQUMsWUFJQVgsRUFBQWlCLHNCQUFBLFdBQ0EsSUFBQUMsRUFBQWxCLEVBQUFJLGdCQUFBZSxRQUFBbkIsRUFBQVUsU0FBQUMsV0FBQVMsV0FDQUMsRUFBQXJCLEVBQUFJLGdCQUFBZSxRQUFBbkIsRUFBQVUsU0FBQUMsV0FBQVcsU0FDQUMsRUFBQXZCLEVBQUFJLGdCQUFBZSxRQUFBbkIsRUFBQVUsU0FBQUMsV0FBQWEsUUFDQUMsRUFBQXpCLEVBQUFJLGdCQUFBZSxRQUFBbkIsRUFBQVUsU0FBQUMsV0FBQWUsVUFDQUMsRUFBQUMsT0FBQVYsR0FDQVcsRUFBQUQsT0FBQVAsR0FLQSxHQUhBTixRQUFBQyxJQUFBLHFCQUFB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LFNBQUEsUUNFQTNPLFFBQ0FDLE9BQUEsT0FDQTROLFVBQUEsZUFBQW5KLGNDRkExRSxRQUNBQyxPQUFBLE9BQ0E0TixVQUFBLG9CQUFBakosbUJDRkE1RSxRQUNBQyxPQUFBLE9BQ0E0TixVQUFBLGVBQUEyQixjQ0RBeFAsUUFDQUMsT0FBQSxPQUNBNE4sVUFBQSxnQkFBQThCLGVDRkEzUCxRQUNBQyxPQUFBLE9BQ0E0TixVQUFBLGdCQUFBZ0MsZUNIQTdQLFFBQ0FDLE9BQUEsT0FDQTROLFVBQUEsY0FBQWtDLGFDRkEvUCxRQUNBQyxPQUFBLE9BQ0E0TixVQUFBLHdCQUFBMkMsdUJDRkF4USxRQUNBQyxPQUFBLE9BQ0E0TixVQUFBLGVBQUE2QyxjQ0ZBMVEsUUFDQUMsT0FBQSxPQUNBNFMsUUFBQSxjQUFBbFAsYUFHQUEsWUFBQWdMLFFBQUEsQ0FBQSxTQ0xBM08sUUFDQUMsT0FBQSxPQUNBNFMsUUFBQSxrQkFBQWxPLGlCQUdBQSxnQkFBQWdLLFFBQUEsQ0FBQSxZQUFBLGtCQUFBLGtCQ05BM08sUUFDQUMsT0FBQSxPQUNBcVMsT0FBQUEiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTU9EVUxFXG52YXIgYWhOdXRzID0gYW5ndWxhci5tb2R1bGUoJ2NuZScsIFsnbmdSb3V0ZScsICdmaXJlYmFzZScsICduZ1Nhbml0aXplJ10pO1xuIiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2NuZScpXG4gICAgLmNvbnRyb2xsZXIoJ2FDdXN0b21lcnNDb250cm9sbGVyJywgYUN1c3RvbWVyc0NvbnRyb2xsZXIpO1xuXG5hQ3VzdG9tZXJzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJywgJyRyb3V0ZVBhcmFtcycsICckZmlyZWJhc2UnLCAnJGZpcmViYXNlT2JqZWN0JywgJyRmaXJlYmFzZUFycmF5J107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gYUN1c3RvbWVyc0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkcm91dGVQYXJhbXMsICRmaXJlYmFzZSwgJGZpcmViYXNlT2JqZWN0LCAkZmlyZWJhc2VBcnJheSkge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblx0dmFyIGN1c3RvbWVySWQgPSAkcm91dGVQYXJhbXMuY3VzdG9tZXJpZDtcblx0XG5cdC8vdmlldyBtb2RlbCB2YXJpYWJsZXNcblx0dm0uY3VzdG9tZXJQcm9maWxlID0gJGZpcmViYXNlT2JqZWN0KGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCkuY2hpbGQoJ2N1c3RvbWVycycpLmNoaWxkKGN1c3RvbWVySWQpKTtcblx0dm0udGVtcFNhbGVzRGF5cyA9IFtdO1xuXHR2bS5zZWxlY3RlZCA9IHtcblx0XHRzZWFzb25faWQ6IFwiXCJcblx0fTtcblxuXHQvL25vdGlmeSBwcm9ncmVzc1xuXHQkbG9nLmluZm8oJ2luIGEgY3VzdG9tZXIgY29udHJvbGxlcicpO1x0Ly9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cblx0Ly9kZWZpbmUgbG9jYWwgZnVuY3Rpb25zXG5cdGZ1bmN0aW9uIGlzQ21lRGF5KGNvdW50ZXJEYXRlLCByZXBlYXRPYmplY3QsIHJlcGVhdE9uKSB7XG5cdFx0dmFyIGRheUhhc2ggPSB7XCIwXCI6IFwic3VuXCIsIFwiMVwiOiBcIm1vblwiLCBcIjJcIjogXCJ0dWVcIixcIjNcIjogXCJ3ZWRcIiwgXCI0XCI6IFwidGh1XCIsIFwiNVwiOiBcImZyaVwiLCBcIjZcIjogXCJzYXRcIn1cblx0XHR2YXIgd2tkYXkgPSBkYXlIYXNoW2NvdW50ZXJEYXRlLmRheSgpXTtcblx0XHQvL2NvbnNvbGUubG9nKHJlcGVhdE9uLCBjb3VudGVyRGF0ZS5kYXkoKSk7XG5cdFx0cmV0dXJuIHJlcGVhdE9uW3drZGF5XTtcblx0fTtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIGZ1bmNpdG9uc1xuXHR2bS5zZWxlY3RTZWFzb24gPSBmdW5jdGlvbihpZCkge1xuXHRcdHZtLnNlbGVjdGVkLnNlYXNvbl9pZCA9IGlkO1xuXHRcdGNvbnNvbGUubG9nKCdpZCcsIHZtLnNlbGVjdGVkLnNlYXNvbl9pZCk7XG5cdH1cblxuXHQvL1xuXHR2bS5nZW5lcmF0ZVNhbGVzRGF5c0xpc3QgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgc3RhcnQgPSB2bS5jdXN0b21lclByb2ZpbGUuc2Vhc29uc1t2bS5zZWxlY3RlZC5zZWFzb25faWRdLnN0YXJ0X2RhdGVcblx0XHR2YXIgZW5kID0gdm0uY3VzdG9tZXJQcm9maWxlLnNlYXNvbnNbdm0uc2VsZWN0ZWQuc2Vhc29uX2lkXS5lbmRfZGF0ZVxuXHRcdHZhciByZXBlYXRPYmplY3QgPSB2bS5jdXN0b21lclByb2ZpbGUuc2Vhc29uc1t2bS5zZWxlY3RlZC5zZWFzb25faWRdLnJlcGVhdHNcblx0XHR2YXIgcmVwZWF0T24gPSB2bS5jdXN0b21lclByb2ZpbGUuc2Vhc29uc1t2bS5zZWxlY3RlZC5zZWFzb25faWRdLnJlcGVhdF9vblxuXHRcdHZhciBjb3VudGVyRGF0ZSA9IG1vbWVudChzdGFydCk7XG5cdFx0dmFyIGVuZERhdGUgPSBtb21lbnQoZW5kKTtcblxuXHRcdGNvbnNvbGUubG9nKCd0cnlpbmcgdG8gZ2VuZXJhdGUnLCBzdGFydCwgZW5kLCByZXBlYXRPYmplY3QsIHJlcGVhdE9uKTtcblx0XHRcblx0XHQvL2NoZWNrIHZhbHVlc1xuXHRcdGlmKFx0IHN0YXJ0ICE9IFwiXCIgJiZcblx0XHRcdCBlbmQgIT0gXCJcIiAmJlxuXHRcdFx0IHJlcGVhdE9iamVjdCAhPSBcIlwiICYmXG5cdFx0XHQgcmVwZWF0T24gIT0gXCJcIikge1xuXHRcdFx0Y29uc29sZS5sb2coJ2dvb2QgdmFsdWVzJywgY291bnRlckRhdGUpO1xuXG5cdFx0XHR2YXIgZmxhZyA9IGZhbHNlO1xuXG5cdFx0XHQvL2l0ZXJhdGUgdGhyb3VnaCBhbGwgdGhlIGRheXMgYmV0d2VlbiBzdGFydCBhbmQgZW5kXG5cdFx0XHR3aGlsZSghZmxhZykge1xuXG5cdFx0XHRcdC8vaW5jcmltZW50IHRoZSBjb3V0bmVyXG5cdFx0XHRcdGNvdW50ZXJEYXRlID0gY291bnRlckRhdGUuYWRkKDEsIFwiZGF5XCIpO1xuXG5cdFx0XHRcdC8vY29uc29sZS5sb2coY291bnRlckRhdGUuZm9ybWF0KCkpO1xuXG5cdFx0XHRcdGlmKGlzQ21lRGF5KGNvdW50ZXJEYXRlLCByZXBlYXRPYmplY3QsIHJlcGVhdE9uKSkge1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIGFkZCBzYWxlcyBkYXlcblx0XHRcdFx0XHR2bS50ZW1wU2FsZXNEYXlzLnB1c2goMSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvL2NoZWNrIGZvciBtYXRjaFxuXHRcdFx0XHRpZihtb21lbnQoY291bnRlckRhdGUpLmlzU2FtZShlbmREYXRlKSkgZmxhZyA9IHRydWVcblx0XHRcdFx0XG5cdFx0XHR9XG5cblx0XHRcdGNvbnNvbGUubG9nKHZtLnRlbXBTYWxlc0RheXMpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnNvbGUubG9nKCdtaXNzaW5nIHZhbHVlcycpO1xuXHRcdH1cblx0fVxuXG5cdHZtLnNhdmVDaGFuZ2VzID0gZnVuY3Rpb24oKSB7IHZtLmN1c3RvbWVyUHJvZmlsZS4kc2F2ZSgpOyBjb25zb2xlLmxvZygnc2F2ZWQgY2hhbmdlJyk7IH1cblx0Ly9ydW4gdGhlIHRlc3RcblxuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2NuZScpXG4gICAgLmNvbnRyb2xsZXIoJ2FTYWxlc2RheUNvbnRyb2xsZXInLCBhU2FsZXNkYXlDb250cm9sbGVyKTtcblxuYVNhbGVzZGF5Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJywgJyRyb3V0ZVBhcmFtcycsICckZmlyZWJhc2VPYmplY3QnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBhU2FsZXNkYXlDb250cm9sbGVyKCRzY29wZSwgJGxvZywgJHJvdXRlUGFyYW1zLCAkZmlyZWJhc2VPYmplY3QpIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cdHZhciBkYlBhdGggPSAnc2FsZXNfZGF5cy8nICsgJHJvdXRlUGFyYW1zLnNhbGVzZGF5aWQ7XG5cdHZtLnNhbGVzZGF5U2VsZWN0ZWQgPSAkcm91dGVQYXJhbXMuc2FsZXNkYXlpZDtcblxuXHR2bS5jdXJyZW50Q01FID0gJGZpcmViYXNlT2JqZWN0KGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCkuY2hpbGQoZGJQYXRoKSk7XG5cblx0JGxvZy5pbmZvKCdpbiBhIHNhbGVzZGF5IGNvbnRyb2xsZXInKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cdC8vZGVmaW5lIGxvY2FsIGZ1bmN0aW9uc1xuXG5cdC8vcnVuIHRoZSB0ZXN0XG5cblxufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdjbmUnKVxuICAgIC5jb250cm9sbGVyKCdjYXNoRHJhd2VyQXNzaWdubWVudHNDb250cm9sbGVyJywgY2FzaERyYXdlckFzc2lnbm1lbnRzQ29udHJvbGxlcik7XG5cbmNhc2hEcmF3ZXJBc3NpZ25tZW50c0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywnJGxvZycsICckZmlyZWJhc2UnLCAnJGZpcmViYXNlT2JqZWN0JywgJyRmaXJlYmFzZUFycmF5JywgJ2RhdGFTZXJ2aWNlJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY2FzaERyYXdlckFzc2lnbm1lbnRzQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRmaXJlYmFzZSwgJGZpcmViYXNlT2JqZWN0LCAkZmlyZWJhc2VBcnJheSwgZGF0YVNlcnZpY2UpIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cdHZhciBjdXJyZW50VGltZSA9IG5ldyBEYXRlKCk7XG5cblx0dm0uc3FyTG9jYXRpb25zID0gJGZpcmViYXNlQXJyYXkoZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoKS5jaGlsZCgncmVmZXJlbmNlX2xpc3RzL3Nxcl9sb2NhdGlvbnMnKSk7XG5cdHZtLnNxckVtcGxveWVlcyA9ICRmaXJlYmFzZUFycmF5KGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCkuY2hpbGQoJ3JlZmVyZW5jZV9saXN0cy9zcXJfZW1wbG95ZWVzJykpO1xuXHR2bS5zZWFyY2hsaXN0ID0ge1xuXHRcdHRpbWVzOiB7IHN0YXJ0OiBjdXJyZW50VGltZSwgZW5kOiBjdXJyZW50VGltZX1cblx0fVxuXHRcblx0dm0uY2FzaERyYXdlckxpc3QgPSAkZmlyZWJhc2VBcnJheShmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZigpLmNoaWxkKCdzcXJfY2FzaF9kcmF3ZXJzJykpO1xuXHR2bS5jbWVMaXN0ID0gW3t0ZXN0OlwidGVzdFwifSwge3Rlc3Q6XCJ0ZXN0XCJ9LCB7dGVzdDpcInRlc3RcIn1dO1xuXG5cdHZtLnNlbGVjdGVkID0ge1xuXHRcdGxvY2F0aW9uOiBcIk9yZWdvblwiXG5cdH07XG5cdFxuXHQvL25vdGlmeSBsb2NhdGlvblxuXHQkbG9nLmluZm8oJ2luIHRoZSBjYXNoIGRyYXdlciBhc3NpZ25tZW50IGNvbnRyb2xsZXInLCBkYXRhU2VydmljZSk7XHQvL1RPRE86IFRBS0UgVEhJUyBPVVQgTEFURVJcblx0XG5cdC8vZGVmaW5lIGxvY2FsIGZ1bmN0aW9uc1xuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2NuZScpXG4gICAgLmNvbnRyb2xsZXIoJ2NtZVNjaGVkdWxlQ29udHJvbGxlcicsIGNtZVNjaGVkdWxlQ29udHJvbGxlcik7XG5cbmNtZVNjaGVkdWxlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJywgJyRmaXJlYmFzZScsICckZmlyZWJhc2VPYmplY3QnLCAnJGZpcmViYXNlQXJyYXknXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjbWVTY2hlZHVsZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkZmlyZWJhc2UsICRmaXJlYmFzZU9iamVjdCwgJGZpcmViYXNlQXJyYXkpIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cdHZtLmNhbGVuZGFyRGF5cyA9ICRmaXJlYmFzZUFycmF5KGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCkuY2hpbGQoJ2NhbGVuZGVyLzIwMTgnKSk7XG5cdCRsb2cuaW5mbygnaW4gdGhlIENNRSBTY2hlZHVsZSBjb250cm9sbGVyJyk7XHQvL1RPRE86IFRBS0UgVEhJUyBPVVQgTEFURVJcblx0XG5cdC8vZGVmaW5lIGxvY2FsIGZ1bmN0aW9uc1xuXG5cdC8vcnVuIHRoZSB0ZXN0XG5cblxufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdjbmUnKVxuICAgIC5jb250cm9sbGVyKCdjdXN0b21lcnNDb250cm9sbGVyJywgY3VzdG9tZXJzQ29udHJvbGxlcik7XG5cbmN1c3RvbWVyc0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywnJGxvZycsICckbG9jYXRpb24nLCAnY3VzdG9tZXJMaXN0JywgJ2ZpcmViYXNlU2VydmljZScsICckZmlyZWJhc2UnLCAnJGZpcmViYXNlT2JqZWN0JywgJyRmaXJlYmFzZUFycmF5J107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY3VzdG9tZXJzQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRsb2NhdGlvbiwgY3VzdG9tZXJMaXN0LCBmaXJlYmFzZVNlcnZpY2UsICRmaXJlYmFzZSwgJGZpcmViYXNlT2JqZWN0LCAkZmlyZWJhc2VBcnJheSkge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblx0dm0uY3VzdG9tZXJMaXN0ID0gJGZpcmViYXNlQXJyYXkoZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoKS5jaGlsZCgnY3VzdG9tZXJzJykpO1xuXHR2bS5jdXN0b21lclNhbGVzRGF5cyA9IFtdO1xuXHR2bS5zZWxlY3RlZEN1c3RvbWVyID0geyBzZWFzb25zOiB7IFwiMjAxOFwiOiB7IGlkOiAyMDE4fSB9IH07XG5cdHZtLnRlc3RMaXN0ID0gWydhJywgJ2InLCAnYyddOyAvLyRmaXJlYmFzZUFycmF5KGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCkuY2hpbGQoJ2N1c3RvbWVycycpLmNoaWxkKCdjdXN0b21lcl9saXN0JykpO1xuXHR2bS5zdGF0ZSA9IHtcblx0XHRzZWxlY3RlZDoge1xuXHRcdFx0Y3VzdG9tZXI6IHtcblx0XHRcdFx0JGluZGV4OiBcIlwiLFxuXHRcdFx0XHQkaWQ6IFwiXCJcblx0XHRcdH0sXG5cdFx0XHRzYWxlc2RheToge1xuXHRcdFx0XHQkaW5kZXg6IFwidGVzdFwiLFxuXHRcdFx0XHQkaWQ6IFwidGVzdFwiXG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdC8vaWRlbnRpZnkgd2hlcmUgd2UgYXJlXG5cdCRsb2cuaW5mbygnaW4gdGhlIGN1c3RvbWVycyBjb250cm9sbGVyJyk7XHQvL1RPRE86IFRBS0UgVEhJUyBPVVQgTEFURVJcblx0XG5cblx0Lypcblx0Klx0TE9DQUwgRlVOQ1RJT05TIEdPIEhFUkVcblx0KlxuXHQqL1xuXG5cdC8vXHRMT0FEIENVU1RPTUVSIExJU1Rcblx0ZnVuY3Rpb24gbG9hZF9jdXN0b21lcl9saXN0KCkge1xuXHRcdFxuXHRcdC8vdHJhY2sgc3RhcnRpbmcgZnVuY3Rpb25cblx0XHQvL2NvbnNvbGUubG9nKCdsb2FkaW5nIHRoZSBjdXN0b21lciBsaXN0Jyk7XG5cdFx0XG5cdFx0Ly9nYXRoZXIgdGhlIGRhdGFcblx0XHRmaXJlYmFzZVNlcnZpY2UuZ2V0LmN1c3RvbWVyX2xpc3QoKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3Mocykge1xuXHRcdFx0XG5cdFx0XHQvL2NvbnNvbGUubG9nKCdnb3QgdGhpcyByZXNwb25zJywgcyk7XG5cdFx0XHRcblx0XHRcdC8vd2hlbiB0aGUgbGlzdCBoYXMgYmVlbiBsb2FkZWQgdXBkYXRlIHRoZSB2YXJpYWJsZXNcblx0XHRcdC8vdm0uY3VzdG9tZXJMaXN0ID0gcztcblx0XHRcdHZtLmN1c3RvbWVyTGlzdCA9ICRmaXJlYmFzZUFycmF5KGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCkuY2hpbGQoJ2N1c3RvbWVycycpLmNoaWxkKCdjdXN0b21lcl9saXN0JykpO1xuXG5cdFx0XHQvL3JlZmxlY3QgdGhlIGNoYW5nZXNcblx0XHRcdCRzY29wZS4kYXBwbHkoKTtcblxuXHRcdH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcblx0XHRcdC8vaWYgdGhlcmUgd2FzIGFuIGVycm9yIHRocm93IHRoZSBlcnJvclxuXHRcdFx0Y29uc29sZS5sb2coJ2Vycm9yJyk7XG5cdFx0fSk7XG5cdH07XG5cblx0Lypcblx0Klx0VklFVyBNT0RFTCBGVU5DVElPTlMgR08gSEVSRVxuXHQqXG5cdCovXHRcblx0Ly9cdFNFTEVDVCBDTElDS0VEIENVU1RPTUVSXG5cdHZtLnNlbGVjdEN1c3RvbWVyID0gZnVuY3Rpb24oaW5kZXhfaWQpIHtcblx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2bS5zdGF0ZS5zZWxlY3RlZC5jdXN0b21lci4kaW5kZXggPSBpbmRleF9pZDtcblx0XHR2bS5zdGF0ZS5zZWxlY3RlZC5jdXN0b21lci4kaWQgPSB2bS5jdXN0b21lckxpc3RbaW5kZXhfaWRdLiRpZDtcblx0XHR2bS5zZWxlY3RlZEN1c3RvbWVyID0gJGZpcmViYXNlT2JqZWN0KGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCkuY2hpbGQoJ2N1c3RvbWVycycpLmNoaWxkKHZtLmN1c3RvbWVyTGlzdFtpbmRleF9pZF0uJGlkKSk7XG5cdFx0dm0uY3VzdG9tZXJTYWxlc0RheXMgPSBmaXJlYmFzZVNlcnZpY2UuY29tcGlsZS5jdXN0b21lcl9zYWxlc19kYXlzKHZtLnN0YXRlLnNlbGVjdGVkLmN1c3RvbWVyLiRpZCk7XG5cdH07XG5cblx0Ly9cdFVQREFURSBUSEUgQ1VTVE9NRVIgUkVDT1JEXG5cdHZtLnVwZGF0ZUN1c3RvbWVyID0gZnVuY3Rpb24oKSB7XG5cdFx0dm0uc2VsZWN0ZWRDdXN0b21lci4kc2F2ZSgpLnRoZW4oZnVuY3Rpb24gc3VjY2VzKHMpIHtcblx0XHRcdGNvbnNvbGUubG9nKCd1cGRhdGVkIHJlY29yZCBzdWNjZXNzZnVsbHknKTtcblx0XHR9KS5jYXRjaChmdW5jdGlvbiBlcnJvcihlKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnZXJyb3IgdXBkYXRpbmcgcmVjb3JkJywgZSk7XG5cdFx0fSk7XG5cdH07XG5cblx0Ly9cdE1PVkUgVE8gVEhFIE5FWFQgQ1VTVE9NRVJcblx0dm0uY2hhbmdlUmVjb3JkID0gZnVuY3Rpb24oc2VsZWN0KSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIG9wdG4gPSB7IFwicHJldlwiOiAwLCBcIm5leHRcIjogMSB9O1xuXHRcdHZhciBpbmRleF9pZCA9IHZtLnN0YXRlLnNlbGVjdGVkLmN1c3RvbWVyLiRpbmRleDtcblxuXHRcdC8vY29uc29sZS5sb2coaW5kZXhfaWQpO1xuXG5cdFx0c3dpdGNoKG9wdG5bc2VsZWN0XSkge1xuXHRcdFx0Y2FzZSAwOlxuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdwcmV2aW91cyByZWNvcmQnKTtcblx0XHRcdFx0dm0uc2VsZWN0Q3VzdG9tZXIodm0uc3RhdGUuc2VsZWN0ZWQuY3VzdG9tZXIuJGluZGV4IC0gMSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCduZXh0IHJlY29yZCcpO1xuXHRcdFx0XHR2bS5zZWxlY3RDdXN0b21lcih2bS5zdGF0ZS5zZWxlY3RlZC5jdXN0b21lci4kaW5kZXggKyAxKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH07XG5cblx0Ly9cdEdFTkVSQVRFIEJVTEsgU0FMRVMgREFZU1xuXHR2bS5nZW5lcmF0ZV9idWxrX3NhbGVzZGF5cyA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdGNvbnNvbGUubG9nKCdnZW5lcmF0aW5nIGJ1bGsgc2FsZXNkYXlzJywgdm0uc2VsZWN0ZWRDdXN0b21lci5zYWxlc19kYXlzKTtcblx0XHRcblx0fTtcblxuXHR2bS5jaGFuZ2VQYWdlID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHBhZ2VQYXRoID0gJy9jdXN0b21lcnMvJyArIHZtLnN0YXRlLnNlbGVjdGVkLmN1c3RvbWVyLiRpZDtcblx0XHRjb25zb2xlLmxvZygncmVkaXJlY3RpbmcgdG8nLCBwYWdlUGF0aCk7XG5cdFx0JGxvY2F0aW9uLnBhdGgocGFnZVBhdGgpO1xuXHRcdC8vJHNjb3BlLiRhcHBseSgpO1xuXHR9XG5cblx0Ly9ydW4gdGhlIHRlc3RcblxuXHQvL29uIHBhZ2UgbG9hZFxuXHQvL2xvYWRfY3VzdG9tZXJfbGlzdCgpO1xuXG5cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnY25lJylcbiAgICAuY29udHJvbGxlcignbGFuZGluZ0NvbnRyb2xsZXInLCBsYW5kaW5nQ29udHJvbGxlcik7XG5cbmxhbmRpbmdDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsJyRsb2cnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsYW5kaW5nQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cblx0JGxvZy5pbmZvKCdpbiB0aGUgbGFuZGluZyBjb250cm9sbGVyJyk7XHQvL1RPRE86IFRBS0UgVEhJUyBPVVQgTEFURVJcblxuXHQvL2RlZmluZSBsb2NhbCBmdW5jdGlvbnNcblxuXHQvL3J1biB0aGUgdGVzdFxuXG5cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnY25lJylcbiAgICAuY29udHJvbGxlcignbG9naW5Db250cm9sbGVyJywgbG9naW5Db250cm9sbGVyKTtcblxubG9naW5Db250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsJyRsb2cnLCAnZmlyZWJhc2VTZXJ2aWNlJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gbG9naW5Db250cm9sbGVyKCRzY29wZSwgJGxvZywgZmlyZWJhc2VTZXJ2aWNlKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVzXG5cdHZtLmNyZWRlbnRpYWxzID0ge1xuXHRcdHVzZXJuYW1lOiBcIlwiLFxuXHRcdHBhc3N3b3JkOiBcIlwiXG5cdH07XG5cblx0dm0uYWN0aXZlID0ge1xuXHRcdHVzZXJuYW1lOiBmYWxzZSxcblx0XHRwYXNzd29yZDogZmFsc2Vcblx0fTtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIGZ1bmN0aW9uc1xuXHR2bS5zdWJtaXRDcmVkcyA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzKSB7XG5cdFx0XG5cdFx0Y29uc29sZS5sb2coJ3N1Ym1pdENyZWRzIGNsaWNrZWQnKTtcblx0XHRcblx0XHQvL3N1Ym1pdCBjcmVkZW50aWFsc1xuXHRcdGZpcmViYXNlU2VydmljZS5hdXRoVXNlci5lbWFpbCh1c2VybmFtZSwgcGFzcykudGhlbihmdW5jdGlvbiBzdWNjZXNzIChzKSB7XG5cblx0XHRcdGNvbnNvbGUubG9nKCd3YXMgc3VjY2VzcycsIHMpO1xuXG5cdFx0fSkuY2F0Y2goZnVuY3Rpb24gZXJyb3IoZSkge1xuXHRcdFx0Y29uc29sZS5sb2coXCJFcnJvcjpcIiwgZSk7XG5cdFx0fSk7XG5cblx0fTtcblxuXHQkbG9nLmluZm8oJ2luIHRoZSBsb2dpbiBjb250cm9sbGVyJyk7XHQvL1RPRE86IFRBS0UgVEhJUyBPVVQgTEFURVJcblxuXHQvL2RlZmluZSBsb2NhbCBmdW5jdGlvbnNcblxuXHQvL3J1biB0aGUgdGVzdFxuXG5cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnY25lJylcbiAgICAuY29udHJvbGxlcignc2FsZXNEYXlzQ29udHJvbGxlcicsIHNhbGVzRGF5c0NvbnRyb2xsZXIpO1xuXG5zYWxlc0RheXNDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsJyRsb2cnLCAnJGZpcmViYXNlJywgJyRmaXJlYmFzZUFycmF5JywgJyRmaXJlYmFzZU9iamVjdCcsICckaHR0cCcsICdkYXRhU2VydmljZSddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHNhbGVzRGF5c0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkZmlyZWJhc2UsICRmaXJlYmFzZUFycmF5LCAkZmlyZWJhc2VPYmplY3QsICRodHRwLCBkYXRhU2VydmljZSkge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblx0Lyp2YXIgaXRlcmF0aW9uID0ge1xuXHRcdGRhdGU6IFwiMjAxOC0wNS0wNVQwNjowMDowMFpcIixcblx0XHR3a19kYXk6IFwiU2F0XCIsXG5cdFx0aWQ6IFwiYmVhdmVydG9uX2ZtXzAwMVwiLFxuXHRcdHNjaGVkdWxlOiB7XG5cdFx0XHRsb2FkX2luOiBcIlwiLFxuXHRcdFx0bG9hZF9vdXQ6IFwiXCIsXG5cdFx0XHRvcGVuOiBcIjg6MDAgQU1cIixcblx0XHRcdGNsb3NlOiBcIjE6MzAgUE1cIixcblx0XHRcdHNhbGVzX3N0YXJ0OiBcIlwiLFxuXHRcdFx0c2FsZXNfZW5kOiBcIlwiXG5cdFx0fVxuXHR9OyovXG5cdHZtLnNhbGVzZGF5c0xpc3QgPSAkZmlyZWJhc2VBcnJheShmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZigpLmNoaWxkKCdzYWxlc19kYXlzJykpO1xuXHR2bS5zZWxlY3RlZFJlY29yZCA9IHsgaWQ6IFwiMjAzOTc1MlwiIH07XG5cdHZtLnRlc3RDdXN0b21lcnMgPSBbIFwiQmVhdmVydG9uXCIsIFwiT3JlbmNvXCIgXTtcblx0dm0udGVzdFNlYXNvbnMgPSBbICcyMDE4JywgJzIwMTcnIF07XG5cdC8vdm0ucmVwZWF0cyA9IFsgJ25ldmVyJywgXCJldmVyeSB3ZWVrXCIsIFwiZXZlcnkgMiB3ZWVrc1wiLCBcImV2ZXJ5IDMgd2Vla3NcIiwgXCJldmVyeV80X3dlZWtzXCIsIFwiZXZlcnlfNV93ZWVrc1wiLCBcImV2ZXJ5XzZfd2Vla3NcIiwgXCJldmVyeV83X3dlZWtzXCIsIFwiZXZlcnlfOF93ZWVrc1wiIF07XG5cdHZtLnRlc3RUaW1lcyA9IFsgJzk6MDAgQU0nLCc5OjE1IEFNJywnOTozMCBBTScsJzk6NDUgQU0nICBdO1xuXHR2bS5zY2hlZHVsaW5nX3BhcmFtcyA9IHtcblx0XHRjdXN0b21lcjogXCJcIixcblx0XHRjdXN0b21lcl9pZDogXCJcIixcblx0XHRzZWFzb246IFwiXCIsXG5cdFx0Ym9va2VuZF9kYXRlczoge1xuXHRcdFx0Zmlyc3Q6IFwiXCIsXG5cdFx0XHRsYXN0OiBcIlwiXG5cdFx0fSxcblx0XHRyZXBlYXRzOiBcIlwiLFxuXHRcdGV2ZW50X2RheXM6IHtcblx0XHRcdE1vbjogZmFsc2UsXG5cdFx0XHRUdWU6IGZhbHNlLFxuXHRcdFx0V2VkOiBmYWxzZSxcblx0XHRcdFRodTogZmFsc2UsXG5cdFx0XHRGcmk6IGZhbHNlLFxuXHRcdFx0U2F0OiBmYWxzZSxcblx0XHRcdFN1bjogZmFsc2Vcblx0XHR9LFxuXHRcdHNhbWVfZGF5X2xvYWRfaW5fb3V0OiB0cnVlLFxuXHRcdHNjaGVkdWxlOiB7XG5cdFx0XHRsb2FkX2luOiBcIlwiLFxuXHRcdFx0bG9hZF9vdXQ6IFwiXCIsXG5cdFx0XHRvcGVuOiBcIlwiLFxuXHRcdFx0Y2xvc2U6IFwiXCIsXG5cdFx0XHRzYWxlc19zdGFydDogXCJcIixcblx0XHRcdHNhbGVzX2VuZDogXCJcIlxuXHRcdH1cblx0fTtcblx0dm0udGVtcEl0ZXJhdGlvbnMgPSBbXTtcblx0dm0udGVtcFRpbWVzID0ge1xuXHRcdGxvYWRfaW46IFwiXCIsXG5cdFx0bG9hZF9vdXQ6IFwiXCIsXG5cdFx0b3BlbjogXCJcIixcblx0XHRjbG9zZTogXCJcIixcblx0XHRzYWxlc19zdGFydDogXCJcIixcblx0XHRzYWxlc19lbmQ6IFwiXCJcblx0fVxuXG5cdC8vaWRlbnRpZnkgY29udHJvbGxlclxuXHQkbG9nLmluZm8oJ2luIHRoZSBzYWxlcyBkYXlzIGNvbnRyb2xsZXInKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cdC8qXG5cdCpcdExPQ0FMIEZVTkNUSU9OUyBHTyBIRVJFXG5cdCpcblx0Ki9cblx0ZnVuY3Rpb24gYnVpbGRfc2FsZXNfZGF5c19hcnJheShwYXJhbXMpIHtcblx0XHQvL2xvY2FsIHZhcmlhYmxlc1xuXG5cdFx0Ly9jb25zb2xlLmxvZygnZ290IHRoZXNlIHBhcmFtcycsIHN0YXJ0LCBlbmQpO1xuXG5cdFx0Ly9yZXR1cm4gYXN5bmMgd29ya1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdC8vYWNjZXNzIGRhdGEgc2VydmljZVxuXHRcdFx0ZGF0YVNlcnZpY2Uuc2FsZXNfZGF5cy5jb21waWxlX2JhdGNoKHBhcmFtcykudGhlbihmdW5jdGlvbiBzdWNjZXNzKHMpIHtcblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnc3VjY2VzcycsIHMpO1xuXHRcdFx0XHRyZXNvbHZlKHMpO1xuXHRcdFx0fSkuY2F0Y2goZnVuY3Rpb24gZXJyb3IoZSkge1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdlcnJvcicsIGUpO1xuXHRcdFx0XHRyZWplY3QoZSk7XG5cdFx0XHR9KTtcblxuXHRcdH0pO1xuXG5cdH07XG5cblxuXHQvKlxuXHQqXHRWSUVXIE1PREVMIEZVTkNUSU9OUyBHTyBIRVJFXG5cdCpcblx0Ki9cblx0Ly9cdFVQREFURSBSRUNPUkRcblx0dm0udXBkYXRlUmVjb3JkID0gZnVuY3Rpb24ocmVjb3JkX2lkKSB7XG5cdFx0Y29uc29sZS5sb2coJ2dvdCB0aGlzIGlkJywgcmVjb3JkX2lkKTtcblx0XHQvKnZtLnNhbGVzZGF5c0xpc3QuJHNhdmUocmVjb3JkX2lkKS50aGVuKGZ1bmN0aW9uIHN1Y2NlcyhzKSB7XG5cdFx0XHRjb25zb2xlLmxvZygndXBkYXRlZCByZWNvcmQgc3VjY2Vzc2Z1bGx5Jyk7XG5cdFx0fSkuY2F0Y2goZnVuY3Rpb24gZXJyb3IoZSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ2Vycm9yIHVwZGF0aW5nIHJlY29yZCcsIGUpO1xuXHRcdH0pOyovXG5cdH07XG5cblx0Ly8gQUREIE5FVyBTQUxFUyBEQVlcblx0dm0uYWRkU2FsZXNEYXkgPSBmdW5jdGlvbigpIHtcblxuXHRcdHZtLnNhbGVzZGF5c0xpc3QuJGFkZCh7XG5cdFx0XHRkYXRlOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG5cdFx0XHRzY2hlZHVsZToge1xuXHRcdFx0XHRsb2FkX2luOiB7XG5cdFx0XHRcdFx0ZGF0ZXRpbWU6IFwiXCIsXG5cdFx0XHRcdFx0c2FsZXNfZGF5X2lkOiBcIlwiXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGxvYWRfb3V0OiB7XG5cdFx0XHRcdFx0ZGF0ZXRpbWU6IFwiXCIsXG5cdFx0XHRcdFx0c2FsZXNfZGF5X2lkOiBcIlwiXG5cdFx0XHRcdH0sXG5cdFx0XHRcdG9wZW46IFwiXCIsXG5cdFx0XHRcdGNsb3NlOiBcIlwiLFxuXHRcdFx0XHRzYWxlc19zdGFydDogXCJcIixcblx0XHRcdFx0c2FsZXNfZW5kOiBcIlwiXG5cdFx0XHR9LFxuXHRcdFx0Y3VzdG9tZXI6IFwiXCIsXG5cdFx0XHRzZWFzb246IHtcblx0XHRcdFx0bmFtZTogXCJcIixcblx0XHRcdFx0ZnJlcXVlbmN5OiBcIlwiLFxuXHRcdFx0XHRpbnN0YW5jZTogMCxcblx0XHRcdFx0dG90YWw6IDBcblx0XHRcdH1cblx0XHR9KS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3Mocykge1xuXHRcdFx0Ly9zZXQgdGhlIGZpcmViYXNlIG9iamVjdFxuXHRcdFx0Y29uc29sZS5sb2cocy5rZXkpO1xuXHRcdFx0dm0uc2VsZWN0ZWRSZWNvcmQgPSAkZmlyZWJhc2VPYmplY3QoZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoKS5jaGlsZCgnc2FsZXNfZGF5cycpLmNoaWxkKHMua2V5KSk7XG5cdFx0XHRjb25zb2xlLmxvZyh2bS5zZWxlY3RlZFJlY29yZCk7XG5cdFx0fSkuY2F0Y2goZnVuY3Rpb24gZXJyb3IoZSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ2Vycm9yJywgZSk7XG5cdFx0fSk7XG5cblx0XHQvKnZtLnNhbGVzZGF5c0xpc3Quc2F2ZSgpLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnc3VjY2VzcycsIHMpO1xuXHRcdH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdlcnJvcicsIGUpO1xuXHRcdH0pOyovXG5cblx0fTtcblxuXHQvLyBHRU5FUkFURSBTQUxFUyBEQVlTXG5cdHZtLmdlbmVyYXRlU2FsZXNEYXlzID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cblx0XHQvL25vdGlmeSBvZiBsb2NhdGlvblxuXHRcdC8vY29uc29sZS5sb2coJ2dlbmVyYXRpbmcgU2FsZXMgZGF5cycsIHZtLnNjaGVkdWxpbmdfcGFyYW1zKTtcblxuXHRcdGJ1aWxkX3NhbGVzX2RheXNfYXJyYXkodm0uc2NoZWR1bGluZ19wYXJhbXMpLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnc3VjY2Vzc2Z1bGx5IGJ1aWx0Jywgcyk7XG5cdFx0XHR2bS50ZW1wSXRlcmF0aW9ucyA9IHM7XG5cdFx0XHQkc2NvcGUuJGFwcGx5KCk7XG5cdFx0fSkuY2F0Y2goZnVuY3Rpb24gZXJyb3IoZSkge1xuXHRcdFx0Y29uc29sZS5sb2coZSk7XG5cdFx0fSk7XG5cblx0fTtcblxuXHQvL1x0Rk9STUFUIFRJTUVcblx0dm0uZm9yYW10VGltZSA9IGZ1bmN0aW9uKHNlY3Rpb24pIHtcblx0XHRcblx0XHQvL25vdGlmeSBvZiBwcm9ncmVzc1xuXHRcdGNvbnNvbGUubG9nKCdmb3JtYXR0aW5nIHRpbWUnLCBzZWN0aW9uKTtcblxuXHRcdC8vc3BsaXQgdGltZVxuXHRcdHZhciB0b2RheSA9IG5ldyBEYXRlKCk7XG5cdFx0dmFyIHllYXIgPSB0b2RheS5nZXRGdWxsWWVhcigpO1xuXHRcdHZhciBtb250aCA9IHRvZGF5LmdldE1vbnRoKCk7XG5cdFx0dmFyIGRheSA9IHRvZGF5LmdldERhdGUoKTtcblx0XHRcblxuXHRcdHZhciB0aW1lU3BsaXQgPSB2bS50ZW1wVGltZXNbc2VjdGlvbl0uc3BsaXQoXCI6XCIpO1xuXHRcdHZhciBtaW5TcGxpdCA9IHRpbWVTcGxpdFsxXS5zcGxpdChcIiBcIik7XG5cdFx0dmFyIGhvdXIgPSBwYXJzZUludCh0aW1lU3BsaXRbMF0pO1xuXHRcdHZhciBtaW51dGUgPSBtaW5TcGxpdFswXTtcblx0XHR2YXIgdGltZURheSA9IG1pblNwbGl0WzFdO1xuXG5cdFx0Ly9mb3JtYXQgYWNjb3JkaW5nbHlcblx0XHRpZih0aW1lRGF5ID09IFwiUE1cIikgeyBob3VyICs9IDEyOyBob3VyLnRvU3RyaW5nKCk7IH1cblx0XHRpZihtb250aCA8IDEwKSBtb250aCA9IFwiMFwiICsgbW9udGg7XG5cdFx0aWYoZGF5IDwgMTApIGRheSA9IFwiMFwiICsgZGF5O1xuXHRcdGlmKGhvdXIgPCAxMCkgaG91ciA9IFwiMFwiICsgaG91cjtcblx0XHQvL2lmKG1pbnV0ZSA8IDEwKSBtaW4gPSBcIjBcIiArIG1pbnV0ZTtcblx0XHRcblxuXHRcdC8vY29uc29sZS5sb2codG9kYXksICdob3VyJywgaG91ciwgJ21pbnV0ZScsIG1pbnV0ZSwgJ3RpbWVEYXknLCB0aW1lRGF5KTtcblxuXHRcdC8vdm0uc2NoZWR1bGluZ19wYXJhbXMuc2NoZWR1bGVbc2VjdGlvbl0gPSBcIjIwMTgtMDUtMDVUMDY6MDA6MDAtMDc6MDBcIlxuXHRcdHZtLnNjaGVkdWxpbmdfcGFyYW1zLnNjaGVkdWxlW3NlY3Rpb25dID0geWVhciArIFwiLVwiICsgbW9udGggKyBcIi1cIiArICBkYXkgKyBcIlRcIiArICBob3VyICsgXCI6XCIgKyBtaW51dGUgKyBcIjowMC0wNzowMFwiXG5cdH07XG5cblx0Ly8gXHRTQVZFIFNBTEVTIERBWVNcblx0dm0uc2F2ZVNhbGVzRGF5cyA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBpbmRleCA9IDA7XG5cblx0XHQvL2l0ZXJhdGUgdGhyb3VnaCBhbGwgdGhlIHNhbGVzIGRheXMsIHNhdmluZyB0byB0aGUgREJcblx0XHR2bS50ZW1wSXRlcmF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChjbWVfaXRlcmF0aW9uKSB7XG5cblx0XHRcdHZtLnNhbGVzZGF5c0xpc3QuJGFkZChjbWVfaXRlcmF0aW9uKS50aGVuKGZ1bmN0aW9uIChyZWYpIHtcblx0XHRcdFx0Ly9nZXQgdGhlIG5ldyBrZXlcblx0XHRcdFx0dmFyIGlkID0gcmVmLmtleTtcblxuXHRcdFx0XHQvL3NhdmUgaXQgdG8gdGhlIGRiIG9iamVjdFxuXHRcdFx0XHRjb25zb2xlLmxvZyhpZCk7XG5cblx0XHRcdH0pO1xuXG5cdFx0fSk7XG5cblx0XHQvL29uY2UgdGhleSBoYXZlIGFsbCBiZW4gc2F2ZWQgXG5cblx0XHQvL3ZtLnNhbGVzZGF5c0xpc3QuJGFkZCh7bmFtZTogJ3Rlc3QnfSk7XHRcblx0fTtcblxuXHQvL3J1biB0aGUgdGVzdFxuXG5cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnY25lJylcbiAgICAuY29udHJvbGxlcignc3F1YXJlVHhzQ29udHJvbGxlcicsIHNxdWFyZVR4c0NvbnRyb2xsZXIpO1xuXG5zcXVhcmVUeHNDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsJyRsb2cnLCAnJHJvdXRlUGFyYW1zJywgJyRmaXJlYmFzZScsICckZmlyZWJhc2VPYmplY3QnLCAnJGZpcmViYXNlQXJyYXknLCAnZGF0YVNlcnZpY2UnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBzcXVhcmVUeHNDb250cm9sbGVyKCRzY29wZSwgJGxvZywgJHJvdXRlUGFyYW1zLCAkZmlyZWJhc2UsICRmaXJlYmFzZU9iamVjdCwgJGZpcmViYXNlQXJyYXksIGRhdGFTZXJ2aWNlKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXHR2YXIgeWVzdGVyZGF5ID0gbW9tZW50KG5ldyBEYXRlKCkpLnN1YnRyYWN0KDEsIFwiZGF5XCIpO1xuXHR2YXIgc3FyTG9jYXRpb25zID0gZGF0YVNlcnZpY2Uuc3FyX2xvY2F0aW9ucy5saXN0KCk7Ly8kZmlyZWJhc2VBcnJheShmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZigpLmNoaWxkKCdyZWZlcmVuY2VfbGlzdHMvc3FyX2xvY2F0aW9ucycpKTtcblx0dmFyIHNxckVtcGxveWVlcyA9IGRhdGFTZXJ2aWNlLnNxcl9lbXBsb3llZXMubGlzdCgpO1xuXHR2YXIgYWxsU2FsZXNkYXlzID0gJGZpcmViYXNlT2JqZWN0KGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCkuY2hpbGQoJ3NhbGVzX2RheXMnKSk7XG5cdHZtLnNhbGVzRGF5cyA9IFwiXCI7XG5cdHZtLmZpbHRlcmVkU2FsZXNEYXlzID0gW107XG5cblx0Ly9kZWZpbmUgdmlld21vZGVsIHZhcmlhYmxlc1xuXHQvL3ZtLmhpZ2hsaWdodGVkRGF0ZSA9IHllc3RlcmRheS5mb3JtYXQoXCJNTS1ERC1ZWVlZXCIpO1xuXHR2bS5zZWxlY3RlZExvY2F0aW9uID0ge1xuXHRcdG5hbWU6XCJPcmVnb25cIixcblx0XHRpZDogXCJcIlxuXHR9O1xuXHR2bS5zZWxlY3RlZERhdGUgPSBuZXcgRGF0ZSh5ZXN0ZXJkYXkuZm9ybWF0KFwiTU0tREQtWVlZWVwiKSk7XG5cdHZtLmRheUhycyA9IFsxLCAyLCAzLCA0LCA1LDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTJdO1xuXHR2bS5kYXlzdHJhbnNhY3Rpb25zID0gW107XG5cblx0Ly9ub3RpZnkgcHJvZ3Jlc3Ncblx0JGxvZy5pbmZvKCdpbiBhIHNxdWFyZSBUeHMgY29udHJvbGxlcicsIHllc3RlcmRheS5mb3JtYXQoKSk7XHQvL1RPRE86IFRBS0UgVEhJUyBPVVQgTEFURVJcblxuXHQvL2RlZmluZSBsb2NhbCBmdW5jdGlvbnNcblx0ZnVuY3Rpb24gc3luY0xpc3RzKCkge1xuXHRcdHVwZGF0ZVR4TGlzdCgpO1xuXHRcdHVwZGF0ZVNhbGVkYXlzTGlzdCgpO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIHVwZGF0ZVNhbGVkYXlzTGlzdCgpIHtcblx0XHR2YXIgeWVhciA9IHZtLnNlbGVjdGVkRGF0ZS5nZXRGdWxsWWVhcigpO1xuXHRcdHZhciBtb250aCA9IHZtLnNlbGVjdGVkRGF0ZS5nZXRNb250aCgpICsgMTtcblx0XHR2YXIgZGF5ID0gdm0uc2VsZWN0ZWREYXRlLmdldERhdGUoKTtcblxuXHRcdGlmKG1vbnRoIDwgMTApIG1vbnRoID0gXCIwXCIgKyBtb250aDtcblx0XHRpZihkYXkgPCAxMCkgZGF5ID0gXCIwXCIgKyBkYXk7XG5cblx0XHR2YXIgZGF0ZSA9IHllYXIgKyBcIi1cIiArIG1vbnRoICsgXCItXCIgKyBkYXk7XG5cdFx0dmFyIGRiUGF0aCA9ICcvY2FsZW5kZXIvJyArIHllYXIgKyBcIi9cIiArIGRhdGUgKyBcIi9zYWxlc19kYXlzXCI7XG5cdFx0dm0uc2FsZXNEYXlzID0gJGZpcmViYXNlT2JqZWN0KGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCkuY2hpbGQoZGJQYXRoKSk7XG5cdFx0XG5cdFx0Ly9jb25zb2xlLmxvZyhkYlBhdGgpO1xuXHR9O1xuXHRcblx0ZnVuY3Rpb24gdXBkYXRlVHhMaXN0KCkge1xuXHRcdHZhciBlbmRPZkRheSA9IG1vbWVudCh2bS5zZWxlY3RlZERhdGUpLmhvdXJzKDIzKS5taW51dGVzKDU5KS5zZWNvbmRzKDU5KS5mb3JtYXQoKTtcblx0XHR2YXIgc3RhcnRPZkRheSA9IG1vbWVudCh2bS5zZWxlY3RlZERhdGUpLmZvcm1hdCgpO1xuXHRcdGRhdGFTZXJ2aWNlLnNxcl90eHMuZnVsbF9kYXkoXG5cdFx0XHR2bS5zZWxlY3RlZExvY2F0aW9uLmlkLCBcblx0XHRcdHN0YXJ0T2ZEYXksXG5cdFx0XHRlbmRPZkRheVxuXHRcdCkudGhlbihmdW5jdGlvbiBzdWNjZXNzKHMpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdnb3QgYSByZXNwb25zZSB3aXRoJywgcy5sZW5ndGgsIFwicmVjb3Jkc1wiKTtcblx0XHRcdHZtLmRheXN0cmFuc2FjdGlvbnMgPSBzO1xuXHRcdFx0JHNjb3BlLiRhcHBseSgpO1xuXHRcdH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdFUlJPUicsIGUpO1xuXHRcdH0pO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIGRlZmluZUxvY2F0aW9uKCkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmFpYWJsZXNcblx0XHRcblx0XHRQcm9taXNlLmFsbChbc3FyTG9jYXRpb25zLCBzcXJFbXBsb3llZXNdKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3Mocykge1xuXG5cdFx0XHR2bS5zcXJMb2NhdGlvbnMgPSBzWzBdO1xuXHRcdFx0dm0uc3FyRW1wbG95ZWVzID0gc1sxXTtcblxuXHRcdFx0Y29uc29sZS5sb2codm0uc3FyTG9jYXRpb25zKTtcblx0XHRcdGNvbnNvbGUubG9nKHZtLnNxckVtcGxveWVlcyk7XG5cblx0XHRcdC8vaXRlcmF0ZSB0aHJvdWdoIGFsbCBsb2NhdGlvbnNcblx0XHRcdHZtLnNxckxvY2F0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKGxvY2F0aW9uKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihsb2NhdGlvbi5uYW1lID09IHZtLnNlbGVjdGVkTG9jYXRpb24ubmFtZSkge1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHZtLnNlbGVjdGVkTG9jYXRpb24uaWQgPSBsb2NhdGlvbi5pZDtcblx0XHRcdFx0fTtcblxuXHRcdFx0fSk7XG5cblx0XHRcdC8vdGhlbiBydW4gdGhlIGRhdGEgc2VydmljZVxuXHRcdFx0c3luY0xpc3RzKCk7XG5cblx0XHR9KS5jYXRjaChmdW5jdGlvbiBlcnJvcihlKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnZXJyb3InLCBlKTtcblx0XHR9KTtcblxuXHR9O1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgZnVuY3Rpb25zXG5cdHZtLmRheUNoYW5nZSA9IGZ1bmN0aW9uKGRpcmVjdGlvbikge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBkaXJIYXNoID0ge1wiLVwiOjAsIFwiK1wiOjF9O1xuXHRcdHZhciBjdXJyZW50RGF0ZSA9IG1vbWVudChuZXcgRGF0ZSh2bS5zZWxlY3RlZERhdGUpKTtcblxuXHRcdHN3aXRjaChkaXJIYXNoW2RpcmVjdGlvbl0pIHtcblx0XHRcdGNhc2UgMDpcblx0XHRcdFx0Y3VycmVudERhdGUuc3VidHJhY3QoMSxcImRheVwiKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDE6XG5cdFx0XHRcdGN1cnJlbnREYXRlLmFkZCgxLFwiZGF5XCIpXG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0YnJlYWs7XG5cdFx0fTtcblxuXHRcdHZtLnNlbGVjdGVkRGF0ZSA9IG5ldyBEYXRlKGN1cnJlbnREYXRlLmZvcm1hdChcIk1NLURELVlZWVlcIikpO1xuXG5cdFx0c3luY0xpc3RzKCk7XG5cdH1cblxuXHQvL1xuXHR2bS5lbXBsb3llZU5hbWUgPSBmdW5jdGlvbihlbXBsb3llZV9pZCkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBlbXBsb3llZV9uYW1lID0gXCJcIjtcblxuXHRcdE9iamVjdC5rZXlzKHZtLnNxckVtcGxveWVlcykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdHZhciBuZXdOYW1lID0gdm0uc3FyRW1wbG95ZWVzW2tleV0uZmlyc3RfbmFtZSArIFwiIFwiICsgdm0uc3FyRW1wbG95ZWVzW2tleV0ubGFzdF9uYW1lO1xuXG5cdFx0XHRpZih2bS5zcXJFbXBsb3llZXNba2V5XS5pZCA9PSBlbXBsb3llZV9pZCkgZW1wbG95ZWVfbmFtZSA9IG5ld05hbWU7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gZW1wbG95ZWVfbmFtZTtcblx0fTtcblxuXHQvL3J1biB0aGUgdGVzdFxuXHRcblx0ZGVmaW5lTG9jYXRpb24oKTtcbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnY25lJylcbiAgICAuY29udHJvbGxlcigndHhzQmxvY2tDb250cm9sbGVyJywgdHhzQmxvY2tDb250cm9sbGVyKTtcblxudHhzQmxvY2tDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsJyRsb2cnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiB0eHNCbG9ja0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXHR2YXIgeWVzdGVyZGF5ID0gbW9tZW50KG5ldyBEYXRlKCkpLnN1YnRyYWN0KDEsIFwiZGF5XCIpO1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVzXG5cdHZtLnNlbGVjdGVkRGF0ZSA9IG5ldyBEYXRlKHllc3RlcmRheS5mb3JtYXQoXCJNTS1ERC1ZWVlZXCIpKTtcblx0dm0udHhCbG9ja3MgPSBbJ3Rlc3QnLCAndGVzdCcsICd0ZXN0J107XG5cblx0Ly9ub3RpZnkgcHJvZ3Jlc3Ncblx0Y29uc29sZS5sb2coJ3R4c0Jsb2NrQ29udHJvbGxlcicpO1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgZnVuY3Rpb25cblxufSIsIi8qXG4qXHRDVVNUT01FUiBMSVNUXG4qXG4qXHRUaGlzIG1vZHVsZSBpcyBkZXNpZ25lZCB0byBcbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnY25lJylcblx0LmRpcmVjdGl2ZSgnY3VzdG9tZXJMaXN0JywgY3VzdG9tZXJMaXN0KTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjdXN0b21lckxpc3QoKSB7XG5cdC8vZGVmaW5lIHRoZSBkaXJlY3RpdmVcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogXCJBRUNNXCIsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2N1c3RvbWVyLWxpc3QuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogY3VzdG9tZXJMaXN0Q29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge31cblxuXHRjdXN0b21lckxpc3RDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG5cdFxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gY3VzdG9tZXJMaXN0Q29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHRjb25zb2xlLmxvZygnaW4gY29zdG9tZXIgTGlzdCBjb250cm9sbGVyJyk7XG5cdH1cblxuXHQvL3Bhc3MgaXQgYmFja1xuXHRyZXR1cm4gZGlyZWN0aXZlO1xufSIsIi8qXG4qXHRTQUxFUyBEQVkgVFJBTlNBQ1RJT05TXG4qXG4qXHRUaGlzIG1vZHVsZSBpcyBkZXNpZ25lZCB0byBcbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnY25lJylcblx0LmRpcmVjdGl2ZSgnY3VzdG9tZXJTYWxlc0RheXMnLCBjdXN0b21lclNhbGVzRGF5cyk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY3VzdG9tZXJTYWxlc0RheXMoKSB7XG5cdC8vZGVmaW5lIHRoZSBkaXJlY3RpdmVcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogXCJBRUNNXCIsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2N1c3RvbWVyLXNhbGVzLWRheXMuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0c2FsZXNkYXlzTGlzdDogXCI9XCIsXG5cdFx0XHRzYWxlc2RheVNlbGVjdGVkOiAnPSdcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGN1c3RvbWVyU2FsZXNEYXlzQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuXG5cdFx0Ly91cGRhdGUgdGhlIHNhbGVzZGF5c0xpc3Qgd2hlbiBhIG5ldyBjdXN0b21lciBpcyBzZWxlY3RlZFxuXHRcdHNjb3BlLiR3YXRjaCgndm0uc2FsZXNkYXlzTGlzdCcsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuXHRcdFx0XG5cdFx0XHQvL3dhdGNoIGZvciBhIG5ldyB2YWx1ZVxuXHRcdFx0aWYobmV3VmFsdWUpIHtcblx0XHRcdFx0XG5cdFx0XHRcdC8vaWYgdGhlIHZhbHVlIGNoYW5nZXMgZG93bmxvYWQgdGhlIHJlcXVpcmVkIHZhbHVlc1xuXHRcdFx0XHRzY29wZS5sb2FkU2FsZURheXMoKTtcblxuXHRcdFx0fVxuXG5cdFx0fSwgdHJ1ZSk7XG5cblx0fTtcblxuXHRjdXN0b21lclNhbGVzRGF5c0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnZmlyZWJhc2VTZXJ2aWNlJ107XG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBjdXN0b21lclNhbGVzRGF5c0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCBmaXJlYmFzZVNlcnZpY2UpIHtcblx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgdm0gPSB0aGlzO1xuXHRcdHZtLmRldGFpbGVkU2FsZXNEYXlzTGlzdCA9IFtdO1xuXG5cdFx0Y29uc29sZS5sb2coJ2luIHRoZSBjdXN0b21lclNhbGVzRGF5c0NvbnRyb2xsZXInKTtcblxuXHRcdGZ1bmN0aW9uIGxvYWRBVHgoaWQpIHtcblx0XHRcdHZhciBwYXRoID0gJ3NhbGVzX2RheXMvJyArIGlkO1xuXG5cdFx0XHQvL3JldHVybiBhc3luYyB3b3JrXG5cdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cblx0XHRcdFx0Ly9jb2xsZWN0ZWQgZGF0YVxuXHRcdFx0XHRmaXJlYmFzZVNlcnZpY2UuZ2V0LmFfcmVjb3JkKHBhdGgpLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZShzKTtcblx0XHRcdFx0fSkuY2F0Y2goZnVuY3Rpb24gZXJyb3IoZSkge1xuXHRcdFx0XHRcdHJlamVjdChlKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdH0pO1xuXG5cdFx0fVxuXG5cdFx0Ly9kZWZpbmUgc2NvcGUgdmFyaWFibGVzXG5cdFx0Ly9cdExPQUQgU0FMRURBWVNcblx0XHQkc2NvcGUubG9hZFNhbGVEYXlzID0gZnVuY3Rpb24oKSB7XG5cdFx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHRcdHZhciBhbGxQcm9taXNlcyA9IFtdO1xuXG5cdFx0XHQvL2l0ZXJhdGUgdGhyb3VnaCBhbGwgdmFsdWVzXG5cdFx0XHRPYmplY3Qua2V5cyh2bS5zYWxlc2RheXNMaXN0KS5mb3JFYWNoKGZ1bmN0aW9uKGtleSl7XG5cblx0XHRcdFx0YWxsUHJvbWlzZXMucHVzaChsb2FkQVR4KHZtLnNhbGVzZGF5c0xpc3Rba2V5XSkpO1xuXG5cdFx0XHR9KTtcblxuXHRcdFx0Ly9ydW4gYWxsIHByb21pc2VzXG5cdFx0XHRQcm9taXNlLmFsbChhbGxQcm9taXNlcykudGhlbihmdW5jdGlvbiBzdWNjZXNzKHMpIHtcblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnYWxsIHByb21pc2VzIHJldHVybmVkJywgcyk7XG5cdFx0XHRcdHZtLmRldGFpbGVkU2FsZXNEYXlzTGlzdCA9IHNcblx0XHRcdH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ2Vycm9yJyxlKTtcblx0XHRcdH0pO1xuXG5cblx0XHR9O1xuXG5cdFx0Ly9cdFNBTEVTIERBWSBTRUxFQ1RFRFxuXHRcdCRzY29wZS5zYWxlc0RheVNlbGVjdGVkID0gZnVuY3Rpb24oaW5kZXgpIHsgXG5cdFx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHRcdHZtLnNhbGVzZGF5U2VsZWN0ZWQgPSB2bS5kZXRhaWxlZFNhbGVzRGF5c0xpc3RbaW5kZXhdLiRpZDtcblx0XHRcdC8vY29uc29sZS5sb2codm0uc2FsZXNkYXlzTGlzdFtpbmRleF0pO1xuXHRcdH07XG5cblx0XHQvL1xuXHRcdHZtLmFkZFNhbGVzRGF5c1RvQ2FsID0gZnVuY3Rpb24oKSB7IFxuXHRcdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0XHRcblx0XHRcdGNvbnNvbGUubG9nKCdhZGRTYWxlc0RheXNUb0NhbCcpO1xuXG5cdFx0fTtcblxuXHR9XG5cblx0Ly9wYXNzIGl0IGJhY2tcblx0cmV0dXJuIGRpcmVjdGl2ZTtcbn0iLCIvKlxuKlx0Q1VTVE9NRVIgTElTVFxuKlxuKlx0VGhpcyBtb2R1bGUgaXMgZGVzaWduZWQgdG8gXG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2NuZScpXG5cdC5kaXJlY3RpdmUoJ2RhdGVTZWxlY3RvcicsIGRhdGVTZWxlY3Rvcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gZGF0ZVNlbGVjdG9yKCkge1xuXHQvL2RlZmluZSB0aGUgZGlyZWN0aXZlXG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6IFwiQUVDTVwiLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9kYXRlLXNlbGVjdG9yLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdHNlbGVjdGVkRGF0ZTogXCI9XCJcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGRhdGVTZWxlY3RvckNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHt9XG5cblx0ZGF0ZVNlbGVjdG9yQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuXHRcblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGRhdGVTZWxlY3RvckNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0Y29uc29sZS5sb2coJ2luIGRhdGUgc2VsZWN0b3IgY29udHJvbGxlcicpO1xuXG5cdFx0Lypcblx0XHQqXHREQVkgQ0hBTkdFIFxuXHRcdCpcblx0XHQqXHRUaGlzIGZ1bmN0aW9uIGluY3JpbWVudHMgdGhlIGRheSBlaXRoZXIgZm9yd2FyZCBvciBiYWNrd2FyZFxuXHRcdCovXG5cdFx0c2VsZi5kYXlDaGFuZ2UgPSBmdW5jdGlvbihkaXJlY3Rpb24pIHtcblx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdFx0dmFyIGRpckhhc2ggPSB7XCItXCI6MCwgXCIrXCI6MX07XG5cdFx0XHR2YXIgY3VycmVudERhdGUgPSBtb21lbnQobmV3IERhdGUoc2VsZi5zZWxlY3RlZERhdGUpKTtcblxuXHRcdFx0c3dpdGNoKGRpckhhc2hbZGlyZWN0aW9uXSkge1xuXHRcdFx0XHRjYXNlIDA6XG5cdFx0XHRcdFx0Y3VycmVudERhdGUuc3VidHJhY3QoMSxcImRheVwiKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRcdGN1cnJlbnREYXRlLmFkZCgxLFwiZGF5XCIpXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9O1xuXG5cdFx0XHRzZWxmLnNlbGVjdGVkRGF0ZSA9IG5ldyBEYXRlKGN1cnJlbnREYXRlLmZvcm1hdChcIk1NLURELVlZWVlcIikpO1xuXG5cdFx0XHQvL3N5bmNMaXN0cygpO1xuXHRcdH1cblx0fVxuXG5cdC8vcGFzcyBpdCBiYWNrXG5cdHJldHVybiBkaXJlY3RpdmU7XG59IiwiLypcbipcdEZMQVZPUiBNSVhFUlxuKlxuKlx0VGhpcyBtb2R1bGUgaXMgZGVzaWduZWQgdG8gYWxsb3cgY3VzdG9tZXJzIHRvIG1peCBhbmQgbWF0Y2hcbipcdG91ciBkZWxpY2lvdXMgZmxhdm9ycyBhbmQgdG8gcGljayB0aGllciBzaXppbmcuXG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2NuZScpXG5cdC5kaXJlY3RpdmUoJ2xvZ2luUGFzc3dvcmQnLCBsb2dpblBhc3N3b3JkKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsb2dpblBhc3N3b3JkKCkge1xuXHQvL2RlZmluZSB0aGUgZGlyZWN0aXZlXG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6IFwiQUVDTVwiLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9sb2dpbi1wYXNzd29yZC5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRwYXNzd29yZDogXCI9XCIsXG5cdFx0XHRhY3RpdmU6IFwiPVwiXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBsb2dpblBhc3N3b3JkQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge31cblxuXHRsb2dpblBhc3N3b3JkQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbG9naW5QYXNzd29yZENvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHR9XG5cblx0Ly9wYXNzIGl0IGJhY2tcblx0cmV0dXJuIGRpcmVjdGl2ZTtcbn0iLCIvKlxuKlx0RkxBVk9SIE1JWEVSXG4qXG4qXHRUaGlzIG1vZHVsZSBpcyBkZXNpZ25lZCB0byBhbGxvdyBjdXN0b21lcnMgdG8gbWl4IGFuZCBtYXRjaFxuKlx0b3VyIGRlbGljaW91cyBmbGF2b3JzIGFuZCB0byBwaWNrIHRoaWVyIHNpemluZy5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnY25lJylcblx0LmRpcmVjdGl2ZSgnbG9naW5Vc2VybmFtZScsIGxvZ2luVXNlcm5hbWUpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGxvZ2luVXNlcm5hbWUoKSB7XG5cdC8vZGVmaW5lIHRoZSBkaXJlY3RpdmVcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogXCJBRUNNXCIsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2xvZ2luLXVzZXJuYW1lLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdHVzZXJuYW1lOiBcIj1cIixcblx0XHRcdGFjdGl2ZTogXCI9XCJcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGxvZ2luVXNlcm5hbWVDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7fVxuXG5cdGxvZ2luVXNlcm5hbWVDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsb2dpblVzZXJuYW1lQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdH1cblxuXHQvL3Bhc3MgaXQgYmFja1xuXHRyZXR1cm4gZGlyZWN0aXZlO1xufSIsIi8qXG4qXHRTQUxFUyBEQVkgVFJBTlNBQ1RJT05TXG4qXG4qXHRUaGlzIG1vZHVsZSBpcyBkZXNpZ25lZCB0byBcbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnY25lJylcblx0LmRpcmVjdGl2ZSgnc2FsZXNEYXlUeHMnLCBzYWxlc0RheVR4cyk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc2FsZXNEYXlUeHMoKSB7XG5cdC8vZGVmaW5lIHRoZSBkaXJlY3RpdmVcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogXCJBRUNNXCIsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3NhbGVzLWRheS10cmFuc2FjdGlvbnMuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0dHhzTGlzdDogXCI9XCIsXG5cdFx0XHRzYWxlc2RheVNlbGVjdGVkOiAnPSdcblxuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogc2FsZXNEYXlUeHNDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG5cblx0XHQvL3VwZGF0ZSB0aGUgc2FsZXNkYXlzTGlzdCB3aGVuIGEgbmV3IGN1c3RvbWVyIGlzIHNlbGVjdGVkXG5cdFx0c2NvcGUuJHdhdGNoKCd2bS5zYWxlc2RheVNlbGVjdGVkJywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG5cdFx0XHRcblx0XHRcdC8vd2F0Y2ggZm9yIGEgbmV3IHZhbHVlXG5cdFx0XHRpZihuZXdWYWx1ZSkge1xuXHRcdFx0XHRcblx0XHRcdFx0Ly9pZiB0aGUgdmFsdWUgY2hhbmdlcyBkb3dubG9hZCB0aGUgcmVxdWlyZWQgdmFsdWVzXG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ3NhbGVzRGF5IFNlbGVjdGVkJyk7XG5cdFx0XHRcdHNjb3BlLmxvYWRTRFR4cygpO1xuXG5cdFx0XHR9XG5cblx0XHR9LCB0cnVlKTtcblxuXHR9XG5cblx0c2FsZXNEYXlUeHNDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJ2ZpcmViYXNlU2VydmljZSddO1xuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gc2FsZXNEYXlUeHNDb250cm9sbGVyKCRzY29wZSwgJGxvZywgZmlyZWJhc2VTZXJ2aWNlKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIHZtID0gdGhpcztcblx0XHR2bS5wcm9taXNlTGlzdCA9IFtdO1xuXHRcdHZtLmRldGFpbGVkVHhMaXN0ID0gW107XG5cblx0XHRjb25zb2xlLmxvZygnaW4gdGhlIHNhbGVzRGF5VHhzQ29udHJvbGxlcicpO1xuXG5cdFx0ZnVuY3Rpb24gbG9hZEFSY3JkKHBhdGgsIGlkKSB7XG5cdFx0XHR2YXIgcGF0aCA9IHBhdGggKyBpZDtcblxuXHRcdFx0Ly9jb25zb2xlLmxvZygnbG9hZEFSY3JkJywgcGF0aClcblxuXHRcdFx0Ly9yZXR1cm4gYXN5bmMgd29ya1xuXHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG5cdFx0XHRcdC8vY29sbGVjdGVkIGRhdGFcblx0XHRcdFx0ZmlyZWJhc2VTZXJ2aWNlLmdldC5hX3JlY29yZChwYXRoKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3Mocykge1xuXHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ2dvdCB0aGlzIHJlY29yZCcsIHMpO1xuXHRcdFx0XHRcdHJlc29sdmUocyk7XG5cdFx0XHRcdH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcblx0XHRcdFx0XHRyZWplY3QoZSk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHR9KTtcblxuXHRcdH1cblxuXHRcdC8vXHRERUZJTkUgU0FMRVMgREFZUyBUUkFOU0FDVElPTlNcblx0XHQkc2NvcGUubG9hZFNEVHhzID0gZnVuY3Rpb24oKSB7XG5cdFx0XHQvL2NvbnNvbGUubG9nKCdsb2FkaW5nIHNkIHR4cycsIHZtLnNhbGVzZGF5U2VsZWN0ZWQpO1xuXG5cdFx0XHQvL1xuXHRcdFx0bG9hZEFSY3JkKFwic2FsZXNfZGF5cy9cIiwgdm0uc2FsZXNkYXlTZWxlY3RlZCkudGhlbihmdW5jdGlvbiBzdWNjZXNzKGRldGFpbGVkRGF5KSB7XG5cdFx0XHRcdFxuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdkZXRhaWxlZERheScsIGRldGFpbGVkRGF5LiRyZXNvbHZlZCk7XG5cdFx0XHRcdC8vSXRlcmF0ZSBvdmVyIGFsbCBvZiB0aGUgdHJhbnNhY3Rpb25zXG5cdFx0XHRcdE9iamVjdC5rZXlzKGRldGFpbGVkRGF5LnRyYW5zYWN0aW9ucykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKGRldGFpbGVkRGF5LnRyYW5zYWN0aW9uc1trZXldKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZihkZXRhaWxlZERheS50cmFuc2FjdGlvbnNba2V5XSAhPSBcInBsYWNlaG9sZGVyXCIpIHtcblx0XHRcdFx0XHRcdHZtLnByb21pc2VMaXN0LnB1c2gobG9hZEFSY3JkKFwidHJhbnNhY3Rpb25zL1wiLCBkZXRhaWxlZERheS50cmFuc2FjdGlvbnNba2V5XSkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0UHJvbWlzZS5hbGwodm0ucHJvbWlzZUxpc3QpLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzKSB7XG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhzKTtcblx0XHRcdFx0XHR2bS5kZXRhaWxlZFR4TGlzdCA9IHM7XG5cdFx0XHRcdFx0JHNjb3BlLiRhcHBseSgpO1xuXHRcdFx0XHR9KS5jYXRjaChmdW5jdGlvbiBlcnJvcihlKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCJlcnJvclwiLCBlKTtcblx0XHRcdFx0fSk7XG5cblxuXHRcdFx0fSkuY2F0Y2goZnVuY3Rpb24gZXJyb3IoZSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZygnZXJyb3InLCBlKTtcblx0XHRcdH0pO1xuXHRcdH07XG5cdH1cblxuXHQvL3Bhc3MgaXQgYmFja1xuXHRyZXR1cm4gZGlyZWN0aXZlO1xufSIsIi8qXG4qXHRUUkFOU0FDVElPTlMgQkxPQ0sgVEFCTEUgRElSRUNUSVZFXG4qXG4qXHRUaGlzIG1vZHVsZSBpcyBkZXNpZ25lZCB0byBcbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnY25lJylcblx0LmRpcmVjdGl2ZSgndHhCbG9ja1NhbGVzRGF5c1RhYmxlJywgdHhCbG9ja1NhbGVzRGF5c1RhYmxlKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiB0eEJsb2NrU2FsZXNEYXlzVGFibGUoKSB7XG5cdC8vZGVmaW5lIHRoZSBkaXJlY3RpdmVcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogXCJBRUNNXCIsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3R4LWJsb2NrLXNhbGVzLWRheXMtdGFibGUuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogdHhCbG9ja1NhbGVzRGF5c1RhYmxlQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge31cblxuXHR0eEJsb2NrU2FsZXNEYXlzVGFibGVDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG5cdFxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gdHhCbG9ja1NhbGVzRGF5c1RhYmxlQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHRjb25zb2xlLmxvZygnaW4gdHgtYmxvY2sgc2FsZXMgZGF5cyB0YWJsZSBjb250cm9sbGVyJyk7XG5cdH1cblxuXHQvL3Bhc3MgaXQgYmFja1xuXHRyZXR1cm4gZGlyZWN0aXZlO1xufSIsIi8qXG4qXHRUUkFOU0FDVElPTlMgQkxPQ0sgVEFCTEUgRElSRUNUSVZFXG4qXG4qXHRUaGlzIG1vZHVsZSBpcyBkZXNpZ25lZCB0byBcbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnY25lJylcblx0LmRpcmVjdGl2ZSgndHhCbG9ja1RhYmxlJywgdHhCbG9ja1RhYmxlKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiB0eEJsb2NrVGFibGUoKSB7XG5cdC8vZGVmaW5lIHRoZSBkaXJlY3RpdmVcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogXCJBRUNNXCIsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3R4LWJsb2NrLXRhYmxlLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdHR4QmxvY2tzOiAnPSdcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHR4QmxvY2tUYWJsZUNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHt9XG5cblx0dHhCbG9ja1RhYmxlQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuXHRcblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIHR4QmxvY2tUYWJsZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0Y29uc29sZS5sb2coJ2luIHR4LWJsb2NrIHRhYmxlIGNvbnRyb2xsZXInKTtcblx0fVxuXG5cdC8vcGFzcyBpdCBiYWNrXG5cdHJldHVybiBkaXJlY3RpdmU7XG59IiwiLypcbipcdEJBQ0tFTkQgREFUQSBTRVJWSUNFXG4qXG4qL1xuXG4vL2RlZmluZSBtb2R1bGVcbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdjbmUnKVxuICAgIC5mYWN0b3J5KCdkYXRhU2VydmljZScsIGRhdGFTZXJ2aWNlKTtcblxuLy9kZXBlbmRlbmN5IGluamVjdGlvbnNcbmRhdGFTZXJ2aWNlLiRpbmplY3QgPSBbJyRodHRwJ107XG5cbi8vZGVjbGFyZSB0aGUgc2VydmljZVxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBkYXRhU2VydmljZSgkaHR0cCkge1xuXG5cdC8vZGVmaW5lIG1ldGhvZHNcblx0dmFyIGRhdGFTZXJ2aWNlID0ge1xuXHRcdHNxcl9sb2NhdGlvbnM6IHtcblx0XHRcdGxpc3Q6IHNxcl9sb2NhdGlvbnNfbGlzdFxuXHRcdH0sXG5cdFx0c3FyX2VtcGxveWVlczoge1xuXHRcdFx0bGlzdDogc3FyX2VtcGxveWVlc19saXN0XG5cdFx0fSxcblx0XHRzcXJfdHhzOiB7XG5cdFx0XHRmdWxsX2RheTogc3FyX3R4c19kYXlcblx0XHR9LFxuXHRcdHNhbGVzX2RheXM6IHtcblx0XHRcdGNvbXBpbGVfYmF0Y2g6IGNvbXBpbGVfbmV3X3NhbGVzX2RheV9iYXRjaFxuXHRcdH1cblx0fTtcblxuXHQvL1xuXHRmdW5jdGlvbiBzcXJfbG9jYXRpb25zX2xpc3QoKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIHBvc3RPYmplY3QgPSB7fTtcblxuXHRcdGNvbnNvbGUubG9nKCdnZXR0aW5nIGxvY2F0aW9ucyBsaXN0Jyk7XG5cblx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHQvL3RyeSBQT1NUXG5cdFx0XHQkaHR0cCh7XG5cdFx0XHRcdG1ldGhvZDogJ1BPU1QnLFxuXHRcdFx0XHR1cmw6ICcvc3F1YXJlcG9zL2xvY2F0aW9ucycsXG5cdFx0XHRcdGhlYWRlcnM6IHtcblx0XHRcdFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGRhdGE6IHBvc3RPYmplY3Rcblx0XHRcdH0pLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuXHRcdFx0XHRcblx0XHRcdH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2soZXJyb3IpIHtcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXG5cdH07XG5cblx0Ly9cblx0ZnVuY3Rpb24gc3FyX2VtcGxveWVlc19saXN0KHN0YXR1cywgZXh0ZXJuYWxfaWQsIGxpbWl0LCBvcmRlciwgYmVnaW5fdXBkYXRlZF9hdCwgZW5kX3VwZGF0ZWRfYXQsIGJlZ2luX2NyZWF0ZWRfYXQsIGVuZF9jcmVhdGVkX2F0KSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIHBvc3RPYmplY3QgPSB7XG5cdFx0XHRzdGF0dXM6IHN0YXR1cyxcblx0XHRcdGV4dGVybmFsX2lkOiBleHRlcm5hbF9pZCxcblx0XHRcdGxpbWl0OiBsaW1pdCxcblx0XHRcdG9yZGVyOiBvcmRlcixcblx0XHRcdGJlZ2luX3VwZGF0ZWRfYXQ6IGJlZ2luX3VwZGF0ZWRfYXQsXG5cdFx0XHRlbmRfdXBkYXRlZF9hdDogZW5kX3VwZGF0ZWRfYXQsXG5cdFx0XHRiZWdpbl9jcmVhdGVkX2F0OiBiZWdpbl9jcmVhdGVkX2F0LFxuXHRcdFx0ZW5kX2NyZWF0ZWRfYXQ6IGVuZF9jcmVhdGVkX2F0XG5cdFx0fTtcblxuXHRcdGNvbnNvbGUubG9nKCdnZXR0aW5nIGVtcGxveWVlcyBsaXN0Jyk7XG5cblx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHQvL3RyeSBQT1NUXG5cdFx0XHQkaHR0cCh7XG5cdFx0XHRcdG1ldGhvZDogJ1BPU1QnLFxuXHRcdFx0XHR1cmw6ICcvc3F1YXJlcG9zL2VtcGxveWVlcycsXG5cdFx0XHRcdGhlYWRlcnM6IHtcblx0XHRcdFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGRhdGE6IHBvc3RPYmplY3Rcblx0XHRcdH0pLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuXHRcdFx0XHRcblx0XHRcdH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2soZXJyb3IpIHtcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXG5cdH1cblxuXHQvL1x0VEVTVCBGVU5DVElPTlxuXHRmdW5jdGlvbiBjb21waWxlX25ld19zYWxlc19kYXlfYmF0Y2gocGFyYW1zKSB7XG5cdFx0XG5cdFx0Ly9jb25zb2xlLmxvZygndGVzdGluZyBkYXRhU2VydmljZScpO1xuXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0Ly90cnkgUE9TVFxuXHRcdFx0JGh0dHAoe1xuXHRcdFx0XHRtZXRob2Q6ICdQT1NUJyxcblx0XHRcdFx0dXJsOiAnL2FwaS9zYWxlc19kYXlzL2NvbXBpbGVfbmV3X3NhbGVzX2RheXNfYmF0Y2gnLFxuXHRcdFx0XHRoZWFkZXJzOiB7XG5cdFx0XHRcdFx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuXHRcdFx0XHR9LFx0XG5cdFx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdFx0fSkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcblx0XHRcdFx0XG5cdFx0XHRcdHJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG5cdFx0XHRcdFxuXHRcdFx0fSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhlcnJvcikge1xuXHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0fTtcblxuXHQvL1NRVUFSRSBUUkFOU0FDVElPTiBEQVlTXG5cdGZ1bmN0aW9uIHNxcl90eHNfZGF5KGxvY2F0aW9uLCBzdGFydERhdGUsIGVuZERhdGUpIHtcblx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgcG9zdE9iamVjdCA9IHtcblx0XHRcdGxvY2F0aW9uOiBsb2NhdGlvbixcblx0XHRcdHN0YXJ0OiBzdGFydERhdGUsXG5cdFx0XHRlbmQ6IGVuZERhdGVcblx0XHR9O1xuXG5cdFx0Y29uc29sZS5sb2coJ2dldHRpbmcgZGF5XFwncyBUcmFuc2FjdGlvbnMnKTtcblxuXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdC8vdHJ5IFBPU1Rcblx0XHRcdCRodHRwKHtcblx0XHRcdFx0bWV0aG9kOiAnUE9TVCcsXG5cdFx0XHRcdHVybDogJy9zcXVhcmVwb3MvdHhzJyxcblx0XHRcdFx0aGVhZGVyczoge1xuXHRcdFx0XHRcdCdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcblx0XHRcdFx0fSxcblx0XHRcdFx0ZGF0YTogcG9zdE9iamVjdFxuXHRcdFx0fSkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcblx0XHRcdFx0XG5cdFx0XHRcdHJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG5cdFx0XHRcdFxuXHRcdFx0fSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhlcnJvcikge1xuXHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0fVxuXG5cdC8vdHVybiB0aGUgbWV0aG9kXG4gICAgcmV0dXJuIGRhdGFTZXJ2aWNlO1x0XG59O1xuXG4iLCIvKlxuKlxuKlxuKi9cblxuLy9kZWZpbmUgbW9kdWxlXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnY25lJylcbiAgICAuZmFjdG9yeSgnZmlyZWJhc2VTZXJ2aWNlJywgZmlyZWJhc2VTZXJ2aWNlKTtcblxuLy9kZXBlbmRlbmN5IGluamVjdGlvbnNcbmZpcmViYXNlU2VydmljZS4kaW5qZWN0ID0gWyckZmlyZWJhc2UnLCAnJGZpcmViYXNlT2JqZWN0JywgJyRmaXJlYmFzZUFycmF5J107XG5cbi8vZGVjbGFyZSB0aGUgc2VydmljZVxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBmaXJlYmFzZVNlcnZpY2UoJGZpcmViYXNlLCAkZmlyZWJhc2VPYmplY3QsICRmaXJlYmFzZUFycmF5KSB7XG5cblx0Ly9kZWZpbmUgbWV0aG9kc1xuXHR2YXIgRkJTZXJ2aWNlID0ge1xuXHRcdGdldDoge1xuXHRcdFx0Y3VzdG9tZXJfbGlzdDogZ2V0X2N1c3RvbWVyX2xpc3QsXG5cdFx0XHRhX3JlY29yZDogZ2V0X2FfcmVjb3JkXG5cdFx0fSxcblx0XHRhdXRoVXNlcjoge1xuXHRcdFx0ZW1haWw6IGF1dGhVc2VyX2VtYWlsXG5cdFx0fSxcblx0XHRjb21waWxlOiB7XG5cdFx0XHRjdXN0b21lcl9zYWxlc19kYXlzOiBjb21waWxlX2N1c3RvbWVyX3NhbGVzX2RheXNcblx0XHR9LFxuXHRcdHRlc3Q6IHRlc3Rcblx0fTtcblxuXHQvL1x0QVVUSEVOVElDQVRFIFVTRVJcblx0ZnVuY3Rpb24gYXV0aFVzZXJfZW1haWwoZW1haWwsIHBhc3N3b3JkKSB7XG5cdFx0XG5cdFx0Y29uc29sZS5sb2coJ2F1dGhlbnRpY2F0aW5nIHVzZXInKVxuXG5cdFx0Ly9yZXR1cm4gYXN5bmMgd29ya1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cblx0XHRcdGZpcmViYXNlLmF1dGgoKS5zaWduSW5XaXRoRW1haWxBbmRQYXNzd29yZChlbWFpbCwgcGFzc3dvcmQpLnRoZW4oZnVuY3Rpb24gc3VjZXNzKHMpIHtcblxuXHRcdFx0XHRyZXNvbHZlKHMpO1xuXG5cdFx0XHR9KS5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0XHQvLyBIYW5kbGUgRXJyb3JzIGhlcmUuXG5cdFx0XHRcdHZhciBlcnJvckNvZGUgPSBlcnJvci5jb2RlO1xuXHRcdFx0XHR2YXIgZXJyb3JNZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcblx0XHRcdFx0cmVqZWN0KHtjb2RlOiBlcnJvckNvZGUgLCBtZXNzYWdlOiBlcnJvck1lc3NhZ2V9KTtcblxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0fTtcblxuXHQvL1x0R0VUIENVU1RPTUVSIExJU1Rcblx0ZnVuY3Rpb24gZ2V0X2N1c3RvbWVyX2xpc3QoKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cblx0XHQvL2NvbnNvbGUubG9nKCdnZXR0aW5nIGN1c3RvbWVyIGxpc3QnKTtcblxuXHRcdC8vcmV0dXJuIGFzeW5jIHdvcmtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdCAgICAgICAgXG5cdCAgICAgICAgO1xuXG5cdCAgICB9KTtcblx0fVxuXG5cdC8vXHRHRVQgQSBSRUNPUkRcblx0ZnVuY3Rpb24gZ2V0X2FfcmVjb3JkKHBhdGgpIHtcblxuXHRcdC8vY29uc29sZS5sb2coJ2dldHRpbmcnLCBwYXRoKTtcblx0XHQvL3JldHVybiBhc3luYyB3b3JrXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHQgICAgICAgIHZhciBkZXNpcmVkUmVjb3JkID0gJGZpcmViYXNlT2JqZWN0KGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCkuY2hpbGQocGF0aCkpO1xuXHQgICAgICAgIFxuXHQgICAgICAgIGRlc2lyZWRSZWNvcmQuJGxvYWRlZCgpLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzKSB7XG5cdCAgICAgICAgXHRyZXNvbHZlKHMpO1xuXHQgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcblx0ICAgICAgICBcdHJlamVjdChlKTtcblx0ICAgICAgICB9KTtcblxuXHQgICAgfSk7XG5cblx0fTtcblxuXHQvL1x0Q09NUExJTEUgQ1VTVE9NRVIgU0FMRVMgREFZU1xuXHRmdW5jdGlvbiBjb21waWxlX2N1c3RvbWVyX3NhbGVzX2RheXMoY3VzdG9tZXJfaWQpIHtcblx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHRcblx0fTtcdFxuXG5cblx0Ly9cdFRFU1QgRlVOQ1RJT05cblx0ZnVuY3Rpb24gdGVzdCgpIHsgcmV0dXJuKCdnb29kIHRlc3QgZnJvbSBGQiBTZXJ2aWNlJyk7IH07XG5cblx0Ly90dXJuIHRoZSBtZXRob2RcbiAgICByZXR1cm4gRkJTZXJ2aWNlO1x0XG59O1xuXG4iLCIvKlxuKlx0Uk9VVEVTLUNPTkZJR1xuKlxuKlx0VGhpcyBtb2R1bGUgc2V0cyB1cCBhbGwgdGhlIHJlcXVpcmVkIGFuZ3VsYXIgcm91dGVzIGZvciB0aGlzIHdlYiBhcHAuXG4qL1xuYW5ndWxhclxuICAgIC5tb2R1bGUoJ2NuZScpXG4gICAgLmNvbmZpZyhjb25maWcpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNvbmZpZygkcm91dGVQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcblx0JGxvY2F0aW9uUHJvdmlkZXIuaGFzaFByZWZpeCgnJyk7XG4gICAgJHJvdXRlUHJvdmlkZXJcblx0Ly9QVUJMSUMgUk9VVEVTXG4gICAgLndoZW4oJy8nLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvbGFuZGluZ1BhZ2UuaHRtJywgICAgICAvLyd2aWV3cy9tYWluUGFnZS5odG0nXG4gICAgICAgIGNvbnRyb2xsZXI6ICdsYW5kaW5nQ29udHJvbGxlcicsICAgICAgICAgICAvLydtYWluQ29udHJvbGxlcidcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL2N1c3RvbWVycycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9jdXN0b21lcnNQYWdlLmh0bScsICAgICAgLy8ndmlld3MvbWFpblBhZ2UuaHRtJ1xuICAgICAgICBjb250cm9sbGVyOiAnY3VzdG9tZXJzQ29udHJvbGxlcicsICAgICAgICAgICAvLydtYWluQ29udHJvbGxlcidcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICByZXNvbHZlOiB7IC8qIEBuZ0luamVjdCAqL1xuICAgICAgICAgICAgY3VzdG9tZXJMaXN0OiBjdXN0b21lckxpc3RcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLndoZW4oJy9jdXN0b21lcnMvOmN1c3RvbWVyaWQnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvYUN1c3RvbWVyc1BhZ2UuaHRtJywgICAgICAvLyd2aWV3cy9tYWluUGFnZS5odG0nXG4gICAgICAgIGNvbnRyb2xsZXI6ICdhQ3VzdG9tZXJzQ29udHJvbGxlcicsICAgICAgICAgICAvLydtYWluQ29udHJvbGxlcidcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICByZXNvbHZlOiB7IC8qIEBuZ0luamVjdCAqL1xuICAgICAgICAgICAgY3VzdG9tZXJMaXN0OiBjdXN0b21lckxpc3RcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLndoZW4oJy9zYWxlc2RheXMnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3Mvc2FsZXNEYXlzUGFnZS5odG0nLCAgICAgIC8vJ3ZpZXdzL21haW5QYWdlLmh0bSdcbiAgICAgICAgY29udHJvbGxlcjogJ3NhbGVzRGF5c0NvbnRyb2xsZXInLCAgICAgICAgICAgLy8nbWFpbkNvbnRyb2xsZXInXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLndoZW4oJy9zYWxlc2RheXMvOnNhbGVzZGF5aWQnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvYVNhbGVzZGF5UGFnZS5odG0nLCAgICAgIC8vJ3ZpZXdzL21haW5QYWdlLmh0bSdcbiAgICAgICAgY29udHJvbGxlcjogJ2FTYWxlc2RheUNvbnRyb2xsZXInLCAgICAgICAgICAgLy8nbWFpbkNvbnRyb2xsZXInXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLndoZW4oJy9jYXNoX2RyYXdlcl9hc3NpZ25tZW50cycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9jYXNoRHJhd2VyQXNzaWdubWVudHNQYWdlLmh0bScsICAgICAgLy8ndmlld3MvbWFpblBhZ2UuaHRtJ1xuICAgICAgICBjb250cm9sbGVyOiAnY2FzaERyYXdlckFzc2lnbm1lbnRzQ29udHJvbGxlcicsICAgICAgICAgICAvLydtYWluQ29udHJvbGxlcidcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSkgICBcbiAgICAud2hlbignL3NxdWFyZV90eHMnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3Mvc3F1YXJlVHhzUGFnZS5odG0nLCAgICAgIC8vJ3ZpZXdzL21haW5QYWdlLmh0bSdcbiAgICAgICAgY29udHJvbGxlcjogJ3NxdWFyZVR4c0NvbnRyb2xsZXInLCAgICAgICAgICAgLy8nbWFpbkNvbnRyb2xsZXInXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pICBcbiAgICAud2hlbignL3R4X2Jsb2NrcycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy90eHNCbG9ja1BhZ2UuaHRtJywgICAgICAvLyd2aWV3cy9tYWluUGFnZS5odG0nXG4gICAgICAgIGNvbnRyb2xsZXI6ICd0eHNCbG9ja0NvbnRyb2xsZXInLCAgICAgICAgICAgLy8nbWFpbkNvbnRyb2xsZXInXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pICBcbiAgICAud2hlbignL2xvZ2luJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2xvZ2luUGFnZS5odG0nLCAgICAgIC8vJ3ZpZXdzL21haW5QYWdlLmh0bSdcbiAgICAgICAgY29udHJvbGxlcjogJ2xvZ2luQ29udHJvbGxlcicsICAgICAgICAgICAvLydtYWluQ29udHJvbGxlcidcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL2NtZV9zY2hlZHVsZScsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9jbWVTY2hlZHVsaW5nUGFnZS5odG0nLCAgICAgIC8vJ3ZpZXdzL21haW5QYWdlLmh0bSdcbiAgICAgICAgY29udHJvbGxlcjogJ2NtZVNjaGVkdWxlQ29udHJvbGxlcicsICAgICAgICAgICAvLydtYWluQ29udHJvbGxlcidcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcblx0Lm90aGVyd2lzZSh7XG4gICAgICAgIHJlZGlyZWN0VG86ICcvJ1xuICAgIH0pO1xufVxuXG4vKlxuKiAgIFJFUVVJUkVEIEZVTkNUSU9OU1xuKlxuKi9cblxuLy8gIENVU1RPTUVSUyBMSVNUXG5mdW5jdGlvbiBjdXN0b21lckxpc3QoKSB7XG4gICAgXG4gICAgLy9yZXR1cm4gdGhlIHByb21pc2VcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIC8vaGl0IHRoZSBzZXJ2ZXIgZm9yIHRoZSBcbiAgICAgICAgcmVzb2x2ZSgnZ29vZCB0ZXN0Jyk7XG4gICAgfSk7XG5cbn07XG5cbiJdfQ==
