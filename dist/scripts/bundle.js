config.$inject=["$routeProvider","$locationProvider"];var ahNuts=angular.module("cne",["ngRoute","firebase","ngSanitize"]);function aCustomersController(e,s,t,o,a,n){var l=this,r=t.customerid;l.customerProfile=a(firebase.database().ref().child("customers").child(r)),l.tempSalesDays=[],l.selected={season_id:""},s.info("in a customer controller"),l.selectSeason=function(e){l.selected.season_id=e,console.log("id",l.selected.season_id)},l.generateSalesDaysList=function(){var e=l.customerProfile.seasons[l.selected.season_id].start_date,s=l.customerProfile.seasons[l.selected.season_id].end_date,t=l.customerProfile.seasons[l.selected.season_id].repeats,o=l.customerProfile.seasons[l.selected.season_id].repeat_on,a=moment(e),n=moment(s);if(console.log("trying to generate",e,s,t,o),""!=e&&""!=s&&""!=t&&""!=o){console.log("good values",a);for(var r=!1;!r;)a=a.add(1,"day"),o[{0:"sun",1:"mon",2:"tue",3:"wed",4:"thu",5:"fri",6:"sat"}[a.day()]]&&l.tempSalesDays.push(1),moment(a).isSame(n)&&(r=!0);console.log(l.tempSalesDays)}else console.log("missing values")},l.saveChanges=function(){l.customerProfile.$save(),console.log("saved change")}}function aSalesdayController(e,s,t,o){var a="sales_days/"+t.salesdayid;this.salesdaySelected=t.salesdayid,this.currentCME=o(firebase.database().ref().child(a)),s.info("in a salesday controller")}function cashDrawerAssignmentsController(e,s,t,o,a,n){var r=this,l=new Date;r.sqrLocations=a(firebase.database().ref().child("reference_lists/sqr_locations")),r.sqrEmployees=a(firebase.database().ref().child("reference_lists/sqr_employees")),r.searchlist={times:{start:l,end:l}},r.cashDrawerList=a(firebase.database().ref().child("sqr_cash_drawers")),r.cmeList=[{test:"test"},{test:"test"},{test:"test"}],r.selected={location:"Oregon"},s.info("in the cash drawer assignment controller",n)}function cmeScheduleController(e,s,t,o,a){this.calendarDays=a(firebase.database().ref().child("calender/2018")),s.info("in the CME Schedule controller")}function customersController(e,s,t,o,a,n,r,l){var c=this;c.customerList=l(firebase.database().ref().child("customers")),c.customerSalesDays=[],c.selectedCustomer={seasons:{2018:{id:2018}}},c.testList=["a","b","c"],c.state={selected:{customer:{$index:"",$id:""},salesday:{$index:"test",$id:"test"}}},s.info("in the customers controller"),c.selectCustomer=function(e){c.state.selected.customer.$index=e,c.state.selected.customer.$id=c.customerList[e].$id,c.selectedCustomer=r(firebase.database().ref().child("customers").child(c.customerList[e].$id)),c.customerSalesDays=a.compile.customer_sales_days(c.state.selected.customer.$id)},c.updateCustomer=function(){c.selectedCustomer.$save().then(function(e){console.log("updated record successfully")}).catch(function(e){console.log("error updating record",e)})},c.changeRecord=function(e){c.state.selected.customer.$index;switch({prev:0,next:1}[e]){case 0:c.selectCustomer(c.state.selected.customer.$index-1);break;case 1:c.selectCustomer(c.state.selected.customer.$index+1)}},c.generate_bulk_salesdays=function(){console.log("generating bulk salesdays",c.selectedCustomer.sales_days)},c.changePage=function(){var e="/customers/"+c.state.selected.customer.$id;console.log("redirecting to",e),t.path(e)}}function landingController(e,s){s.info("in the landing controller")}function loginController(e,s,t){this.credentials={username:"",password:""},this.active={username:!1,password:!1},this.submitCreds=function(e,s){console.log("submitCreds clicked"),t.authUser.email(e,s).then(function(e){console.log("was success",e)}).catch(function(e){console.log("Error:",e)})},s.info("in the login controller")}function salesDaysController(s,e,t,o,a,n,r){var i=this;i.salesdaysList=o(firebase.database().ref().child("sales_days")),i.selectedRecord={id:"2039752"},i.testCustomers=["Beaverton","Orenco"],i.testSeasons=["2018","2017"],i.testTimes=["9:00 AM","9:15 AM","9:30 AM","9:45 AM"],i.scheduling_params={customer:"",customer_id:"",season:"",bookend_dates:{first:"",last:""},repeats:"",event_days:{Mon:!1,Tue:!1,Wed:!1,Thu:!1,Fri:!1,Sat:!1,Sun:!1},same_day_load_in_out:!0,schedule:{load_in:"",load_out:"",open:"",close:"",sales_start:"",sales_end:""}},i.tempIterations=[],i.tempTimes={load_in:"",load_out:"",open:"",close:"",sales_start:"",sales_end:""},e.info("in the sales days controller"),i.updateRecord=function(e){console.log("got this id",e)},i.addSalesDay=function(){i.salesdaysList.$add({date:(new Date).toISOString(),schedule:{load_in:{datetime:"",sales_day_id:""},load_out:{datetime:"",sales_day_id:""},open:"",close:"",sales_start:"",sales_end:""},customer:"",season:{name:"",frequency:"",instance:0,total:0}}).then(function(e){console.log(e.key),i.selectedRecord=a(firebase.database().ref().child("sales_days").child(e.key)),console.log(i.selectedRecord)}).catch(function(e){console.log("error",e)})},i.generateSalesDays=function(){var e;(e=i.scheduling_params,new Promise(function(s,t){r.sales_days.compile_batch(e).then(function(e){s(e)}).catch(function(e){t(e)})})).then(function(e){console.log("successfully built",e),i.tempIterations=e,s.$apply()}).catch(function(e){console.log(e)})},i.foramtTime=function(e){console.log("formatting time",e);var s=new Date,t=s.getFullYear(),o=s.getMonth(),a=s.getDate(),n=i.tempTimes[e].split(":"),r=n[1].split(" "),l=parseInt(n[0]),c=r[0];"PM"==r[1]&&(l+=12).toString(),o<10&&(o="0"+o),a<10&&(a="0"+a),l<10&&(l="0"+l),i.scheduling_params.schedule[e]=t+"-"+o+"-"+a+"T"+l+":"+c+":00-07:00"},i.saveSalesDays=function(){i.tempIterations.forEach(function(e){i.salesdaysList.$add(e).then(function(e){var s=e.key;console.log(s)})})}}function squareTxsController(t,e,s,o,a,n,r){var l=this,c=moment(new Date).subtract(1,"day"),i=r.sqr_locations.list(),d=r.sqr_employees.list();a(firebase.database().ref().child("sales_days"));function u(){var e,s;e=moment(l.selectedDate).hours(23).minutes(59).seconds(59).format(),s=moment(l.selectedDate).format(),r.sqr_txs.full_day(l.selectedLocation.id,s,e).then(function(e){console.log("got a response with",e.length,"records"),l.daystransactions=e,t.$apply()}).catch(function(e){console.log("ERROR",e)}),function(){var e=l.selectedDate.getFullYear(),s=l.selectedDate.getMonth()+1,t=l.selectedDate.getDate();s<10&&(s="0"+s);t<10&&(t="0"+t);var o="/calender/"+e+"/"+e+"-"+s+"-"+t+"/sales_days";l.salesDays=a(firebase.database().ref().child(o))}()}l.salesDays="",l.filteredSalesDays=[],l.selectedLocation={name:"Oregon",id:""},l.selectedDate=new Date(c.format("MM-DD-YYYY")),l.dayHrs=[1,2,3,4,5,6,7,8,9,10,11,12,1,2,3,4,5,6,7,8,9,10,11,12],l.daystransactions=[],e.info("in a square Txs controller",c.format()),l.dayChange=function(e){var s=moment(new Date(l.selectedDate));switch({"-":0,"+":1}[e]){case 0:s.subtract(1,"day");break;case 1:s.add(1,"day")}l.selectedDate=new Date(s.format("MM-DD-YYYY")),u()},l.employeeName=function(t){var o="";return Object.keys(l.sqrEmployees).forEach(function(e){var s=l.sqrEmployees[e].first_name+" "+l.sqrEmployees[e].last_name;l.sqrEmployees[e].id==t&&(o=s)}),o},Promise.all([i,d]).then(function(e){l.sqrLocations=e[0],l.sqrEmployees=e[1],console.log(l.sqrLocations),console.log(l.sqrEmployees),l.sqrLocations.forEach(function(e){e.name==l.selectedLocation.name&&(l.selectedLocation.id=e.id)}),u()}).catch(function(e){console.log("error",e)})}function customerList(){s.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/customer-list.directive.htm",replace:!0,scope:{},link:s,controller:t,controllerAs:"vm",bindToController:!0};function s(e,s,t,o){}function t(e,s){console.log("in costomer List controller")}return t.$inject=["$scope","$log"],e}function customerSalesDays(){s.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/customer-sales-days.directive.htm",replace:!0,scope:{salesdaysList:"=",salesdaySelected:"="},link:s,controller:t,controllerAs:"vm",bindToController:!0};function s(t,e,s,o){t.$watch("vm.salesdaysList",function(e,s){e&&t.loadSaleDays()},!0)}function t(e,s,a){var n=this;n.detailedSalesDaysList=[],console.log("in the customerSalesDaysController"),e.loadSaleDays=function(){var t=[];Object.keys(n.salesdaysList).forEach(function(e){var s,o;t.push((s=n.salesdaysList[e],o="sales_days/"+s,new Promise(function(s,t){a.get.a_record(o).then(function(e){s(e)}).catch(function(e){t(e)})})))}),Promise.all(t).then(function(e){n.detailedSalesDaysList=e}).catch(function(e){console.log("error",e)})},e.salesDaySelected=function(e){n.salesdaySelected=n.detailedSalesDaysList[e].$id},n.addSalesDaysToCal=function(){console.log("addSalesDaysToCal")}}return t.$inject=["$scope","$log","firebaseService"],e}function loginPassword(){s.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-password.directive.htm",replace:!0,scope:{password:"=",active:"="},link:s,controller:t,controllerAs:"vm",bindToController:!0};function s(e,s,t,o){}function t(e,s){}return t.$inject=["$scope","$log"],e}function loginUsername(){s.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-username.directive.htm",replace:!0,scope:{username:"=",active:"="},link:s,controller:t,controllerAs:"vm",bindToController:!0};function s(e,s,t,o){}function t(e,s){}return t.$inject=["$scope","$log"],e}function salesDayTxs(){s.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/sales-day-transactions.directive.htm",replace:!0,scope:{txsList:"=",salesdaySelected:"="},link:s,controller:t,controllerAs:"vm",bindToController:!0};function s(t,e,s,o){t.$watch("vm.salesdaySelected",function(e,s){e&&t.loadSDTxs()},!0)}function t(t,e,o){var a=this;function n(e,s){e+=s;return new Promise(function(s,t){o.get.a_record(e).then(function(e){s(e)}).catch(function(e){t(e)})})}a.promiseList=[],a.detailedTxList=[],console.log("in the salesDayTxsController"),t.loadSDTxs=function(){n("sales_days/",a.salesdaySelected).then(function(s){Object.keys(s.transactions).forEach(function(e){"placeholder"!=s.transactions[e]&&a.promiseList.push(n("transactions/",s.transactions[e]))}),Promise.all(a.promiseList).then(function(e){a.detailedTxList=e,t.$apply()}).catch(function(e){console.log("error",e)})}).catch(function(e){console.log("error",e)})}}return t.$inject=["$scope","$log","firebaseService"],e}function dataService(i){return{sqr_locations:{list:function(){var e={};return console.log("getting locations list"),new Promise(function(s,t){i({method:"POST",url:"/squarepos/locations",headers:{"Content-Type":"application/json"},data:e}).then(function(e){s(e.data)},function(e){t(e)})})}},sqr_employees:{list:function(e,s,t,o,a,n,r,l){var c={status:e,external_id:s,limit:t,order:o,begin_updated_at:a,end_updated_at:n,begin_created_at:r,end_created_at:l};return console.log("getting employees list"),new Promise(function(s,t){i({method:"POST",url:"/squarepos/employees",headers:{"Content-Type":"application/json"},data:c}).then(function(e){s(e.data)},function(e){t(e)})})}},sqr_txs:{full_day:function(e,s,t){var o={location:e,start:s,end:t};return console.log("getting day's Transactions"),new Promise(function(s,t){i({method:"POST",url:"/squarepos/txs",headers:{"Content-Type":"application/json"},data:o}).then(function(e){s(e.data)},function(e){t(e)})})}},sales_days:{compile_batch:function(e){return new Promise(function(s,t){i({method:"POST",url:"/api/sales_days/compile_new_sales_days_batch",headers:{"Content-Type":"application/json"},data:e}).then(function(e){s(e.data)},function(e){t(e)})})}}}}function firebaseService(e,a,s){return{get:{customer_list:function(){return new Promise(function(e,s){})},a_record:function(o){return new Promise(function(s,t){var e=a(firebase.database().ref().child(o));e.$loaded().then(function(e){s(e)}).catch(function(e){t(e)})})}},authUser:{email:function(e,t){return console.log("authenticating user"),new Promise(function(s,o){firebase.auth().signInWithEmailAndPassword(e,t).then(function(e){s(e)}).catch(function(e){var s=e.code,t=e.message;o({code:s,message:t})})})}},compile:{customer_sales_days:function(e){}},test:function(){return"good test from FB Service"}}}function config(e,s){s.hashPrefix(""),e.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/customers",{templateUrl:"views/customersPage.htm",controller:"customersController",controllerAs:"vm",resolve:{customerList:customerList}}).when("/customers/:customerid",{templateUrl:"views/aCustomersPage.htm",controller:"aCustomersController",controllerAs:"vm",resolve:{customerList:customerList}}).when("/salesdays",{templateUrl:"views/salesDaysPage.htm",controller:"salesDaysController",controllerAs:"vm"}).when("/salesdays/:salesdayid",{templateUrl:"views/aSalesdayPage.htm",controller:"aSalesdayController",controllerAs:"vm"}).when("/cash_drawer_assignments",{templateUrl:"views/cashDrawerAssignmentsPage.htm",controller:"cashDrawerAssignmentsController",controllerAs:"vm"}).when("/square_txs",{templateUrl:"views/squareTxsPage.htm",controller:"squareTxsController",controllerAs:"vm"}).when("/login",{templateUrl:"views/loginPage.htm",controller:"loginController",controllerAs:"vm"}).when("/cme_schedule",{templateUrl:"views/cmeSchedulingPage.htm",controller:"cmeScheduleController",controllerAs:"vm"}).otherwise({redirectTo:"/"})}function customerList(){return new Promise(function(e,s){e("good test")})}angular.module("cne").controller("aCustomersController",aCustomersController),aCustomersController.$inject=["$scope","$log","$routeParams","$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").controller("aSalesdayController",aSalesdayController),aSalesdayController.$inject=["$scope","$log","$routeParams","$firebaseObject"],angular.module("cne").controller("cashDrawerAssignmentsController",cashDrawerAssignmentsController),cashDrawerAssignmentsController.$inject=["$scope","$log","$firebase","$firebaseObject","$firebaseArray","dataService"],angular.module("cne").controller("cmeScheduleController",cmeScheduleController),cmeScheduleController.$inject=["$scope","$log","$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").controller("customersController",customersController),customersController.$inject=["$scope","$log","$location","customerList","firebaseService","$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").controller("landingController",landingController),landingController.$inject=["$scope","$log"],angular.module("cne").controller("loginController",loginController),loginController.$inject=["$scope","$log","firebaseService"],angular.module("cne").controller("salesDaysController",salesDaysController),salesDaysController.$inject=["$scope","$log","$firebase","$firebaseArray","$firebaseObject","$http","dataService"],angular.module("cne").controller("squareTxsController",squareTxsController),squareTxsController.$inject=["$scope","$log","$routeParams","$firebase","$firebaseObject","$firebaseArray","dataService"],angular.module("cne").directive("customerList",customerList),angular.module("cne").directive("customerSalesDays",customerSalesDays),angular.module("cne").directive("loginPassword",loginPassword),angular.module("cne").directive("loginUsername",loginUsername),angular.module("cne").directive("salesDayTxs",salesDayTxs),angular.module("cne").factory("dataService",dataService),dataService.$inject=["$http"],angular.module("cne").factory("firebaseService",firebaseService),firebaseService.$inject=["$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").config(config);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
