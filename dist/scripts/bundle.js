config.$inject=["$routeProvider","$locationProvider"];var ahNuts=angular.module("cne",["ngRoute","firebase","ngSanitize"]);function customersController(e,t,o,s,n,r,l){var c=this;c.customerList=l(firebase.database().ref().child("customers")),c.customerSalesDays=[],c.selectedCustomer={seasons:{2018:{id:2018}}},c.testList=["a","b","c"],c.state={selected:{customer:{$index:"",$id:""}}},t.info("in the customers controller"),c.selectCustomer=function(e){c.state.selected.customer.$index=e,c.state.selected.customer.$id=c.customerList[e].$id,c.selectedCustomer=r(firebase.database().ref().child("customers").child(c.customerList[e].$id)),c.customerSalesDays=c.selectedCustomer.sales_days},c.updateCustomer=function(){c.selectedCustomer.$save().then(function(e){console.log("updated record successfully")}).catch(function(e){console.log("error updating record",e)})},c.changeRecord=function(e){c.state.selected.customer.$index;switch({prev:0,next:1}[e]){case 0:c.selectCustomer(c.state.selected.customer.$index-1);break;case 1:c.selectCustomer(c.state.selected.customer.$index+1)}},c.generate_bulk_salesdays=function(){console.log("generating bulk salesdays",c.selectedCustomer.sales_days)}}function landingController(e,t){t.info("in the landing controller")}function loginController(e,t,o){var s=this;s.credentials={username:"",password:""},s.active={username:!1,password:!1},s.submitCreds=function(e,t){console.log("submitCreds clicked"),o.authUser.email(e,t).then(function(e){console.log("was success",e)}).catch(function(e){console.log("Error:",e)})},t.info("in the login controller")}function salesDaysController(t,e,o,s,n,r,l){var c=this,a={date:"2018-05-05T06:00:00Z",wk_day:"Sat",id:"beaverton_fm_001",schedule:{load_in:"",load_out:"",open:"8:00 AM",close:"1:30 PM",sales_start:"",sales_end:""}};c.salesdaysList=s(firebase.database().ref().child("sales_days")),c.selectedRecord={id:"2039752"},c.testCustomers=["Beaverton","Orenco"],c.testSeasons=["2018","2017"],c.testTimes=["9:00 AM","9:15 AM","9:30 AM","9:45 AM"],c.scheduling_params={customer:"",season:"",bookend_dates:{first:"",last:""},repeats:"",event_days:{Mon:!1,Tue:!1,Wed:!1,Thu:!1,Fri:!1,Sat:!1,Sun:!1},same_day_load_in_out:!0,schedule:{load_in:"",load_out:"",open:"",close:"",sales_start:"",sales_end:""}},c.tempIterations=[a,a],e.info("in the sales days controller"),c.updateRecord=function(e){console.log("got this id",e)},c.addSalesDay=function(){c.salesdaysList.$add({date:(new Date).toISOString(),schedule:{load_in:{datetime:"",sales_day_id:""},load_out:{datetime:"",sales_day_id:""},open:"",close:"",sales_start:"",sales_end:""},customer:"",season:{name:"",frequency:"",instance:0,total:0}}).then(function(e){console.log(e.key),c.selectedRecord=n(firebase.database().ref().child("sales_days").child(e.key)),console.log(c.selectedRecord)}).catch(function(e){console.log("error",e)})},c.generateSalesDays=function(){var e;(e=c.scheduling_params,new Promise(function(t,o){l.sales_days.compile_batch(e).then(function(e){t(e)}).catch(function(e){o(e)})})).then(function(e){console.log("successfully built",e),c.tempIterations=e,t.$apply()}).catch(function(e){console.log(e)})}}function config(e,t){t.hashPrefix(""),e.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/customers",{templateUrl:"views/customersPage.htm",controller:"customersController",controllerAs:"vm",resolve:{customerList:customerList}}).when("/salesdays",{templateUrl:"views/salesDaysPage.htm",controller:"salesDaysController",controllerAs:"vm"}).when("/login",{templateUrl:"views/loginPage.htm",controller:"loginController",controllerAs:"vm"}).otherwise({redirectTo:"/"})}function customerList(){return new Promise(function(e,t){e("good test")})}function customerList(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/customer-list.directive.htm",replace:!0,scope:{},link:t,controller:o,controllerAs:"vm",bindToController:!0};function t(e,t,o,s){}function o(e,t){console.log("in costomer List controller")}return o.$inject=["$scope","$log"],e}function loginPassword(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-password.directive.htm",replace:!0,scope:{password:"=",active:"="},link:t,controller:o,controllerAs:"vm",bindToController:!0};function t(e,t,o,s){}function o(e,t){}return o.$inject=["$scope","$log"],e}function loginUsername(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-username.directive.htm",replace:!0,scope:{username:"=",active:"="},link:t,controller:o,controllerAs:"vm",bindToController:!0};function t(e,t,o,s){}function o(e,t){}return o.$inject=["$scope","$log"],e}function dataService(s){return{sales_days:{compile_batch:function(e){return new Promise(function(t,o){s({method:"POST",url:"/api/sales_days/compile_new_sales_days_batch",headers:{"Content-Type":"application/json"},data:e}).then(function(e){t(e.data)},function(e){o(e)})})}}}}function firebaseService(e,t,o){return{get:{customer_list:function(){return new Promise(function(e,t){e(["one","two","three"])})}},authUser:{email:function(e,o){return console.log("authenticating user"),new Promise(function(t,s){firebase.auth().signInWithEmailAndPassword(e,o).then(function(e){t(e)}).catch(function(e){var t=e.code,o=e.message;s({code:t,message:o})})})}},test:function(){return"good test from FB Service"}}}angular.module("cne").controller("customersController",customersController),customersController.$inject=["$scope","$log","customerList","firebaseService","$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").controller("landingController",landingController),landingController.$inject=["$scope","$log"],angular.module("cne").controller("loginController",loginController),loginController.$inject=["$scope","$log","firebaseService"],angular.module("cne").controller("salesDaysController",salesDaysController),salesDaysController.$inject=["$scope","$log","$firebase","$firebaseArray","$firebaseObject","$http","dataService"],angular.module("cne").config(config),angular.module("cne").directive("customerList",customerList),angular.module("cne").directive("loginPassword",loginPassword),angular.module("cne").directive("loginUsername",loginUsername),angular.module("cne").factory("dataService",dataService),dataService.$inject=["$http"],angular.module("cne").factory("firebaseService",firebaseService),firebaseService.$inject=["$firebase","$firebaseObject","$firebaseArray"];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
