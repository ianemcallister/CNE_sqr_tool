config.$inject=["$routeProvider","$locationProvider"];var ahNuts=angular.module("cne",["ngRoute","firebase","ngSanitize"]);function customersController(e,t,o,s,n,r,l){var a=this;a.customerList=l(firebase.database().ref().child("customers")),a.customerSalesDays=[],a.selectedCustomer={seasons:{2018:{id:2018}}},a.testList=["a","b","c"],a.state={selected:{customer:{$index:"",$id:""}}},t.info("in the customers controller"),a.selectCustomer=function(e){a.state.selected.customer.$index=e,a.state.selected.customer.$id=a.customerList[e].$id,a.selectedCustomer=r(firebase.database().ref().child("customers").child(a.customerList[e].$id)),a.customerSalesDays=a.selectedCustomer.sales_days},a.updateCustomer=function(){a.selectedCustomer.$save().then(function(e){console.log("updated record successfully")}).catch(function(e){console.log("error updating record",e)})},a.changeRecord=function(e){a.state.selected.customer.$index;switch({prev:0,next:1}[e]){case 0:a.selectCustomer(a.state.selected.customer.$index-1);break;case 1:a.selectCustomer(a.state.selected.customer.$index+1)}},a.generate_bulk_salesdays=function(){console.log("generating bulk salesdays",a.selectedCustomer.sales_days)}}function landingController(e,t){t.info("in the landing controller")}function loginController(e,t,o){var s=this;s.credentials={username:"",password:""},s.active={username:!1,password:!1},s.submitCreds=function(e,t){console.log("submitCreds clicked"),o.authUser.email(e,t).then(function(e){console.log("was success",e)}).catch(function(e){console.log("Error:",e)})},t.info("in the login controller")}function salesDaysController(t,e,o,s,n,r,l){var i=this;i.salesdaysList=s(firebase.database().ref().child("sales_days")),i.selectedRecord={id:"2039752"},i.testCustomers=["Beaverton","Orenco"],i.testSeasons=["2018","2017"],i.testTimes=["9:00 AM","9:15 AM","9:30 AM","9:45 AM"],i.scheduling_params={customer:"",customer_id:"",season:"",bookend_dates:{first:"",last:""},repeats:"",event_days:{Mon:!1,Tue:!1,Wed:!1,Thu:!1,Fri:!1,Sat:!1,Sun:!1},same_day_load_in_out:!0,schedule:{load_in:"",load_out:"",open:"",close:"",sales_start:"",sales_end:""}},i.tempIterations=[],i.tempTimes={load_in:"",load_out:"",open:"",close:"",sales_start:"",sales_end:""},e.info("in the sales days controller"),i.updateRecord=function(e){console.log("got this id",e)},i.addSalesDay=function(){i.salesdaysList.$add({date:(new Date).toISOString(),schedule:{load_in:{datetime:"",sales_day_id:""},load_out:{datetime:"",sales_day_id:""},open:"",close:"",sales_start:"",sales_end:""},customer:"",season:{name:"",frequency:"",instance:0,total:0}}).then(function(e){console.log(e.key),i.selectedRecord=n(firebase.database().ref().child("sales_days").child(e.key)),console.log(i.selectedRecord)}).catch(function(e){console.log("error",e)})},i.generateSalesDays=function(){var e;(e=i.scheduling_params,new Promise(function(t,o){l.sales_days.compile_batch(e).then(function(e){t(e)}).catch(function(e){o(e)})})).then(function(e){console.log("successfully built",e),i.tempIterations=e,t.$apply()}).catch(function(e){console.log(e)})},i.foramtTime=function(e){console.log("formatting time",e);var t=new Date,o=t.getFullYear(),s=t.getMonth(),n=t.getDate(),r=i.tempTimes[e].split(":"),l=r[1].split(" "),a=parseInt(r[0]),c=l[0];"PM"==l[1]&&(a+=12).toString(),s<10&&(s="0"+s),n<10&&(n="0"+n),a<10&&(a="0"+a),i.scheduling_params.schedule[e]=o+"-"+s+"-"+n+"T"+a+":"+c+":00-07:00"},i.saveSalesDays=function(){i.tempIterations.forEach(function(e){i.salesdaysList.$add(e).then(function(e){var t=e.key;console.log(t)})})}}function customerList(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/customer-list.directive.htm",replace:!0,scope:{},link:t,controller:o,controllerAs:"vm",bindToController:!0};function t(e,t,o,s){}function o(e,t){console.log("in costomer List controller")}return o.$inject=["$scope","$log"],e}function loginPassword(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-password.directive.htm",replace:!0,scope:{password:"=",active:"="},link:t,controller:o,controllerAs:"vm",bindToController:!0};function t(e,t,o,s){}function o(e,t){}return o.$inject=["$scope","$log"],e}function loginUsername(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-username.directive.htm",replace:!0,scope:{username:"=",active:"="},link:t,controller:o,controllerAs:"vm",bindToController:!0};function t(e,t,o,s){}function o(e,t){}return o.$inject=["$scope","$log"],e}function dataService(s){return{sales_days:{compile_batch:function(e){return new Promise(function(t,o){s({method:"POST",url:"/api/sales_days/compile_new_sales_days_batch",headers:{"Content-Type":"application/json"},data:e}).then(function(e){t(e.data)},function(e){o(e)})})}}}}function firebaseService(e,t,o){return{get:{customer_list:function(){return new Promise(function(e,t){e(["one","two","three"])})}},authUser:{email:function(e,o){return console.log("authenticating user"),new Promise(function(t,s){firebase.auth().signInWithEmailAndPassword(e,o).then(function(e){t(e)}).catch(function(e){var t=e.code,o=e.message;s({code:t,message:o})})})}},test:function(){return"good test from FB Service"}}}function config(e,t){t.hashPrefix(""),e.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/customers",{templateUrl:"views/customersPage.htm",controller:"customersController",controllerAs:"vm",resolve:{customerList:customerList}}).when("/salesdays",{templateUrl:"views/salesDaysPage.htm",controller:"salesDaysController",controllerAs:"vm"}).when("/login",{templateUrl:"views/loginPage.htm",controller:"loginController",controllerAs:"vm"}).otherwise({redirectTo:"/"})}function customerList(){return new Promise(function(e,t){e("good test")})}angular.module("cne").controller("customersController",customersController),customersController.$inject=["$scope","$log","customerList","firebaseService","$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").controller("landingController",landingController),landingController.$inject=["$scope","$log"],angular.module("cne").controller("loginController",loginController),loginController.$inject=["$scope","$log","firebaseService"],angular.module("cne").controller("salesDaysController",salesDaysController),salesDaysController.$inject=["$scope","$log","$firebase","$firebaseArray","$firebaseObject","$http","dataService"],angular.module("cne").directive("customerList",customerList),angular.module("cne").directive("loginPassword",loginPassword),angular.module("cne").directive("loginUsername",loginUsername),angular.module("cne").factory("dataService",dataService),dataService.$inject=["$http"],angular.module("cne").factory("firebaseService",firebaseService),firebaseService.$inject=["$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").config(config);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
