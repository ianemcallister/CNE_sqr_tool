config.$inject=["$routeProvider","$locationProvider"];var ahNuts=angular.module("cne",["ngRoute","firebase","ngSanitize"]);function customersController(e,o,t,r,n,s,l){var c=this;c.customerList=l(firebase.database().ref().child("customers")),c.customerSalesDays=[],c.selectedCustomer={seasons:{2018:{id:2018}}},c.testList=["a","b","c"],c.state={selected:{customer:{$index:"",$id:""}}},o.info("in the customers controller"),c.selectCustomer=function(e){c.state.selected.customer.$index=e,c.state.selected.customer.$id=c.customerList[e].$id,c.selectedCustomer=s(firebase.database().ref().child("customers").child(c.customerList[e].$id)),c.customerSalesDays=c.selectedCustomer.sales_days},c.updateCustomer=function(){c.selectedCustomer.$save().then(function(e){console.log("updated record successfully")}).catch(function(e){console.log("error updating record",e)})},c.changeRecord=function(e){c.state.selected.customer.$index;switch({prev:0,next:1}[e]){case 0:c.selectCustomer(c.state.selected.customer.$index-1);break;case 1:c.selectCustomer(c.state.selected.customer.$index+1)}},c.generate_bulk_salesdays=function(){console.log("generating bulk salesdays",c.selectedCustomer.sales_days)}}function landingController(e,o){o.info("in the landing controller")}function loginController(e,o,t){var r=this;r.credentials={username:"",password:""},r.active={username:!1,password:!1},r.submitCreds=function(e,o){console.log("submitCreds clicked"),t.authUser.email(e,o).then(function(e){console.log("was success",e)}).catch(function(e){console.log("Error:",e)})},o.info("in the login controller")}function salesDaysController(e,o){o.info("in the sales days controller")}function customerList(){o.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/customer-list.directive.htm",replace:!0,scope:{},link:o,controller:t,controllerAs:"vm",bindToController:!0};function o(e,o,t,r){}function t(e,o){console.log("in costomer List controller")}return t.$inject=["$scope","$log"],e}function loginPassword(){o.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-password.directive.htm",replace:!0,scope:{password:"=",active:"="},link:o,controller:t,controllerAs:"vm",bindToController:!0};function o(e,o,t,r){}function t(e,o){}return t.$inject=["$scope","$log"],e}function loginUsername(){o.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-username.directive.htm",replace:!0,scope:{username:"=",active:"="},link:o,controller:t,controllerAs:"vm",bindToController:!0};function o(e,o,t,r){}function t(e,o){}return t.$inject=["$scope","$log"],e}function firebaseService(e,o,t){return{get:{customer_list:function(){return new Promise(function(e,o){e(["one","two","three"])})}},authUser:{email:function(e,t){return console.log("authenticating user"),new Promise(function(o,r){firebase.auth().signInWithEmailAndPassword(e,t).then(function(e){o(e)}).catch(function(e){var o=e.code,t=e.message;r({code:o,message:t})})})}},test:function(){return"good test from FB Service"}}}function config(e,o){o.hashPrefix(""),e.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/customers",{templateUrl:"views/customersPage.htm",controller:"customersController",controllerAs:"vm",resolve:{customerList:customerList}}).when("/salesdays",{templateUrl:"views/salesDaysPage.htm",controller:"salesDaysController",controllerAs:"vm"}).when("/login",{templateUrl:"views/loginPage.htm",controller:"loginController",controllerAs:"vm"}).otherwise({redirectTo:"/"})}function customerList(){return new Promise(function(e,o){e("good test")})}angular.module("cne").controller("customersController",customersController),customersController.$inject=["$scope","$log","customerList","firebaseService","$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").controller("landingController",landingController),landingController.$inject=["$scope","$log"],angular.module("cne").controller("loginController",loginController),loginController.$inject=["$scope","$log","firebaseService"],angular.module("cne").controller("salesDaysController",salesDaysController),salesDaysController.$inject=["$scope","$log"],angular.module("cne").directive("customerList",customerList),angular.module("cne").directive("loginPassword",loginPassword),angular.module("cne").directive("loginUsername",loginUsername),angular.module("cne").factory("firebaseService",firebaseService),firebaseService.$inject=["$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").config(config);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
