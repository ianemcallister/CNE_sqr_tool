config.$inject=["$routeProvider","$locationProvider"];var ahNuts=angular.module("cne",["ngRoute","firebase","ngSanitize"]);function aCustomersController(e,t,s,o,r,a){var l=this,n=s.customerid;l.customerProfile=r(firebase.database().ref().child("customers").child(n)),l.tempSalesDays=[],l.selected={season_id:""},t.info("in a customer controller"),l.selectSeason=function(e){l.selected.season_id=e,console.log("id",l.selected.season_id)},l.generateSalesDaysList=function(){var e=l.customerProfile.seasons[l.selected.season_id].start_date,t=l.customerProfile.seasons[l.selected.season_id].end_date,s=l.customerProfile.seasons[l.selected.season_id].repeats,o=l.customerProfile.seasons[l.selected.season_id].repeat_on,r=moment(e),a=moment(t);if(console.log("trying to generate",e,t,s,o),""!=e&&""!=t&&""!=s&&""!=o){console.log("good values",r);for(var n=!1;!n;)r=r.add(1,"day"),o[{0:"sun",1:"mon",2:"tue",3:"wed",4:"thu",5:"fri",6:"sat"}[r.day()]]&&l.tempSalesDays.push(1),moment(r).isSame(a)&&(n=!0);console.log(l.tempSalesDays)}else console.log("missing values")},l.saveChanges=function(){l.customerProfile.$save(),console.log("saved change")}}function aSalesdayController(e,t,s,o){var r="sales_days/"+s.salesdayid;this.salesdaySelected=s.salesdayid,this.currentCME=o(firebase.database().ref().child(r)),t.info("in a salesday controller")}function cashDrawerAssignmentsController(e,t,s,o,r,a){var n=this,l=new Date;n.sqrLocations=r(firebase.database().ref().child("reference_lists/sqr_locations")),n.sqrEmployees=r(firebase.database().ref().child("reference_lists/sqr_employees")),n.searchlist={times:{start:l,end:l}},n.cashDrawerList=r(firebase.database().ref().child("sqr_cash_drawers")),n.cmeList=[{test:"test"},{test:"test"},{test:"test"}],n.selected={location:"Oregon"},t.info("in the cash drawer assignment controller",a)}function cmeScheduleController(e,t,s,o,r){this.calendarDays=r(firebase.database().ref().child("calender/2018")),t.info("in the CME Schedule controller")}function customersController(e,t,s,o,r,a,n,l){var c=this;c.customerList=l(firebase.database().ref().child("customers")),c.customerSalesDays=[],c.selectedCustomer={seasons:{2018:{id:2018}}},c.testList=["a","b","c"],c.state={selected:{customer:{$index:"",$id:""},salesday:{$index:"test",$id:"test"}}},t.info("in the customers controller"),c.selectCustomer=function(e){c.state.selected.customer.$index=e,c.state.selected.customer.$id=c.customerList[e].$id,c.selectedCustomer=n(firebase.database().ref().child("customers").child(c.customerList[e].$id)),c.customerSalesDays=r.compile.customer_sales_days(c.state.selected.customer.$id)},c.updateCustomer=function(){c.selectedCustomer.$save().then(function(e){console.log("updated record successfully")}).catch(function(e){console.log("error updating record",e)})},c.changeRecord=function(e){c.state.selected.customer.$index;switch({prev:0,next:1}[e]){case 0:c.selectCustomer(c.state.selected.customer.$index-1);break;case 1:c.selectCustomer(c.state.selected.customer.$index+1)}},c.generate_bulk_salesdays=function(){console.log("generating bulk salesdays",c.selectedCustomer.sales_days)},c.changePage=function(){var e="/customers/"+c.state.selected.customer.$id;console.log("redirecting to",e),s.path(e)}}function landingController(e,t){t.info("in the landing controller")}function loginController(e,t,s){this.credentials={username:"",password:""},this.active={username:!1,password:!1},this.submitCreds=function(e,t){console.log("submitCreds clicked"),s.authUser.email(e,t).then(function(e){console.log("was success",e)}).catch(function(e){console.log("Error:",e)})},t.info("in the login controller")}function salesDaysController(t,e,s,o,r,a,n){var i=this;i.salesdaysList=o(firebase.database().ref().child("sales_days")),i.selectedRecord={id:"2039752"},i.testCustomers=["Beaverton","Orenco"],i.testSeasons=["2018","2017"],i.testTimes=["9:00 AM","9:15 AM","9:30 AM","9:45 AM"],i.scheduling_params={customer:"",customer_id:"",season:"",bookend_dates:{first:"",last:""},repeats:"",event_days:{Mon:!1,Tue:!1,Wed:!1,Thu:!1,Fri:!1,Sat:!1,Sun:!1},same_day_load_in_out:!0,schedule:{load_in:"",load_out:"",open:"",close:"",sales_start:"",sales_end:""}},i.tempIterations=[],i.tempTimes={load_in:"",load_out:"",open:"",close:"",sales_start:"",sales_end:""},e.info("in the sales days controller"),i.updateRecord=function(e){console.log("got this id",e)},i.addSalesDay=function(){i.salesdaysList.$add({date:(new Date).toISOString(),schedule:{load_in:{datetime:"",sales_day_id:""},load_out:{datetime:"",sales_day_id:""},open:"",close:"",sales_start:"",sales_end:""},customer:"",season:{name:"",frequency:"",instance:0,total:0}}).then(function(e){console.log(e.key),i.selectedRecord=r(firebase.database().ref().child("sales_days").child(e.key)),console.log(i.selectedRecord)}).catch(function(e){console.log("error",e)})},i.generateSalesDays=function(){var e;(e=i.scheduling_params,new Promise(function(t,s){n.sales_days.compile_batch(e).then(function(e){t(e)}).catch(function(e){s(e)})})).then(function(e){console.log("successfully built",e),i.tempIterations=e,t.$apply()}).catch(function(e){console.log(e)})},i.foramtTime=function(e){console.log("formatting time",e);var t=new Date,s=t.getFullYear(),o=t.getMonth(),r=t.getDate(),a=i.tempTimes[e].split(":"),n=a[1].split(" "),l=parseInt(a[0]),c=n[0];"PM"==n[1]&&(l+=12).toString(),o<10&&(o="0"+o),r<10&&(r="0"+r),l<10&&(l="0"+l),i.scheduling_params.schedule[e]=s+"-"+o+"-"+r+"T"+l+":"+c+":00-07:00"},i.saveSalesDays=function(){i.tempIterations.forEach(function(e){i.salesdaysList.$add(e).then(function(e){var t=e.key;console.log(t)})})}}function squareTxsController(s,e,t,o,r,a,n){var l=this,c=moment(new Date).subtract(1,"day"),i=n.sqr_locations.list(),d=n.sqr_employees.list();r(firebase.database().ref().child("sales_days"));function u(){var e,t;e=moment(l.selectedDate).hours(23).minutes(59).seconds(59).format(),t=moment(l.selectedDate).format(),n.sqr_txs.full_day(l.selectedLocation.id,t,e).then(function(e){console.log("got a response with",e.length,"records"),l.daystransactions=e,s.$apply()}).catch(function(e){console.log("ERROR",e)}),function(){var e=l.selectedDate.getFullYear(),t=l.selectedDate.getMonth()+1,s=l.selectedDate.getDate();t<10&&(t="0"+t);s<10&&(s="0"+s);var o="/calender/"+e+"/"+e+"-"+t+"-"+s+"/sales_days";l.salesDays=r(firebase.database().ref().child(o))}()}l.salesDays="",l.filteredSalesDays=[],l.selectedLocation={name:"Oregon",id:""},l.selectedDate=new Date(c.format("MM-DD-YYYY")),l.dayHrs=[1,2,3,4,5,6,7,8,9,10,11,12,1,2,3,4,5,6,7,8,9,10,11,12],l.daystransactions=[],e.info("in a square Txs controller",c.format()),l.dayChange=function(e){var t=moment(new Date(l.selectedDate));switch({"-":0,"+":1}[e]){case 0:t.subtract(1,"day");break;case 1:t.add(1,"day")}l.selectedDate=new Date(t.format("MM-DD-YYYY")),u()},l.employeeName=function(s){var o="";return Object.keys(l.sqrEmployees).forEach(function(e){var t=l.sqrEmployees[e].first_name+" "+l.sqrEmployees[e].last_name;l.sqrEmployees[e].id==s&&(o=t)}),o},Promise.all([i,d]).then(function(e){l.sqrLocations=e[0],l.sqrEmployees=e[1],console.log(l.sqrLocations),console.log(l.sqrEmployees),l.sqrLocations.forEach(function(e){e.name==l.selectedLocation.name&&(l.selectedLocation.id=e.id)}),u()}).catch(function(e){console.log("error",e)})}function txsBlockController(e,t,s,r){var a=this,o=moment(new Date).subtract(1,"day"),n="calender/"+o.year()+"/"+o.format("YYYY-MM-DD")+"/sales_days";a.selectedDate=new Date(o.format()),a.txBlocks=["test","test","test"],a.cmes=r(firebase.database().ref().child(n)),console.log("txsBlockController"),a.dateUpdate=function(e){var t=(e=moment(new Date(e))).year(),s=e.format("YYYY-MM-DD"),o="calender/"+t+"/"+s+"/sales_days";console.log("updating date",s),a.cmes=r(firebase.database().ref().child(o))}}function dataService(i){return{sqr_locations:{list:function(){var e={};return console.log("getting locations list"),new Promise(function(t,s){i({method:"POST",url:"/squarepos/locations",headers:{"Content-Type":"application/json"},data:e}).then(function(e){t(e.data)},function(e){s(e)})})}},sqr_employees:{list:function(e,t,s,o,r,a,n,l){var c={status:e,external_id:t,limit:s,order:o,begin_updated_at:r,end_updated_at:a,begin_created_at:n,end_created_at:l};return console.log("getting employees list"),new Promise(function(t,s){i({method:"POST",url:"/squarepos/employees",headers:{"Content-Type":"application/json"},data:c}).then(function(e){t(e.data)},function(e){s(e)})})}},sqr_txs:{full_day:function(e,t,s){var o={location:e,start:t,end:s};return console.log("getting day's Transactions"),new Promise(function(t,s){i({method:"POST",url:"/squarepos/txs",headers:{"Content-Type":"application/json"},data:o}).then(function(e){t(e.data)},function(e){s(e)})})}},sales_days:{compile_batch:function(e){return new Promise(function(t,s){i({method:"POST",url:"/api/sales_days/compile_new_sales_days_batch",headers:{"Content-Type":"application/json"},data:e}).then(function(e){t(e.data)},function(e){s(e)})})}}}}function firebaseService(e,r,t){return{get:{customer_list:function(){return new Promise(function(e,t){})},a_record:function(o){return new Promise(function(t,s){var e=r(firebase.database().ref().child(o));e.$loaded().then(function(e){t(e)}).catch(function(e){s(e)})})}},authUser:{email:function(e,s){return console.log("authenticating user"),new Promise(function(t,o){firebase.auth().signInWithEmailAndPassword(e,s).then(function(e){t(e)}).catch(function(e){var t=e.code,s=e.message;o({code:t,message:s})})})}},compile:{customer_sales_days:function(e){}},test:function(){return"good test from FB Service"}}}function customerList(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/customer-list.directive.htm",replace:!0,scope:{},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(e,t,s,o){}function s(e,t){console.log("in costomer List controller")}return s.$inject=["$scope","$log"],e}function customerSalesDays(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/customer-sales-days.directive.htm",replace:!0,scope:{salesdaysList:"=",salesdaySelected:"="},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(s,e,t,o){s.$watch("vm.salesdaysList",function(e,t){e&&s.loadSaleDays()},!0)}function s(e,t,r){var a=this;a.detailedSalesDaysList=[],console.log("in the customerSalesDaysController"),e.loadSaleDays=function(){var s=[];Object.keys(a.salesdaysList).forEach(function(e){var t,o;s.push((t=a.salesdaysList[e],o="sales_days/"+t,new Promise(function(t,s){r.get.a_record(o).then(function(e){t(e)}).catch(function(e){s(e)})})))}),Promise.all(s).then(function(e){a.detailedSalesDaysList=e}).catch(function(e){console.log("error",e)})},e.salesDaySelected=function(e){a.salesdaySelected=a.detailedSalesDaysList[e].$id},a.addSalesDaysToCal=function(){console.log("addSalesDaysToCal")}}return s.$inject=["$scope","$log","firebaseService"],e}function dateSelector(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/date-selector.directive.htm",replace:!0,scope:{selectedDate:"=",updateDate:"&"},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(e,t,s,o){}function s(e,t){var s=this;console.log("in date selector controller"),s.dayChange=function(e){var t=moment(new Date(s.selectedDate));switch({"-":0,"+":1}[e]){case 0:t.subtract(1,"day");break;case 1:t.add(1,"day")}s.selectedDate=new Date(t.format("MM-DD-YYYY")),s.updateDate({newDate:t.format("MM-DD-YYYY")})}}return s.$inject=["$scope","$log"],e}function loginPassword(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-password.directive.htm",replace:!0,scope:{password:"=",active:"="},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(e,t,s,o){}function s(e,t){}return s.$inject=["$scope","$log"],e}function loginUsername(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/login-username.directive.htm",replace:!0,scope:{username:"=",active:"="},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(e,t,s,o){}function s(e,t){}return s.$inject=["$scope","$log"],e}function salesDayTxs(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/sales-day-transactions.directive.htm",replace:!0,scope:{txsList:"=",salesdaySelected:"="},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(s,e,t,o){s.$watch("vm.salesdaySelected",function(e,t){e&&s.loadSDTxs()},!0)}function s(s,e,o){var r=this;function a(e,t){e+=t;return new Promise(function(t,s){o.get.a_record(e).then(function(e){t(e)}).catch(function(e){s(e)})})}r.promiseList=[],r.detailedTxList=[],console.log("in the salesDayTxsController"),s.loadSDTxs=function(){a("sales_days/",r.salesdaySelected).then(function(t){Object.keys(t.transactions).forEach(function(e){"placeholder"!=t.transactions[e]&&r.promiseList.push(a("transactions/",t.transactions[e]))}),Promise.all(r.promiseList).then(function(e){r.detailedTxList=e,s.$apply()}).catch(function(e){console.log("error",e)})}).catch(function(e){console.log("error",e)})}}return s.$inject=["$scope","$log","firebaseService"],e}function txBlockSalesDaysTable(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/tx-block-sales-days-table.directive.htm",replace:!0,scope:{cmes:"="},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(e,t,s,o){}function s(e,t){console.log("in tx-block sales days table controller")}return s.$inject=["$scope","$log"],e}function txBlockTable(){t.$inject=["scope","el","attr","ctrl"];var e={restrict:"AECM",templateUrl:"views/directives/tx-block-table.directive.htm",replace:!0,scope:{txBlocks:"="},link:t,controller:s,controllerAs:"vm",bindToController:!0};function t(e,t,s,o){}function s(e,t){console.log("in tx-block table controller")}return s.$inject=["$scope","$log"],e}function config(e,t){t.hashPrefix(""),e.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/customers",{templateUrl:"views/customersPage.htm",controller:"customersController",controllerAs:"vm",resolve:{customerList:customerList}}).when("/customers/:customerid",{templateUrl:"views/aCustomersPage.htm",controller:"aCustomersController",controllerAs:"vm",resolve:{customerList:customerList}}).when("/salesdays",{templateUrl:"views/salesDaysPage.htm",controller:"salesDaysController",controllerAs:"vm"}).when("/salesdays/:salesdayid",{templateUrl:"views/aSalesdayPage.htm",controller:"aSalesdayController",controllerAs:"vm"}).when("/cash_drawer_assignments",{templateUrl:"views/cashDrawerAssignmentsPage.htm",controller:"cashDrawerAssignmentsController",controllerAs:"vm"}).when("/square_txs",{templateUrl:"views/squareTxsPage.htm",controller:"squareTxsController",controllerAs:"vm"}).when("/tx_blocks",{templateUrl:"views/txsBlockPage.htm",controller:"txsBlockController",controllerAs:"vm"}).when("/login",{templateUrl:"views/loginPage.htm",controller:"loginController",controllerAs:"vm"}).when("/cme_schedule",{templateUrl:"views/cmeSchedulingPage.htm",controller:"cmeScheduleController",controllerAs:"vm"}).otherwise({redirectTo:"/"})}function customerList(){return new Promise(function(e,t){e("good test")})}angular.module("cne").controller("aCustomersController",aCustomersController),aCustomersController.$inject=["$scope","$log","$routeParams","$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").controller("aSalesdayController",aSalesdayController),aSalesdayController.$inject=["$scope","$log","$routeParams","$firebaseObject"],angular.module("cne").controller("cashDrawerAssignmentsController",cashDrawerAssignmentsController),cashDrawerAssignmentsController.$inject=["$scope","$log","$firebase","$firebaseObject","$firebaseArray","dataService"],angular.module("cne").controller("cmeScheduleController",cmeScheduleController),cmeScheduleController.$inject=["$scope","$log","$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").controller("customersController",customersController),customersController.$inject=["$scope","$log","$location","customerList","firebaseService","$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").controller("landingController",landingController),landingController.$inject=["$scope","$log"],angular.module("cne").controller("loginController",loginController),loginController.$inject=["$scope","$log","firebaseService"],angular.module("cne").controller("salesDaysController",salesDaysController),salesDaysController.$inject=["$scope","$log","$firebase","$firebaseArray","$firebaseObject","$http","dataService"],angular.module("cne").controller("squareTxsController",squareTxsController),squareTxsController.$inject=["$scope","$log","$routeParams","$firebase","$firebaseObject","$firebaseArray","dataService"],angular.module("cne").controller("txsBlockController",txsBlockController),txsBlockController.$inject=["$scope","$log","$firebase","$firebaseArray"],angular.module("cne").factory("dataService",dataService),dataService.$inject=["$http"],angular.module("cne").factory("firebaseService",firebaseService),firebaseService.$inject=["$firebase","$firebaseObject","$firebaseArray"],angular.module("cne").directive("customerList",customerList),angular.module("cne").directive("customerSalesDays",customerSalesDays),angular.module("cne").directive("dateSelector",dateSelector),angular.module("cne").directive("loginPassword",loginPassword),angular.module("cne").directive("loginUsername",loginUsername),angular.module("cne").directive("salesDayTxs",salesDayTxs),angular.module("cne").directive("txBlockSalesDaysTable",txBlockSalesDaysTable),angular.module("cne").directive("txBlockTable",txBlockTable),angular.module("cne").config(config);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMvd2ViYXBwLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9hLWN1c3RvbWVyLWNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL2Etc2FsZXNkYXktY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvY2FzaC1kcmF3ZXItYXNzaWdubWVudHMtY29udHJvbGxlci5qcyIsInNjcmlwdHMvY29udHJvbGxlcnMvY21lLXNjaGVkdWxlLWNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL2N1c3RvbWVycy1jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9sYW5kaW5nLWNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL2xvZ2luLWNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL3NhbGVzZGF5cy1jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9zcXVhcmUtdHhzLWNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL3R4cy1ibG9jay1jb250cm9sbGVyLmpzIiwic2NyaXB0cy9mYWN0b3JpZXMvZGF0YS5zZXJ2aWNlLmpzIiwic2NyaXB0cy9mYWN0b3JpZXMvZmlyZWJhc2Uuc2VydmljZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9jdXN0b21lci1saXN0LmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2N1c3RvbWVyLXNhbGVzLWRheXMuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2RhdGUtc2VsZWN0b3IuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2xvZ2luLXBhc3N3b3JkLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9sb2dpbi11c2VybmFtZS5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvc2FsZXMtZGF5LXRyYW5zYWN0aW9ucy5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvdHgtYmxvY2stc2FsZXMtZGF5cy10YWJsZS5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvdHgtYmxvY2stdGFibGUuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9yb3V0ZXMvcm91dGVzLWNvbmZpZy5qcyJdLCJuYW1lcyI6WyJhaE51dHMiLCJhbmd1bGFyIiwibW9kdWxlIiwiYUN1c3RvbWVyc0NvbnRyb2xsZXIiLCIkc2NvcGUiLCIkbG9nIiwiJHJvdXRlUGFyYW1zIiwiJGZpcmViYXNlIiwiJGZpcmViYXNlT2JqZWN0IiwiJGZpcmViYXNlQXJyYXkiLCJ2bSIsInRoaXMiLCJjdXN0b21lcklkIiwiY3VzdG9tZXJpZCIsImN1c3RvbWVyUHJvZmlsZSIsImZpcmViYXNlIiwiZGF0YWJhc2UiLCJyZWYiLCJjaGlsZCIsInRlbXBTYWxlc0RheXMiLCJzZWxlY3RlZCIsInNlYXNvbl9pZCIsImluZm8iLCJzZWxlY3RTZWFzb24iLCJpZCIsImNvbnNvbGUiLCJsb2ciLCJnZW5lcmF0ZVNhbGVzRGF5c0xpc3QiLCJzdGFydCIsInNlYXNvbnMiLCJzdGFydF9kYXRlIiwiZW5kIiwiZW5kX2RhdGUiLCJyZXBlYXRPYmplY3QiLCJyZXBlYXRzIiwicmVwZWF0T24iLCJyZXBlYXRfb24iLCJjb3VudGVyRGF0ZSIsIm1vbWVudCIsImVuZERhdGUiLCJmbGFnIiwiYWRkIiwiMCIsIjEiLCIyIiwiMyIsIjQiLCI1IiwiNiIsImRheSIsInB1c2giLCJpc1NhbWUiLCJzYXZlQ2hhbmdlcyIsIiRzYXZlIiwiYVNhbGVzZGF5Q29udHJvbGxlciIsImRiUGF0aCIsInNhbGVzZGF5aWQiLCJzYWxlc2RheVNlbGVjdGVkIiwiY3VycmVudENNRSIsImNhc2hEcmF3ZXJBc3NpZ25tZW50c0NvbnRyb2xsZXIiLCJkYXRhU2VydmljZSIsImN1cnJlbnRUaW1lIiwiRGF0ZSIsInNxckxvY2F0aW9ucyIsInNxckVtcGxveWVlcyIsInNlYXJjaGxpc3QiLCJ0aW1lcyIsImNhc2hEcmF3ZXJMaXN0IiwiY21lTGlzdCIsInRlc3QiLCJsb2NhdGlvbiIsImNtZVNjaGVkdWxlQ29udHJvbGxlciIsImNhbGVuZGFyRGF5cyIsImN1c3RvbWVyc0NvbnRyb2xsZXIiLCIkbG9jYXRpb24iLCJjdXN0b21lckxpc3QiLCJmaXJlYmFzZVNlcnZpY2UiLCJjdXN0b21lclNhbGVzRGF5cyIsInNlbGVjdGVkQ3VzdG9tZXIiLCIyMDE4IiwidGVzdExpc3QiLCJzdGF0ZSIsImN1c3RvbWVyIiwiJGluZGV4IiwiJGlkIiwic2FsZXNkYXkiLCJzZWxlY3RDdXN0b21lciIsImluZGV4X2lkIiwiY29tcGlsZSIsImN1c3RvbWVyX3NhbGVzX2RheXMiLCJ1cGRhdGVDdXN0b21lciIsInRoZW4iLCJzIiwiY2F0Y2giLCJlIiwiY2hhbmdlUmVjb3JkIiwic2VsZWN0IiwicHJldiIsIm5leHQiLCJnZW5lcmF0ZV9idWxrX3NhbGVzZGF5cyIsInNhbGVzX2RheXMiLCJjaGFuZ2VQYWdlIiwicGFnZVBhdGgiLCJwYXRoIiwibGFuZGluZ0NvbnRyb2xsZXIiLCJsb2dpbkNvbnRyb2xsZXIiLCJjcmVkZW50aWFscyIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJhY3RpdmUiLCJzdWJtaXRDcmVkcyIsInBhc3MiLCJhdXRoVXNlciIsImVtYWlsIiwic2FsZXNEYXlzQ29udHJvbGxlciIsIiRodHRwIiwic2FsZXNkYXlzTGlzdCIsInNlbGVjdGVkUmVjb3JkIiwidGVzdEN1c3RvbWVycyIsInRlc3RTZWFzb25zIiwidGVzdFRpbWVzIiwic2NoZWR1bGluZ19wYXJhbXMiLCJjdXN0b21lcl9pZCIsInNlYXNvbiIsImJvb2tlbmRfZGF0ZXMiLCJmaXJzdCIsImxhc3QiLCJldmVudF9kYXlzIiwiTW9uIiwiVHVlIiwiV2VkIiwiVGh1IiwiRnJpIiwiU2F0IiwiU3VuIiwic2FtZV9kYXlfbG9hZF9pbl9vdXQiLCJzY2hlZHVsZSIsImxvYWRfaW4iLCJsb2FkX291dCIsIm9wZW4iLCJjbG9zZSIsInNhbGVzX3N0YXJ0Iiwic2FsZXNfZW5kIiwidGVtcEl0ZXJhdGlvbnMiLCJ0ZW1wVGltZXMiLCJ1cGRhdGVSZWNvcmQiLCJyZWNvcmRfaWQiLCJhZGRTYWxlc0RheSIsIiRhZGQiLCJkYXRlIiwidG9JU09TdHJpbmciLCJkYXRldGltZSIsInNhbGVzX2RheV9pZCIsIm5hbWUiLCJmcmVxdWVuY3kiLCJpbnN0YW5jZSIsInRvdGFsIiwia2V5IiwiZ2VuZXJhdGVTYWxlc0RheXMiLCJwYXJhbXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNvbXBpbGVfYmF0Y2giLCIkYXBwbHkiLCJmb3JhbXRUaW1lIiwic2VjdGlvbiIsInRvZGF5IiwieWVhciIsImdldEZ1bGxZZWFyIiwibW9udGgiLCJnZXRNb250aCIsImdldERhdGUiLCJ0aW1lU3BsaXQiLCJzcGxpdCIsIm1pblNwbGl0IiwiaG91ciIsInBhcnNlSW50IiwibWludXRlIiwidG9TdHJpbmciLCJzYXZlU2FsZXNEYXlzIiwiZm9yRWFjaCIsImNtZV9pdGVyYXRpb24iLCJzcXVhcmVUeHNDb250cm9sbGVyIiwieWVzdGVyZGF5Iiwic3VidHJhY3QiLCJzcXJfbG9jYXRpb25zIiwibGlzdCIsInNxcl9lbXBsb3llZXMiLCJzeW5jTGlzdHMiLCJlbmRPZkRheSIsInN0YXJ0T2ZEYXkiLCJzZWxlY3RlZERhdGUiLCJob3VycyIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwiZm9ybWF0Iiwic3FyX3R4cyIsImZ1bGxfZGF5Iiwic2VsZWN0ZWRMb2NhdGlvbiIsImxlbmd0aCIsImRheXN0cmFuc2FjdGlvbnMiLCJzYWxlc0RheXMiLCJ1cGRhdGVTYWxlZGF5c0xpc3QiLCJmaWx0ZXJlZFNhbGVzRGF5cyIsImRheUhycyIsImRheUNoYW5nZSIsImRpcmVjdGlvbiIsImN1cnJlbnREYXRlIiwiLSIsIisiLCJlbXBsb3llZU5hbWUiLCJlbXBsb3llZV9pZCIsImVtcGxveWVlX25hbWUiLCJPYmplY3QiLCJrZXlzIiwibmV3TmFtZSIsImZpcnN0X25hbWUiLCJsYXN0X25hbWUiLCJhbGwiLCJ0eHNCbG9ja0NvbnRyb2xsZXIiLCJjbWVzUGF0aCIsInR4QmxvY2tzIiwiY21lcyIsImRhdGVVcGRhdGUiLCJuZXdEYXRlIiwibmV3WWVhciIsInBhdGhEYXRlIiwibmV3Q21lc1BhdGgiLCJwb3N0T2JqZWN0IiwibWV0aG9kIiwidXJsIiwiaGVhZGVycyIsIkNvbnRlbnQtVHlwZSIsImRhdGEiLCJyZXNwb25zZSIsImVycm9yIiwic3RhdHVzIiwiZXh0ZXJuYWxfaWQiLCJsaW1pdCIsIm9yZGVyIiwiYmVnaW5fdXBkYXRlZF9hdCIsImVuZF91cGRhdGVkX2F0IiwiYmVnaW5fY3JlYXRlZF9hdCIsImVuZF9jcmVhdGVkX2F0Iiwic3RhcnREYXRlIiwiZ2V0IiwiY3VzdG9tZXJfbGlzdCIsImFfcmVjb3JkIiwiZGVzaXJlZFJlY29yZCIsIiRsb2FkZWQiLCJhdXRoIiwic2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQiLCJlcnJvckNvZGUiLCJjb2RlIiwiZXJyb3JNZXNzYWdlIiwibWVzc2FnZSIsImRpcmVjdGl2ZSIsInJlc3RyaWN0IiwidGVtcGxhdGVVcmwiLCJyZXBsYWNlIiwic2NvcGUiLCJsaW5rIiwibGlua0Z1bmMiLCJjb250cm9sbGVyIiwiY3VzdG9tZXJMaXN0Q29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsImJpbmRUb0NvbnRyb2xsZXIiLCJlbCIsImF0dHIiLCJjdHJsIiwiJGluamVjdCIsImN1c3RvbWVyU2FsZXNEYXlzQ29udHJvbGxlciIsIiR3YXRjaCIsIm5ld1ZhbHVlIiwib2xkVmFsdWUiLCJsb2FkU2FsZURheXMiLCJkZXRhaWxlZFNhbGVzRGF5c0xpc3QiLCJhbGxQcm9taXNlcyIsInNhbGVzRGF5U2VsZWN0ZWQiLCJpbmRleCIsImFkZFNhbGVzRGF5c1RvQ2FsIiwiZGF0ZVNlbGVjdG9yIiwidXBkYXRlRGF0ZSIsImRhdGVTZWxlY3RvckNvbnRyb2xsZXIiLCJzZWxmIiwibG9naW5QYXNzd29yZCIsImxvZ2luUGFzc3dvcmRDb250cm9sbGVyIiwibG9naW5Vc2VybmFtZSIsImxvZ2luVXNlcm5hbWVDb250cm9sbGVyIiwic2FsZXNEYXlUeHMiLCJ0eHNMaXN0Iiwic2FsZXNEYXlUeHNDb250cm9sbGVyIiwibG9hZFNEVHhzIiwibG9hZEFSY3JkIiwicHJvbWlzZUxpc3QiLCJkZXRhaWxlZFR4TGlzdCIsImRldGFpbGVkRGF5IiwidHJhbnNhY3Rpb25zIiwidHhCbG9ja1NhbGVzRGF5c1RhYmxlIiwidHhCbG9ja1NhbGVzRGF5c1RhYmxlQ29udHJvbGxlciIsInR4QmxvY2tUYWJsZSIsInR4QmxvY2tUYWJsZUNvbnRyb2xsZXIiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIiRsb2NhdGlvblByb3ZpZGVyIiwiaGFzaFByZWZpeCIsIndoZW4iLCJvdGhlcndpc2UiLCJyZWRpcmVjdFRvIiwiZmFjdG9yeSJdLCJtYXBwaW5ncyI6InNEQUNBLElBQUFBLE9BQUFDLFFBQUFDLE9BQUEsTUFBQSxDQUFBLFVBQUEsV0FBQSxlQ01BLFNBQUFDLHFCQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUdBLElBQUFDLEVBQUFDLEtBQ0FDLEVBQUFOLEVBQUFPLFdBR0FILEVBQUFJLGdCQUFBTixFQUFBTyxTQUFBQyxXQUFBQyxNQUFBQyxNQUFBLGFBQUFBLE1BQUFOLElBQ0FGLEVBQUFTLGNBQUEsR0FDQVQsRUFBQVUsU0FBQSxDQUNBQyxVQUFBLElBSUFoQixFQUFBaUIsS0FBQSw0QkFXQVosRUFBQWEsYUFBQSxTQUFBQyxHQUNBZCxFQUFBVSxTQUFBQyxVQUFBRyxFQUNBQyxRQUFBQyxJQUFBLEtBQUFoQixFQUFBVSxTQUFBQyxZQUlBWCxFQUFBaUIsc0JBQUEsV0FDQSxJQUFBQyxFQUFBbEIsRUFBQUksZ0JBQUFlLFFBQUFuQixFQUFBVSxTQUFBQyxXQUFBUyxXQUNBQyxFQUFBckIsRUFBQUksZ0JBQUFlLFFBQUFuQixFQUFBVSxTQUFBQyxXQUFBVyxTQUNBQyxFQUFBdkIsRUFBQUksZ0JBQUFlLFFBQUFuQixFQUFBVSxTQUFBQyxXQUFBYSxRQUNBQyxFQUFBekIsRUFBQUksZ0JBQUFl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LFVBQUEsd0JBQUEwQyx1QkNGQTFTLFFBQ0FDLE9BQUEsT0FDQStQLFVBQUEsZUFBQTRDLGNDSEE1UyxRQUNBQyxPQUFBLE9BQ0E2UyxPQUFBQSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNT0RVTEVcbnZhciBhaE51dHMgPSBhbmd1bGFyLm1vZHVsZSgnY25lJywgWyduZ1JvdXRlJywgJ2ZpcmViYXNlJywgJ25nU2FuaXRpemUnXSk7XG4iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnY25lJylcbiAgICAuY29udHJvbGxlcignYUN1c3RvbWVyc0NvbnRyb2xsZXInLCBhQ3VzdG9tZXJzQ29udHJvbGxlcik7XG5cbmFDdXN0b21lcnNDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsJyRsb2cnLCAnJHJvdXRlUGFyYW1zJywgJyRmaXJlYmFzZScsICckZmlyZWJhc2VPYmplY3QnLCAnJGZpcmViYXNlQXJyYXknXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBhQ3VzdG9tZXJzQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRyb3V0ZVBhcmFtcywgJGZpcmViYXNlLCAkZmlyZWJhc2VPYmplY3QsICRmaXJlYmFzZUFycmF5KSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXHR2YXIgY3VzdG9tZXJJZCA9ICRyb3V0ZVBhcmFtcy5jdXN0b21lcmlkO1xuXHRcblx0Ly92aWV3IG1vZGVsIHZhcmlhYmxlc1xuXHR2bS5jdXN0b21lclByb2ZpbGUgPSAkZmlyZWJhc2VPYmplY3QoZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoKS5jaGlsZCgnY3VzdG9tZXJzJykuY2hpbGQoY3VzdG9tZXJJZCkpO1xuXHR2bS50ZW1wU2FsZXNEYXlzID0gW107XG5cdHZtLnNlbGVjdGVkID0ge1xuXHRcdHNlYXNvbl9pZDogXCJcIlxuXHR9O1xuXG5cdC8vbm90aWZ5IHByb2dyZXNzXG5cdCRsb2cuaW5mbygnaW4gYSBjdXN0b21lciBjb250cm9sbGVyJyk7XHQvL1RPRE86IFRBS0UgVEhJUyBPVVQgTEFURVJcblxuXHQvL2RlZmluZSBsb2NhbCBmdW5jdGlvbnNcblx0ZnVuY3Rpb24gaXNDbWVEYXkoY291bnRlckRhdGUsIHJlcGVhdE9iamVjdCwgcmVwZWF0T24pIHtcblx0XHR2YXIgZGF5SGFzaCA9IHtcIjBcIjogXCJzdW5cIiwgXCIxXCI6IFwibW9uXCIsIFwiMlwiOiBcInR1ZVwiLFwiM1wiOiBcIndlZFwiLCBcIjRcIjogXCJ0aHVcIiwgXCI1XCI6IFwiZnJpXCIsIFwiNlwiOiBcInNhdFwifVxuXHRcdHZhciB3a2RheSA9IGRheUhhc2hbY291bnRlckRhdGUuZGF5KCldO1xuXHRcdC8vY29uc29sZS5sb2cocmVwZWF0T24sIGNvdW50ZXJEYXRlLmRheSgpKTtcblx0XHRyZXR1cm4gcmVwZWF0T25bd2tkYXldO1xuXHR9O1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgZnVuY2l0b25zXG5cdHZtLnNlbGVjdFNlYXNvbiA9IGZ1bmN0aW9uKGlkKSB7XG5cdFx0dm0uc2VsZWN0ZWQuc2Vhc29uX2lkID0gaWQ7XG5cdFx0Y29uc29sZS5sb2coJ2lkJywgdm0uc2VsZWN0ZWQuc2Vhc29uX2lkKTtcblx0fVxuXG5cdC8vXG5cdHZtLmdlbmVyYXRlU2FsZXNEYXlzTGlzdCA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBzdGFydCA9IHZtLmN1c3RvbWVyUHJvZmlsZS5zZWFzb25zW3ZtLnNlbGVjdGVkLnNlYXNvbl9pZF0uc3RhcnRfZGF0ZVxuXHRcdHZhciBlbmQgPSB2bS5jdXN0b21lclByb2ZpbGUuc2Vhc29uc1t2bS5zZWxlY3RlZC5zZWFzb25faWRdLmVuZF9kYXRlXG5cdFx0dmFyIHJlcGVhdE9iamVjdCA9IHZtLmN1c3RvbWVyUHJvZmlsZS5zZWFzb25zW3ZtLnNlbGVjdGVkLnNlYXNvbl9pZF0ucmVwZWF0c1xuXHRcdHZhciByZXBlYXRPbiA9IHZtLmN1c3RvbWVyUHJvZmlsZS5zZWFzb25zW3ZtLnNlbGVjdGVkLnNlYXNvbl9pZF0ucmVwZWF0X29uXG5cdFx0dmFyIGNvdW50ZXJEYXRlID0gbW9tZW50KHN0YXJ0KTtcblx0XHR2YXIgZW5kRGF0ZSA9IG1vbWVudChlbmQpO1xuXG5cdFx0Y29uc29sZS5sb2coJ3RyeWluZyB0byBnZW5lcmF0ZScsIHN0YXJ0LCBlbmQsIHJlcGVhdE9iamVjdCwgcmVwZWF0T24pO1xuXHRcdFxuXHRcdC8vY2hlY2sgdmFsdWVzXG5cdFx0aWYoXHQgc3RhcnQgIT0gXCJcIiAmJlxuXHRcdFx0IGVuZCAhPSBcIlwiICYmXG5cdFx0XHQgcmVwZWF0T2JqZWN0ICE9IFwiXCIgJiZcblx0XHRcdCByZXBlYXRPbiAhPSBcIlwiKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnZ29vZCB2YWx1ZXMnLCBjb3VudGVyRGF0ZSk7XG5cblx0XHRcdHZhciBmbGFnID0gZmFsc2U7XG5cblx0XHRcdC8vaXRlcmF0ZSB0aHJvdWdoIGFsbCB0aGUgZGF5cyBiZXR3ZWVuIHN0YXJ0IGFuZCBlbmRcblx0XHRcdHdoaWxlKCFmbGFnKSB7XG5cblx0XHRcdFx0Ly9pbmNyaW1lbnQgdGhlIGNvdXRuZXJcblx0XHRcdFx0Y291bnRlckRhdGUgPSBjb3VudGVyRGF0ZS5hZGQoMSwgXCJkYXlcIik7XG5cblx0XHRcdFx0Ly9jb25zb2xlLmxvZyhjb3VudGVyRGF0ZS5mb3JtYXQoKSk7XG5cblx0XHRcdFx0aWYoaXNDbWVEYXkoY291bnRlckRhdGUsIHJlcGVhdE9iamVjdCwgcmVwZWF0T24pKSB7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gYWRkIHNhbGVzIGRheVxuXHRcdFx0XHRcdHZtLnRlbXBTYWxlc0RheXMucHVzaCgxKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vY2hlY2sgZm9yIG1hdGNoXG5cdFx0XHRcdGlmKG1vbWVudChjb3VudGVyRGF0ZSkuaXNTYW1lKGVuZERhdGUpKSBmbGFnID0gdHJ1ZVxuXHRcdFx0XHRcblx0XHRcdH1cblxuXHRcdFx0Y29uc29sZS5sb2codm0udGVtcFNhbGVzRGF5cyk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc29sZS5sb2coJ21pc3NpbmcgdmFsdWVzJyk7XG5cdFx0fVxuXHR9XG5cblx0dm0uc2F2ZUNoYW5nZXMgPSBmdW5jdGlvbigpIHsgdm0uY3VzdG9tZXJQcm9maWxlLiRzYXZlKCk7IGNvbnNvbGUubG9nKCdzYXZlZCBjaGFuZ2UnKTsgfVxuXHQvL3J1biB0aGUgdGVzdFxuXG5cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnY25lJylcbiAgICAuY29udHJvbGxlcignYVNhbGVzZGF5Q29udHJvbGxlcicsIGFTYWxlc2RheUNvbnRyb2xsZXIpO1xuXG5hU2FsZXNkYXlDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsJyRsb2cnLCAnJHJvdXRlUGFyYW1zJywgJyRmaXJlYmFzZU9iamVjdCddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGFTYWxlc2RheUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkcm91dGVQYXJhbXMsICRmaXJlYmFzZU9iamVjdCkge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblx0dmFyIGRiUGF0aCA9ICdzYWxlc19kYXlzLycgKyAkcm91dGVQYXJhbXMuc2FsZXNkYXlpZDtcblx0dm0uc2FsZXNkYXlTZWxlY3RlZCA9ICRyb3V0ZVBhcmFtcy5zYWxlc2RheWlkO1xuXG5cdHZtLmN1cnJlbnRDTUUgPSAkZmlyZWJhc2VPYmplY3QoZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoKS5jaGlsZChkYlBhdGgpKTtcblxuXHQkbG9nLmluZm8oJ2luIGEgc2FsZXNkYXkgY29udHJvbGxlcicpO1x0Ly9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cblx0Ly9kZWZpbmUgbG9jYWwgZnVuY3Rpb25zXG5cblx0Ly9ydW4gdGhlIHRlc3RcblxuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2NuZScpXG4gICAgLmNvbnRyb2xsZXIoJ2Nhc2hEcmF3ZXJBc3NpZ25tZW50c0NvbnRyb2xsZXInLCBjYXNoRHJhd2VyQXNzaWdubWVudHNDb250cm9sbGVyKTtcblxuY2FzaERyYXdlckFzc2lnbm1lbnRzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJywgJyRmaXJlYmFzZScsICckZmlyZWJhc2VPYmplY3QnLCAnJGZpcmViYXNlQXJyYXknLCAnZGF0YVNlcnZpY2UnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjYXNoRHJhd2VyQXNzaWdubWVudHNDb250cm9sbGVyKCRzY29wZSwgJGxvZywgJGZpcmViYXNlLCAkZmlyZWJhc2VPYmplY3QsICRmaXJlYmFzZUFycmF5LCBkYXRhU2VydmljZSkge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblx0dmFyIGN1cnJlbnRUaW1lID0gbmV3IERhdGUoKTtcblxuXHR2bS5zcXJMb2NhdGlvbnMgPSAkZmlyZWJhc2VBcnJheShmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZigpLmNoaWxkKCdyZWZlcmVuY2VfbGlzdHMvc3FyX2xvY2F0aW9ucycpKTtcblx0dm0uc3FyRW1wbG95ZWVzID0gJGZpcmViYXNlQXJyYXkoZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoKS5jaGlsZCgncmVmZXJlbmNlX2xpc3RzL3Nxcl9lbXBsb3llZXMnKSk7XG5cdHZtLnNlYXJjaGxpc3QgPSB7XG5cdFx0dGltZXM6IHsgc3RhcnQ6IGN1cnJlbnRUaW1lLCBlbmQ6IGN1cnJlbnRUaW1lfVxuXHR9XG5cdFxuXHR2bS5jYXNoRHJhd2VyTGlzdCA9ICRmaXJlYmFzZUFycmF5KGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCkuY2hpbGQoJ3Nxcl9jYXNoX2RyYXdlcnMnKSk7XG5cdHZtLmNtZUxpc3QgPSBbe3Rlc3Q6XCJ0ZXN0XCJ9LCB7dGVzdDpcInRlc3RcIn0sIHt0ZXN0OlwidGVzdFwifV07XG5cblx0dm0uc2VsZWN0ZWQgPSB7XG5cdFx0bG9jYXRpb246IFwiT3JlZ29uXCJcblx0fTtcblx0XG5cdC8vbm90aWZ5IGxvY2F0aW9uXG5cdCRsb2cuaW5mbygnaW4gdGhlIGNhc2ggZHJhd2VyIGFzc2lnbm1lbnQgY29udHJvbGxlcicsIGRhdGFTZXJ2aWNlKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXHRcblx0Ly9kZWZpbmUgbG9jYWwgZnVuY3Rpb25zXG5cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnY25lJylcbiAgICAuY29udHJvbGxlcignY21lU2NoZWR1bGVDb250cm9sbGVyJywgY21lU2NoZWR1bGVDb250cm9sbGVyKTtcblxuY21lU2NoZWR1bGVDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsJyRsb2cnLCAnJGZpcmViYXNlJywgJyRmaXJlYmFzZU9iamVjdCcsICckZmlyZWJhc2VBcnJheSddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNtZVNjaGVkdWxlQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRmaXJlYmFzZSwgJGZpcmViYXNlT2JqZWN0LCAkZmlyZWJhc2VBcnJheSkge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblx0dm0uY2FsZW5kYXJEYXlzID0gJGZpcmViYXNlQXJyYXkoZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoKS5jaGlsZCgnY2FsZW5kZXIvMjAxOCcpKTtcblx0JGxvZy5pbmZvKCdpbiB0aGUgQ01FIFNjaGVkdWxlIGNvbnRyb2xsZXInKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXHRcblx0Ly9kZWZpbmUgbG9jYWwgZnVuY3Rpb25zXG5cblx0Ly9ydW4gdGhlIHRlc3RcblxuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2NuZScpXG4gICAgLmNvbnRyb2xsZXIoJ2N1c3RvbWVyc0NvbnRyb2xsZXInLCBjdXN0b21lcnNDb250cm9sbGVyKTtcblxuY3VzdG9tZXJzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCckbG9nJywgJyRsb2NhdGlvbicsICdjdXN0b21lckxpc3QnLCAnZmlyZWJhc2VTZXJ2aWNlJywgJyRmaXJlYmFzZScsICckZmlyZWJhc2VPYmplY3QnLCAnJGZpcmViYXNlQXJyYXknXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjdXN0b21lcnNDb250cm9sbGVyKCRzY29wZSwgJGxvZywgJGxvY2F0aW9uLCBjdXN0b21lckxpc3QsIGZpcmViYXNlU2VydmljZSwgJGZpcmViYXNlLCAkZmlyZWJhc2VPYmplY3QsICRmaXJlYmFzZUFycmF5KSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXHR2bS5jdXN0b21lckxpc3QgPSAkZmlyZWJhc2VBcnJheShmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZigpLmNoaWxkKCdjdXN0b21lcnMnKSk7XG5cdHZtLmN1c3RvbWVyU2FsZXNEYXlzID0gW107XG5cdHZtLnNlbGVjdGVkQ3VzdG9tZXIgPSB7IHNlYXNvbnM6IHsgXCIyMDE4XCI6IHsgaWQ6IDIwMTh9IH0gfTtcblx0dm0udGVzdExpc3QgPSBbJ2EnLCAnYicsICdjJ107IC8vJGZpcmViYXNlQXJyYXkoZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoKS5jaGlsZCgnY3VzdG9tZXJzJykuY2hpbGQoJ2N1c3RvbWVyX2xpc3QnKSk7XG5cdHZtLnN0YXRlID0ge1xuXHRcdHNlbGVjdGVkOiB7XG5cdFx0XHRjdXN0b21lcjoge1xuXHRcdFx0XHQkaW5kZXg6IFwiXCIsXG5cdFx0XHRcdCRpZDogXCJcIlxuXHRcdFx0fSxcblx0XHRcdHNhbGVzZGF5OiB7XG5cdFx0XHRcdCRpbmRleDogXCJ0ZXN0XCIsXG5cdFx0XHRcdCRpZDogXCJ0ZXN0XCJcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Ly9pZGVudGlmeSB3aGVyZSB3ZSBhcmVcblx0JGxvZy5pbmZvKCdpbiB0aGUgY3VzdG9tZXJzIGNvbnRyb2xsZXInKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXHRcblxuXHQvKlxuXHQqXHRMT0NBTCBGVU5DVElPTlMgR08gSEVSRVxuXHQqXG5cdCovXG5cblx0Ly9cdExPQUQgQ1VTVE9NRVIgTElTVFxuXHRmdW5jdGlvbiBsb2FkX2N1c3RvbWVyX2xpc3QoKSB7XG5cdFx0XG5cdFx0Ly90cmFjayBzdGFydGluZyBmdW5jdGlvblxuXHRcdC8vY29uc29sZS5sb2coJ2xvYWRpbmcgdGhlIGN1c3RvbWVyIGxpc3QnKTtcblx0XHRcblx0XHQvL2dhdGhlciB0aGUgZGF0YVxuXHRcdGZpcmViYXNlU2VydmljZS5nZXQuY3VzdG9tZXJfbGlzdCgpLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzKSB7XG5cdFx0XHRcblx0XHRcdC8vY29uc29sZS5sb2coJ2dvdCB0aGlzIHJlc3BvbnMnLCBzKTtcblx0XHRcdFxuXHRcdFx0Ly93aGVuIHRoZSBsaXN0IGhhcyBiZWVuIGxvYWRlZCB1cGRhdGUgdGhlIHZhcmlhYmxlc1xuXHRcdFx0Ly92bS5jdXN0b21lckxpc3QgPSBzO1xuXHRcdFx0dm0uY3VzdG9tZXJMaXN0ID0gJGZpcmViYXNlQXJyYXkoZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoKS5jaGlsZCgnY3VzdG9tZXJzJykuY2hpbGQoJ2N1c3RvbWVyX2xpc3QnKSk7XG5cblx0XHRcdC8vcmVmbGVjdCB0aGUgY2hhbmdlc1xuXHRcdFx0JHNjb3BlLiRhcHBseSgpO1xuXG5cdFx0fSkuY2F0Y2goZnVuY3Rpb24gZXJyb3IoZSkge1xuXHRcdFx0Ly9pZiB0aGVyZSB3YXMgYW4gZXJyb3IgdGhyb3cgdGhlIGVycm9yXG5cdFx0XHRjb25zb2xlLmxvZygnZXJyb3InKTtcblx0XHR9KTtcblx0fTtcblxuXHQvKlxuXHQqXHRWSUVXIE1PREVMIEZVTkNUSU9OUyBHTyBIRVJFXG5cdCpcblx0Ki9cdFxuXHQvL1x0U0VMRUNUIENMSUNLRUQgQ1VTVE9NRVJcblx0dm0uc2VsZWN0Q3VzdG9tZXIgPSBmdW5jdGlvbihpbmRleF9pZCkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZtLnN0YXRlLnNlbGVjdGVkLmN1c3RvbWVyLiRpbmRleCA9IGluZGV4X2lkO1xuXHRcdHZtLnN0YXRlLnNlbGVjdGVkLmN1c3RvbWVyLiRpZCA9IHZtLmN1c3RvbWVyTGlzdFtpbmRleF9pZF0uJGlkO1xuXHRcdHZtLnNlbGVjdGVkQ3VzdG9tZXIgPSAkZmlyZWJhc2VPYmplY3QoZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoKS5jaGlsZCgnY3VzdG9tZXJzJykuY2hpbGQodm0uY3VzdG9tZXJMaXN0W2luZGV4X2lkXS4kaWQpKTtcblx0XHR2bS5jdXN0b21lclNhbGVzRGF5cyA9IGZpcmViYXNlU2VydmljZS5jb21waWxlLmN1c3RvbWVyX3NhbGVzX2RheXModm0uc3RhdGUuc2VsZWN0ZWQuY3VzdG9tZXIuJGlkKTtcblx0fTtcblxuXHQvL1x0VVBEQVRFIFRIRSBDVVNUT01FUiBSRUNPUkRcblx0dm0udXBkYXRlQ3VzdG9tZXIgPSBmdW5jdGlvbigpIHtcblx0XHR2bS5zZWxlY3RlZEN1c3RvbWVyLiRzYXZlKCkudGhlbihmdW5jdGlvbiBzdWNjZXMocykge1xuXHRcdFx0Y29uc29sZS5sb2coJ3VwZGF0ZWQgcmVjb3JkIHN1Y2Nlc3NmdWxseScpO1xuXHRcdH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdlcnJvciB1cGRhdGluZyByZWNvcmQnLCBlKTtcblx0XHR9KTtcblx0fTtcblxuXHQvL1x0TU9WRSBUTyBUSEUgTkVYVCBDVVNUT01FUlxuXHR2bS5jaGFuZ2VSZWNvcmQgPSBmdW5jdGlvbihzZWxlY3QpIHtcblx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgb3B0biA9IHsgXCJwcmV2XCI6IDAsIFwibmV4dFwiOiAxIH07XG5cdFx0dmFyIGluZGV4X2lkID0gdm0uc3RhdGUuc2VsZWN0ZWQuY3VzdG9tZXIuJGluZGV4O1xuXG5cdFx0Ly9jb25zb2xlLmxvZyhpbmRleF9pZCk7XG5cblx0XHRzd2l0Y2gob3B0bltzZWxlY3RdKSB7XG5cdFx0XHRjYXNlIDA6XG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ3ByZXZpb3VzIHJlY29yZCcpO1xuXHRcdFx0XHR2bS5zZWxlY3RDdXN0b21lcih2bS5zdGF0ZS5zZWxlY3RlZC5jdXN0b21lci4kaW5kZXggLSAxKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDE6XG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ25leHQgcmVjb3JkJyk7XG5cdFx0XHRcdHZtLnNlbGVjdEN1c3RvbWVyKHZtLnN0YXRlLnNlbGVjdGVkLmN1c3RvbWVyLiRpbmRleCArIDEpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fTtcblxuXHQvL1x0R0VORVJBVEUgQlVMSyBTQUxFUyBEQVlTXG5cdHZtLmdlbmVyYXRlX2J1bGtfc2FsZXNkYXlzID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0Y29uc29sZS5sb2coJ2dlbmVyYXRpbmcgYnVsayBzYWxlc2RheXMnLCB2bS5zZWxlY3RlZEN1c3RvbWVyLnNhbGVzX2RheXMpO1xuXHRcdFxuXHR9O1xuXG5cdHZtLmNoYW5nZVBhZ2UgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgcGFnZVBhdGggPSAnL2N1c3RvbWVycy8nICsgdm0uc3RhdGUuc2VsZWN0ZWQuY3VzdG9tZXIuJGlkO1xuXHRcdGNvbnNvbGUubG9nKCdyZWRpcmVjdGluZyB0bycsIHBhZ2VQYXRoKTtcblx0XHQkbG9jYXRpb24ucGF0aChwYWdlUGF0aCk7XG5cdFx0Ly8kc2NvcGUuJGFwcGx5KCk7XG5cdH1cblxuXHQvL3J1biB0aGUgdGVzdFxuXG5cdC8vb24gcGFnZSBsb2FkXG5cdC8vbG9hZF9jdXN0b21lcl9saXN0KCk7XG5cblxufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdjbmUnKVxuICAgIC5jb250cm9sbGVyKCdsYW5kaW5nQ29udHJvbGxlcicsIGxhbmRpbmdDb250cm9sbGVyKTtcblxubGFuZGluZ0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywnJGxvZyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGxhbmRpbmdDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblxuXHQkbG9nLmluZm8oJ2luIHRoZSBsYW5kaW5nIGNvbnRyb2xsZXInKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cdC8vZGVmaW5lIGxvY2FsIGZ1bmN0aW9uc1xuXG5cdC8vcnVuIHRoZSB0ZXN0XG5cblxufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdjbmUnKVxuICAgIC5jb250cm9sbGVyKCdsb2dpbkNvbnRyb2xsZXInLCBsb2dpbkNvbnRyb2xsZXIpO1xuXG5sb2dpbkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywnJGxvZycsICdmaXJlYmFzZVNlcnZpY2UnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsb2dpbkNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCBmaXJlYmFzZVNlcnZpY2UpIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZXNcblx0dm0uY3JlZGVudGlhbHMgPSB7XG5cdFx0dXNlcm5hbWU6IFwiXCIsXG5cdFx0cGFzc3dvcmQ6IFwiXCJcblx0fTtcblxuXHR2bS5hY3RpdmUgPSB7XG5cdFx0dXNlcm5hbWU6IGZhbHNlLFxuXHRcdHBhc3N3b3JkOiBmYWxzZVxuXHR9O1xuXG5cdC8vZGVmaW5lIHZpZXcgbW9kZWwgZnVuY3Rpb25zXG5cdHZtLnN1Ym1pdENyZWRzID0gZnVuY3Rpb24odXNlcm5hbWUsIHBhc3MpIHtcblx0XHRcblx0XHRjb25zb2xlLmxvZygnc3VibWl0Q3JlZHMgY2xpY2tlZCcpO1xuXHRcdFxuXHRcdC8vc3VibWl0IGNyZWRlbnRpYWxzXG5cdFx0ZmlyZWJhc2VTZXJ2aWNlLmF1dGhVc2VyLmVtYWlsKHVzZXJuYW1lLCBwYXNzKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3MgKHMpIHtcblxuXHRcdFx0Y29uc29sZS5sb2coJ3dhcyBzdWNjZXNzJywgcyk7XG5cblx0XHR9KS5jYXRjaChmdW5jdGlvbiBlcnJvcihlKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcIkVycm9yOlwiLCBlKTtcblx0XHR9KTtcblxuXHR9O1xuXG5cdCRsb2cuaW5mbygnaW4gdGhlIGxvZ2luIGNvbnRyb2xsZXInKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cdC8vZGVmaW5lIGxvY2FsIGZ1bmN0aW9uc1xuXG5cdC8vcnVuIHRoZSB0ZXN0XG5cblxufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdjbmUnKVxuICAgIC5jb250cm9sbGVyKCdzYWxlc0RheXNDb250cm9sbGVyJywgc2FsZXNEYXlzQ29udHJvbGxlcik7XG5cbnNhbGVzRGF5c0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywnJGxvZycsICckZmlyZWJhc2UnLCAnJGZpcmViYXNlQXJyYXknLCAnJGZpcmViYXNlT2JqZWN0JywgJyRodHRwJywgJ2RhdGFTZXJ2aWNlJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc2FsZXNEYXlzQ29udHJvbGxlcigkc2NvcGUsICRsb2csICRmaXJlYmFzZSwgJGZpcmViYXNlQXJyYXksICRmaXJlYmFzZU9iamVjdCwgJGh0dHAsIGRhdGFTZXJ2aWNlKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXHQvKnZhciBpdGVyYXRpb24gPSB7XG5cdFx0ZGF0ZTogXCIyMDE4LTA1LTA1VDA2OjAwOjAwWlwiLFxuXHRcdHdrX2RheTogXCJTYXRcIixcblx0XHRpZDogXCJiZWF2ZXJ0b25fZm1fMDAxXCIsXG5cdFx0c2NoZWR1bGU6IHtcblx0XHRcdGxvYWRfaW46IFwiXCIsXG5cdFx0XHRsb2FkX291dDogXCJcIixcblx0XHRcdG9wZW46IFwiODowMCBBTVwiLFxuXHRcdFx0Y2xvc2U6IFwiMTozMCBQTVwiLFxuXHRcdFx0c2FsZXNfc3RhcnQ6IFwiXCIsXG5cdFx0XHRzYWxlc19lbmQ6IFwiXCJcblx0XHR9XG5cdH07Ki9cblx0dm0uc2FsZXNkYXlzTGlzdCA9ICRmaXJlYmFzZUFycmF5KGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCkuY2hpbGQoJ3NhbGVzX2RheXMnKSk7XG5cdHZtLnNlbGVjdGVkUmVjb3JkID0geyBpZDogXCIyMDM5NzUyXCIgfTtcblx0dm0udGVzdEN1c3RvbWVycyA9IFsgXCJCZWF2ZXJ0b25cIiwgXCJPcmVuY29cIiBdO1xuXHR2bS50ZXN0U2Vhc29ucyA9IFsgJzIwMTgnLCAnMjAxNycgXTtcblx0Ly92bS5yZXBlYXRzID0gWyAnbmV2ZXInLCBcImV2ZXJ5IHdlZWtcIiwgXCJldmVyeSAyIHdlZWtzXCIsIFwiZXZlcnkgMyB3ZWVrc1wiLCBcImV2ZXJ5XzRfd2Vla3NcIiwgXCJldmVyeV81X3dlZWtzXCIsIFwiZXZlcnlfNl93ZWVrc1wiLCBcImV2ZXJ5Xzdfd2Vla3NcIiwgXCJldmVyeV84X3dlZWtzXCIgXTtcblx0dm0udGVzdFRpbWVzID0gWyAnOTowMCBBTScsJzk6MTUgQU0nLCc5OjMwIEFNJywnOTo0NSBBTScgIF07XG5cdHZtLnNjaGVkdWxpbmdfcGFyYW1zID0ge1xuXHRcdGN1c3RvbWVyOiBcIlwiLFxuXHRcdGN1c3RvbWVyX2lkOiBcIlwiLFxuXHRcdHNlYXNvbjogXCJcIixcblx0XHRib29rZW5kX2RhdGVzOiB7XG5cdFx0XHRmaXJzdDogXCJcIixcblx0XHRcdGxhc3Q6IFwiXCJcblx0XHR9LFxuXHRcdHJlcGVhdHM6IFwiXCIsXG5cdFx0ZXZlbnRfZGF5czoge1xuXHRcdFx0TW9uOiBmYWxzZSxcblx0XHRcdFR1ZTogZmFsc2UsXG5cdFx0XHRXZWQ6IGZhbHNlLFxuXHRcdFx0VGh1OiBmYWxzZSxcblx0XHRcdEZyaTogZmFsc2UsXG5cdFx0XHRTYXQ6IGZhbHNlLFxuXHRcdFx0U3VuOiBmYWxzZVxuXHRcdH0sXG5cdFx0c2FtZV9kYXlfbG9hZF9pbl9vdXQ6IHRydWUsXG5cdFx0c2NoZWR1bGU6IHtcblx0XHRcdGxvYWRfaW46IFwiXCIsXG5cdFx0XHRsb2FkX291dDogXCJcIixcblx0XHRcdG9wZW46IFwiXCIsXG5cdFx0XHRjbG9zZTogXCJcIixcblx0XHRcdHNhbGVzX3N0YXJ0OiBcIlwiLFxuXHRcdFx0c2FsZXNfZW5kOiBcIlwiXG5cdFx0fVxuXHR9O1xuXHR2bS50ZW1wSXRlcmF0aW9ucyA9IFtdO1xuXHR2bS50ZW1wVGltZXMgPSB7XG5cdFx0bG9hZF9pbjogXCJcIixcblx0XHRsb2FkX291dDogXCJcIixcblx0XHRvcGVuOiBcIlwiLFxuXHRcdGNsb3NlOiBcIlwiLFxuXHRcdHNhbGVzX3N0YXJ0OiBcIlwiLFxuXHRcdHNhbGVzX2VuZDogXCJcIlxuXHR9XG5cblx0Ly9pZGVudGlmeSBjb250cm9sbGVyXG5cdCRsb2cuaW5mbygnaW4gdGhlIHNhbGVzIGRheXMgY29udHJvbGxlcicpO1x0Ly9UT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cblx0Lypcblx0Klx0TE9DQUwgRlVOQ1RJT05TIEdPIEhFUkVcblx0KlxuXHQqL1xuXHRmdW5jdGlvbiBidWlsZF9zYWxlc19kYXlzX2FycmF5KHBhcmFtcykge1xuXHRcdC8vbG9jYWwgdmFyaWFibGVzXG5cblx0XHQvL2NvbnNvbGUubG9nKCdnb3QgdGhlc2UgcGFyYW1zJywgc3RhcnQsIGVuZCk7XG5cblx0XHQvL3JldHVybiBhc3luYyB3b3JrXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0Ly9hY2Nlc3MgZGF0YSBzZXJ2aWNlXG5cdFx0XHRkYXRhU2VydmljZS5zYWxlc19kYXlzLmNvbXBpbGVfYmF0Y2gocGFyYW1zKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3Mocykge1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdzdWNjZXNzJywgcyk7XG5cdFx0XHRcdHJlc29sdmUocyk7XG5cdFx0XHR9KS5jYXRjaChmdW5jdGlvbiBlcnJvcihlKSB7XG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ2Vycm9yJywgZSk7XG5cdFx0XHRcdHJlamVjdChlKTtcblx0XHRcdH0pO1xuXG5cdFx0fSk7XG5cblx0fTtcblxuXG5cdC8qXG5cdCpcdFZJRVcgTU9ERUwgRlVOQ1RJT05TIEdPIEhFUkVcblx0KlxuXHQqL1xuXHQvL1x0VVBEQVRFIFJFQ09SRFxuXHR2bS51cGRhdGVSZWNvcmQgPSBmdW5jdGlvbihyZWNvcmRfaWQpIHtcblx0XHRjb25zb2xlLmxvZygnZ290IHRoaXMgaWQnLCByZWNvcmRfaWQpO1xuXHRcdC8qdm0uc2FsZXNkYXlzTGlzdC4kc2F2ZShyZWNvcmRfaWQpLnRoZW4oZnVuY3Rpb24gc3VjY2VzKHMpIHtcblx0XHRcdGNvbnNvbGUubG9nKCd1cGRhdGVkIHJlY29yZCBzdWNjZXNzZnVsbHknKTtcblx0XHR9KS5jYXRjaChmdW5jdGlvbiBlcnJvcihlKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnZXJyb3IgdXBkYXRpbmcgcmVjb3JkJywgZSk7XG5cdFx0fSk7Ki9cblx0fTtcblxuXHQvLyBBREQgTkVXIFNBTEVTIERBWVxuXHR2bS5hZGRTYWxlc0RheSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0dm0uc2FsZXNkYXlzTGlzdC4kYWRkKHtcblx0XHRcdGRhdGU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcblx0XHRcdHNjaGVkdWxlOiB7XG5cdFx0XHRcdGxvYWRfaW46IHtcblx0XHRcdFx0XHRkYXRldGltZTogXCJcIixcblx0XHRcdFx0XHRzYWxlc19kYXlfaWQ6IFwiXCJcblx0XHRcdFx0fSxcblx0XHRcdFx0bG9hZF9vdXQ6IHtcblx0XHRcdFx0XHRkYXRldGltZTogXCJcIixcblx0XHRcdFx0XHRzYWxlc19kYXlfaWQ6IFwiXCJcblx0XHRcdFx0fSxcblx0XHRcdFx0b3BlbjogXCJcIixcblx0XHRcdFx0Y2xvc2U6IFwiXCIsXG5cdFx0XHRcdHNhbGVzX3N0YXJ0OiBcIlwiLFxuXHRcdFx0XHRzYWxlc19lbmQ6IFwiXCJcblx0XHRcdH0sXG5cdFx0XHRjdXN0b21lcjogXCJcIixcblx0XHRcdHNlYXNvbjoge1xuXHRcdFx0XHRuYW1lOiBcIlwiLFxuXHRcdFx0XHRmcmVxdWVuY3k6IFwiXCIsXG5cdFx0XHRcdGluc3RhbmNlOiAwLFxuXHRcdFx0XHR0b3RhbDogMFxuXHRcdFx0fVxuXHRcdH0pLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzKSB7XG5cdFx0XHQvL3NldCB0aGUgZmlyZWJhc2Ugb2JqZWN0XG5cdFx0XHRjb25zb2xlLmxvZyhzLmtleSk7XG5cdFx0XHR2bS5zZWxlY3RlZFJlY29yZCA9ICRmaXJlYmFzZU9iamVjdChmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZigpLmNoaWxkKCdzYWxlc19kYXlzJykuY2hpbGQocy5rZXkpKTtcblx0XHRcdGNvbnNvbGUubG9nKHZtLnNlbGVjdGVkUmVjb3JkKTtcblx0XHR9KS5jYXRjaChmdW5jdGlvbiBlcnJvcihlKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnZXJyb3InLCBlKTtcblx0XHR9KTtcblxuXHRcdC8qdm0uc2FsZXNkYXlzTGlzdC5zYXZlKCkudGhlbihmdW5jdGlvbiBzdWNjZXNzKHMpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdzdWNjZXNzJywgcyk7XG5cdFx0fSkuY2F0Y2goZnVuY3Rpb24gZXJyb3IoZSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ2Vycm9yJywgZSk7XG5cdFx0fSk7Ki9cblxuXHR9O1xuXG5cdC8vIEdFTkVSQVRFIFNBTEVTIERBWVNcblx0dm0uZ2VuZXJhdGVTYWxlc0RheXMgPSBmdW5jdGlvbigpIHtcblx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblxuXHRcdC8vbm90aWZ5IG9mIGxvY2F0aW9uXG5cdFx0Ly9jb25zb2xlLmxvZygnZ2VuZXJhdGluZyBTYWxlcyBkYXlzJywgdm0uc2NoZWR1bGluZ19wYXJhbXMpO1xuXG5cdFx0YnVpbGRfc2FsZXNfZGF5c19hcnJheSh2bS5zY2hlZHVsaW5nX3BhcmFtcykudGhlbihmdW5jdGlvbiBzdWNjZXNzKHMpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdzdWNjZXNzZnVsbHkgYnVpbHQnLCBzKTtcblx0XHRcdHZtLnRlbXBJdGVyYXRpb25zID0gcztcblx0XHRcdCRzY29wZS4kYXBwbHkoKTtcblx0XHR9KS5jYXRjaChmdW5jdGlvbiBlcnJvcihlKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhlKTtcblx0XHR9KTtcblxuXHR9O1xuXG5cdC8vXHRGT1JNQVQgVElNRVxuXHR2bS5mb3JhbXRUaW1lID0gZnVuY3Rpb24oc2VjdGlvbikge1xuXHRcdFxuXHRcdC8vbm90aWZ5IG9mIHByb2dyZXNzXG5cdFx0Y29uc29sZS5sb2coJ2Zvcm1hdHRpbmcgdGltZScsIHNlY3Rpb24pO1xuXG5cdFx0Ly9zcGxpdCB0aW1lXG5cdFx0dmFyIHRvZGF5ID0gbmV3IERhdGUoKTtcblx0XHR2YXIgeWVhciA9IHRvZGF5LmdldEZ1bGxZZWFyKCk7XG5cdFx0dmFyIG1vbnRoID0gdG9kYXkuZ2V0TW9udGgoKTtcblx0XHR2YXIgZGF5ID0gdG9kYXkuZ2V0RGF0ZSgpO1xuXHRcdFxuXG5cdFx0dmFyIHRpbWVTcGxpdCA9IHZtLnRlbXBUaW1lc1tzZWN0aW9uXS5zcGxpdChcIjpcIik7XG5cdFx0dmFyIG1pblNwbGl0ID0gdGltZVNwbGl0WzFdLnNwbGl0KFwiIFwiKTtcblx0XHR2YXIgaG91ciA9IHBhcnNlSW50KHRpbWVTcGxpdFswXSk7XG5cdFx0dmFyIG1pbnV0ZSA9IG1pblNwbGl0WzBdO1xuXHRcdHZhciB0aW1lRGF5ID0gbWluU3BsaXRbMV07XG5cblx0XHQvL2Zvcm1hdCBhY2NvcmRpbmdseVxuXHRcdGlmKHRpbWVEYXkgPT0gXCJQTVwiKSB7IGhvdXIgKz0gMTI7IGhvdXIudG9TdHJpbmcoKTsgfVxuXHRcdGlmKG1vbnRoIDwgMTApIG1vbnRoID0gXCIwXCIgKyBtb250aDtcblx0XHRpZihkYXkgPCAxMCkgZGF5ID0gXCIwXCIgKyBkYXk7XG5cdFx0aWYoaG91ciA8IDEwKSBob3VyID0gXCIwXCIgKyBob3VyO1xuXHRcdC8vaWYobWludXRlIDwgMTApIG1pbiA9IFwiMFwiICsgbWludXRlO1xuXHRcdFxuXG5cdFx0Ly9jb25zb2xlLmxvZyh0b2RheSwgJ2hvdXInLCBob3VyLCAnbWludXRlJywgbWludXRlLCAndGltZURheScsIHRpbWVEYXkpO1xuXG5cdFx0Ly92bS5zY2hlZHVsaW5nX3BhcmFtcy5zY2hlZHVsZVtzZWN0aW9uXSA9IFwiMjAxOC0wNS0wNVQwNjowMDowMC0wNzowMFwiXG5cdFx0dm0uc2NoZWR1bGluZ19wYXJhbXMuc2NoZWR1bGVbc2VjdGlvbl0gPSB5ZWFyICsgXCItXCIgKyBtb250aCArIFwiLVwiICsgIGRheSArIFwiVFwiICsgIGhvdXIgKyBcIjpcIiArIG1pbnV0ZSArIFwiOjAwLTA3OjAwXCJcblx0fTtcblxuXHQvLyBcdFNBVkUgU0FMRVMgREFZU1xuXHR2bS5zYXZlU2FsZXNEYXlzID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGluZGV4ID0gMDtcblxuXHRcdC8vaXRlcmF0ZSB0aHJvdWdoIGFsbCB0aGUgc2FsZXMgZGF5cywgc2F2aW5nIHRvIHRoZSBEQlxuXHRcdHZtLnRlbXBJdGVyYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGNtZV9pdGVyYXRpb24pIHtcblxuXHRcdFx0dm0uc2FsZXNkYXlzTGlzdC4kYWRkKGNtZV9pdGVyYXRpb24pLnRoZW4oZnVuY3Rpb24gKHJlZikge1xuXHRcdFx0XHQvL2dldCB0aGUgbmV3IGtleVxuXHRcdFx0XHR2YXIgaWQgPSByZWYua2V5O1xuXG5cdFx0XHRcdC8vc2F2ZSBpdCB0byB0aGUgZGIgb2JqZWN0XG5cdFx0XHRcdGNvbnNvbGUubG9nKGlkKTtcblxuXHRcdFx0fSk7XG5cblx0XHR9KTtcblxuXHRcdC8vb25jZSB0aGV5IGhhdmUgYWxsIGJlbiBzYXZlZCBcblxuXHRcdC8vdm0uc2FsZXNkYXlzTGlzdC4kYWRkKHtuYW1lOiAndGVzdCd9KTtcdFxuXHR9O1xuXG5cdC8vcnVuIHRoZSB0ZXN0XG5cblxufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdjbmUnKVxuICAgIC5jb250cm9sbGVyKCdzcXVhcmVUeHNDb250cm9sbGVyJywgc3F1YXJlVHhzQ29udHJvbGxlcik7XG5cbnNxdWFyZVR4c0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywnJGxvZycsICckcm91dGVQYXJhbXMnLCAnJGZpcmViYXNlJywgJyRmaXJlYmFzZU9iamVjdCcsICckZmlyZWJhc2VBcnJheScsICdkYXRhU2VydmljZSddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHNxdWFyZVR4c0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkcm91dGVQYXJhbXMsICRmaXJlYmFzZSwgJGZpcmViYXNlT2JqZWN0LCAkZmlyZWJhc2VBcnJheSwgZGF0YVNlcnZpY2UpIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cdHZhciB5ZXN0ZXJkYXkgPSBtb21lbnQobmV3IERhdGUoKSkuc3VidHJhY3QoMSwgXCJkYXlcIik7XG5cdHZhciBzcXJMb2NhdGlvbnMgPSBkYXRhU2VydmljZS5zcXJfbG9jYXRpb25zLmxpc3QoKTsvLyRmaXJlYmFzZUFycmF5KGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCkuY2hpbGQoJ3JlZmVyZW5jZV9saXN0cy9zcXJfbG9jYXRpb25zJykpO1xuXHR2YXIgc3FyRW1wbG95ZWVzID0gZGF0YVNlcnZpY2Uuc3FyX2VtcGxveWVlcy5saXN0KCk7XG5cdHZhciBhbGxTYWxlc2RheXMgPSAkZmlyZWJhc2VPYmplY3QoZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoKS5jaGlsZCgnc2FsZXNfZGF5cycpKTtcblx0dm0uc2FsZXNEYXlzID0gXCJcIjtcblx0dm0uZmlsdGVyZWRTYWxlc0RheXMgPSBbXTtcblxuXHQvL2RlZmluZSB2aWV3bW9kZWwgdmFyaWFibGVzXG5cdC8vdm0uaGlnaGxpZ2h0ZWREYXRlID0geWVzdGVyZGF5LmZvcm1hdChcIk1NLURELVlZWVlcIik7XG5cdHZtLnNlbGVjdGVkTG9jYXRpb24gPSB7XG5cdFx0bmFtZTpcIk9yZWdvblwiLFxuXHRcdGlkOiBcIlwiXG5cdH07XG5cdHZtLnNlbGVjdGVkRGF0ZSA9IG5ldyBEYXRlKHllc3RlcmRheS5mb3JtYXQoXCJNTS1ERC1ZWVlZXCIpKTtcblx0dm0uZGF5SHJzID0gWzEsIDIsIDMsIDQsIDUsNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl07XG5cdHZtLmRheXN0cmFuc2FjdGlvbnMgPSBbXTtcblxuXHQvL25vdGlmeSBwcm9ncmVzc1xuXHQkbG9nLmluZm8oJ2luIGEgc3F1YXJlIFR4cyBjb250cm9sbGVyJywgeWVzdGVyZGF5LmZvcm1hdCgpKTtcdC8vVE9ETzogVEFLRSBUSElTIE9VVCBMQVRFUlxuXG5cdC8vZGVmaW5lIGxvY2FsIGZ1bmN0aW9uc1xuXHRmdW5jdGlvbiBzeW5jTGlzdHMoKSB7XG5cdFx0dXBkYXRlVHhMaXN0KCk7XG5cdFx0dXBkYXRlU2FsZWRheXNMaXN0KCk7XG5cdH07XG5cblx0ZnVuY3Rpb24gdXBkYXRlU2FsZWRheXNMaXN0KCkge1xuXHRcdHZhciB5ZWFyID0gdm0uc2VsZWN0ZWREYXRlLmdldEZ1bGxZZWFyKCk7XG5cdFx0dmFyIG1vbnRoID0gdm0uc2VsZWN0ZWREYXRlLmdldE1vbnRoKCkgKyAxO1xuXHRcdHZhciBkYXkgPSB2bS5zZWxlY3RlZERhdGUuZ2V0RGF0ZSgpO1xuXG5cdFx0aWYobW9udGggPCAxMCkgbW9udGggPSBcIjBcIiArIG1vbnRoO1xuXHRcdGlmKGRheSA8IDEwKSBkYXkgPSBcIjBcIiArIGRheTtcblxuXHRcdHZhciBkYXRlID0geWVhciArIFwiLVwiICsgbW9udGggKyBcIi1cIiArIGRheTtcblx0XHR2YXIgZGJQYXRoID0gJy9jYWxlbmRlci8nICsgeWVhciArIFwiL1wiICsgZGF0ZSArIFwiL3NhbGVzX2RheXNcIjtcblx0XHR2bS5zYWxlc0RheXMgPSAkZmlyZWJhc2VPYmplY3QoZmlyZWJhc2UuZGF0YWJhc2UoKS5yZWYoKS5jaGlsZChkYlBhdGgpKTtcblx0XHRcblx0XHQvL2NvbnNvbGUubG9nKGRiUGF0aCk7XG5cdH07XG5cdFxuXHRmdW5jdGlvbiB1cGRhdGVUeExpc3QoKSB7XG5cdFx0dmFyIGVuZE9mRGF5ID0gbW9tZW50KHZtLnNlbGVjdGVkRGF0ZSkuaG91cnMoMjMpLm1pbnV0ZXMoNTkpLnNlY29uZHMoNTkpLmZvcm1hdCgpO1xuXHRcdHZhciBzdGFydE9mRGF5ID0gbW9tZW50KHZtLnNlbGVjdGVkRGF0ZSkuZm9ybWF0KCk7XG5cdFx0ZGF0YVNlcnZpY2Uuc3FyX3R4cy5mdWxsX2RheShcblx0XHRcdHZtLnNlbGVjdGVkTG9jYXRpb24uaWQsIFxuXHRcdFx0c3RhcnRPZkRheSxcblx0XHRcdGVuZE9mRGF5XG5cdFx0KS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3Mocykge1xuXHRcdFx0Y29uc29sZS5sb2coJ2dvdCBhIHJlc3BvbnNlIHdpdGgnLCBzLmxlbmd0aCwgXCJyZWNvcmRzXCIpO1xuXHRcdFx0dm0uZGF5c3RyYW5zYWN0aW9ucyA9IHM7XG5cdFx0XHQkc2NvcGUuJGFwcGx5KCk7XG5cdFx0fSkuY2F0Y2goZnVuY3Rpb24gZXJyb3IoZSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ0VSUk9SJywgZSk7XG5cdFx0fSk7XG5cdH07XG5cblx0ZnVuY3Rpb24gZGVmaW5lTG9jYXRpb24oKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyYWlhYmxlc1xuXHRcdFxuXHRcdFByb21pc2UuYWxsKFtzcXJMb2NhdGlvbnMsIHNxckVtcGxveWVlc10pLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhzKSB7XG5cblx0XHRcdHZtLnNxckxvY2F0aW9ucyA9IHNbMF07XG5cdFx0XHR2bS5zcXJFbXBsb3llZXMgPSBzWzFdO1xuXG5cdFx0XHRjb25zb2xlLmxvZyh2bS5zcXJMb2NhdGlvbnMpO1xuXHRcdFx0Y29uc29sZS5sb2codm0uc3FyRW1wbG95ZWVzKTtcblxuXHRcdFx0Ly9pdGVyYXRlIHRocm91Z2ggYWxsIGxvY2F0aW9uc1xuXHRcdFx0dm0uc3FyTG9jYXRpb25zLmZvckVhY2goZnVuY3Rpb24obG9jYXRpb24pIHtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGxvY2F0aW9uLm5hbWUgPT0gdm0uc2VsZWN0ZWRMb2NhdGlvbi5uYW1lKSB7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dm0uc2VsZWN0ZWRMb2NhdGlvbi5pZCA9IGxvY2F0aW9uLmlkO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHR9KTtcblxuXHRcdFx0Ly90aGVuIHJ1biB0aGUgZGF0YSBzZXJ2aWNlXG5cdFx0XHRzeW5jTGlzdHMoKTtcblxuXHRcdH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdlcnJvcicsIGUpO1xuXHRcdH0pO1xuXG5cdH07XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCBmdW5jdGlvbnNcblx0dm0uZGF5Q2hhbmdlID0gZnVuY3Rpb24oZGlyZWN0aW9uKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGRpckhhc2ggPSB7XCItXCI6MCwgXCIrXCI6MX07XG5cdFx0dmFyIGN1cnJlbnREYXRlID0gbW9tZW50KG5ldyBEYXRlKHZtLnNlbGVjdGVkRGF0ZSkpO1xuXG5cdFx0c3dpdGNoKGRpckhhc2hbZGlyZWN0aW9uXSkge1xuXHRcdFx0Y2FzZSAwOlxuXHRcdFx0XHRjdXJyZW50RGF0ZS5zdWJ0cmFjdCgxLFwiZGF5XCIpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMTpcblx0XHRcdFx0Y3VycmVudERhdGUuYWRkKDEsXCJkYXlcIilcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRicmVhaztcblx0XHR9O1xuXG5cdFx0dm0uc2VsZWN0ZWREYXRlID0gbmV3IERhdGUoY3VycmVudERhdGUuZm9ybWF0KFwiTU0tREQtWVlZWVwiKSk7XG5cblx0XHRzeW5jTGlzdHMoKTtcblx0fVxuXG5cdC8vXG5cdHZtLmVtcGxveWVlTmFtZSA9IGZ1bmN0aW9uKGVtcGxveWVlX2lkKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIGVtcGxveWVlX25hbWUgPSBcIlwiO1xuXG5cdFx0T2JqZWN0LmtleXModm0uc3FyRW1wbG95ZWVzKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0dmFyIG5ld05hbWUgPSB2bS5zcXJFbXBsb3llZXNba2V5XS5maXJzdF9uYW1lICsgXCIgXCIgKyB2bS5zcXJFbXBsb3llZXNba2V5XS5sYXN0X25hbWU7XG5cblx0XHRcdGlmKHZtLnNxckVtcGxveWVlc1trZXldLmlkID09IGVtcGxveWVlX2lkKSBlbXBsb3llZV9uYW1lID0gbmV3TmFtZTtcblx0XHR9KTtcblxuXHRcdHJldHVybiBlbXBsb3llZV9uYW1lO1xuXHR9O1xuXG5cdC8vcnVuIHRoZSB0ZXN0XG5cdFxuXHRkZWZpbmVMb2NhdGlvbigpO1xufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdjbmUnKVxuICAgIC5jb250cm9sbGVyKCd0eHNCbG9ja0NvbnRyb2xsZXInLCB0eHNCbG9ja0NvbnRyb2xsZXIpO1xuXG50eHNCbG9ja0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywnJGxvZycsICckZmlyZWJhc2UnLCAnJGZpcmViYXNlQXJyYXknXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiB0eHNCbG9ja0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCAkZmlyZWJhc2UsICRmaXJlYmFzZUFycmF5KSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXHR2YXIgeWVzdGVyZGF5ID0gbW9tZW50KG5ldyBEYXRlKCkpLnN1YnRyYWN0KDEsIFwiZGF5XCIpO1xuXHR2YXIgdGhlWWVhciA9IHllc3RlcmRheS55ZWFyKCk7XG5cdHZhciB0aGVEYXRlID0geWVzdGVyZGF5LmZvcm1hdChcIllZWVktTU0tRERcIik7XG5cdHZhciBjbWVzUGF0aCA9ICdjYWxlbmRlci8nICsgdGhlWWVhciArICcvJyArIHRoZURhdGUgKyAnL3NhbGVzX2RheXMnO1xuXG5cdC8vY29uc29sZS5sb2coeWVzdGVyZGF5LmZvcm1hdCgpLCB0aGVEYXRlKTtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlc1xuXHR2bS5zZWxlY3RlZERhdGUgPSBuZXcgRGF0ZSh5ZXN0ZXJkYXkuZm9ybWF0KCkpO1xuXHR2bS50eEJsb2NrcyA9IFsndGVzdCcsICd0ZXN0JywgJ3Rlc3QnXTtcblx0dm0uY21lcyA9ICRmaXJlYmFzZUFycmF5KGZpcmViYXNlLmRhdGFiYXNlKCkucmVmKCkuY2hpbGQoY21lc1BhdGgpKTtcblxuXHQvL25vdGlmeSBwcm9ncmVzc1xuXHRjb25zb2xlLmxvZygndHhzQmxvY2tDb250cm9sbGVyJyk7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCBmdW5jdGlvblxuXG5cdC8qXG5cdCpcdERBVEUgVVBBVEVcblx0KlxuXHQqXHRXaGVuIHRoZSBkYXRlIGlzIGNoYW5nZWQgdGhpcyBzaG91bGQgYmUgdXBkYXRlZCB0b28uXG5cdCovXG5cdHZtLmRhdGVVcGRhdGUgPSBmdW5jdGlvbihuZXdEYXRlKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIG5ld0RhdGUgPSBtb21lbnQobmV3IERhdGUobmV3RGF0ZSkpO1xuXHRcdHZhciBuZXdZZWFyID0gbmV3RGF0ZS55ZWFyKCk7XG5cdFx0dmFyIHBhdGhEYXRlID0gbmV3RGF0ZS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpO1xuXHRcdHZhciBuZXdDbWVzUGF0aCA9ICdjYWxlbmRlci8nICsgbmV3WWVhciArICcvJyArIHBhdGhEYXRlICsgJy9zYWxlc19kYXlzJzsgXG5cdFx0XG5cdFx0Ly9ub3RpZnkgcHJvZ3Jlc3Ncblx0XHRjb25zb2xlLmxvZygndXBkYXRpbmcgZGF0ZScsIHBhdGhEYXRlKTtcblxuXHRcdC8vdXBkYXRlIHZhbHVlc1xuXHRcdHZtLmNtZXMgPSAkZmlyZWJhc2VBcnJheShmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZigpLmNoaWxkKG5ld0NtZXNQYXRoKSk7XG5cblx0XHQvL3JlZnJlc2hcblx0XHQvLyRzY29wZS4kYXBwbHkoKTtcblx0fTtcblxufSIsIi8qXG4qXHRCQUNLRU5EIERBVEEgU0VSVklDRVxuKlxuKi9cblxuLy9kZWZpbmUgbW9kdWxlXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnY25lJylcbiAgICAuZmFjdG9yeSgnZGF0YVNlcnZpY2UnLCBkYXRhU2VydmljZSk7XG5cbi8vZGVwZW5kZW5jeSBpbmplY3Rpb25zXG5kYXRhU2VydmljZS4kaW5qZWN0ID0gWyckaHR0cCddO1xuXG4vL2RlY2xhcmUgdGhlIHNlcnZpY2Vcbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gZGF0YVNlcnZpY2UoJGh0dHApIHtcblxuXHQvL2RlZmluZSBtZXRob2RzXG5cdHZhciBkYXRhU2VydmljZSA9IHtcblx0XHRzcXJfbG9jYXRpb25zOiB7XG5cdFx0XHRsaXN0OiBzcXJfbG9jYXRpb25zX2xpc3Rcblx0XHR9LFxuXHRcdHNxcl9lbXBsb3llZXM6IHtcblx0XHRcdGxpc3Q6IHNxcl9lbXBsb3llZXNfbGlzdFxuXHRcdH0sXG5cdFx0c3FyX3R4czoge1xuXHRcdFx0ZnVsbF9kYXk6IHNxcl90eHNfZGF5XG5cdFx0fSxcblx0XHRzYWxlc19kYXlzOiB7XG5cdFx0XHRjb21waWxlX2JhdGNoOiBjb21waWxlX25ld19zYWxlc19kYXlfYmF0Y2hcblx0XHR9XG5cdH07XG5cblx0Ly9cblx0ZnVuY3Rpb24gc3FyX2xvY2F0aW9uc19saXN0KCkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBwb3N0T2JqZWN0ID0ge307XG5cblx0XHRjb25zb2xlLmxvZygnZ2V0dGluZyBsb2NhdGlvbnMgbGlzdCcpO1xuXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0Ly90cnkgUE9TVFxuXHRcdFx0JGh0dHAoe1xuXHRcdFx0XHRtZXRob2Q6ICdQT1NUJyxcblx0XHRcdFx0dXJsOiAnL3NxdWFyZXBvcy9sb2NhdGlvbnMnLFxuXHRcdFx0XHRoZWFkZXJzOiB7XG5cdFx0XHRcdFx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRkYXRhOiBwb3N0T2JqZWN0XG5cdFx0XHR9KS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZSkge1xuXHRcdFx0XHRcblx0XHRcdFx0cmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcblx0XHRcdFx0XG5cdFx0XHR9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKGVycm9yKSB7XG5cdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHR9KTtcblx0XHR9KTtcblxuXHR9O1xuXG5cdC8vXG5cdGZ1bmN0aW9uIHNxcl9lbXBsb3llZXNfbGlzdChzdGF0dXMsIGV4dGVybmFsX2lkLCBsaW1pdCwgb3JkZXIsIGJlZ2luX3VwZGF0ZWRfYXQsIGVuZF91cGRhdGVkX2F0LCBiZWdpbl9jcmVhdGVkX2F0LCBlbmRfY3JlYXRlZF9hdCkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBwb3N0T2JqZWN0ID0ge1xuXHRcdFx0c3RhdHVzOiBzdGF0dXMsXG5cdFx0XHRleHRlcm5hbF9pZDogZXh0ZXJuYWxfaWQsXG5cdFx0XHRsaW1pdDogbGltaXQsXG5cdFx0XHRvcmRlcjogb3JkZXIsXG5cdFx0XHRiZWdpbl91cGRhdGVkX2F0OiBiZWdpbl91cGRhdGVkX2F0LFxuXHRcdFx0ZW5kX3VwZGF0ZWRfYXQ6IGVuZF91cGRhdGVkX2F0LFxuXHRcdFx0YmVnaW5fY3JlYXRlZF9hdDogYmVnaW5fY3JlYXRlZF9hdCxcblx0XHRcdGVuZF9jcmVhdGVkX2F0OiBlbmRfY3JlYXRlZF9hdFxuXHRcdH07XG5cblx0XHRjb25zb2xlLmxvZygnZ2V0dGluZyBlbXBsb3llZXMgbGlzdCcpO1xuXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0Ly90cnkgUE9TVFxuXHRcdFx0JGh0dHAoe1xuXHRcdFx0XHRtZXRob2Q6ICdQT1NUJyxcblx0XHRcdFx0dXJsOiAnL3NxdWFyZXBvcy9lbXBsb3llZXMnLFxuXHRcdFx0XHRoZWFkZXJzOiB7XG5cdFx0XHRcdFx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRkYXRhOiBwb3N0T2JqZWN0XG5cdFx0XHR9KS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZSkge1xuXHRcdFx0XHRcblx0XHRcdFx0cmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcblx0XHRcdFx0XG5cdFx0XHR9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKGVycm9yKSB7XG5cdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHR9KTtcblx0XHR9KTtcblxuXHR9XG5cblx0Ly9cdFRFU1QgRlVOQ1RJT05cblx0ZnVuY3Rpb24gY29tcGlsZV9uZXdfc2FsZXNfZGF5X2JhdGNoKHBhcmFtcykge1xuXHRcdFxuXHRcdC8vY29uc29sZS5sb2coJ3Rlc3RpbmcgZGF0YVNlcnZpY2UnKTtcblxuXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdC8vdHJ5IFBPU1Rcblx0XHRcdCRodHRwKHtcblx0XHRcdFx0bWV0aG9kOiAnUE9TVCcsXG5cdFx0XHRcdHVybDogJy9hcGkvc2FsZXNfZGF5cy9jb21waWxlX25ld19zYWxlc19kYXlzX2JhdGNoJyxcblx0XHRcdFx0aGVhZGVyczoge1xuXHRcdFx0XHRcdCdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcblx0XHRcdFx0fSxcdFxuXHRcdFx0XHRkYXRhOiBwYXJhbXNcblx0XHRcdH0pLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuXHRcdFx0XHRcblx0XHRcdH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2soZXJyb3IpIHtcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXG5cdH07XG5cblx0Ly9TUVVBUkUgVFJBTlNBQ1RJT04gREFZU1xuXHRmdW5jdGlvbiBzcXJfdHhzX2RheShsb2NhdGlvbiwgc3RhcnREYXRlLCBlbmREYXRlKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIHBvc3RPYmplY3QgPSB7XG5cdFx0XHRsb2NhdGlvbjogbG9jYXRpb24sXG5cdFx0XHRzdGFydDogc3RhcnREYXRlLFxuXHRcdFx0ZW5kOiBlbmREYXRlXG5cdFx0fTtcblxuXHRcdGNvbnNvbGUubG9nKCdnZXR0aW5nIGRheVxcJ3MgVHJhbnNhY3Rpb25zJyk7XG5cblx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHQvL3RyeSBQT1NUXG5cdFx0XHQkaHR0cCh7XG5cdFx0XHRcdG1ldGhvZDogJ1BPU1QnLFxuXHRcdFx0XHR1cmw6ICcvc3F1YXJlcG9zL3R4cycsXG5cdFx0XHRcdGhlYWRlcnM6IHtcblx0XHRcdFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGRhdGE6IHBvc3RPYmplY3Rcblx0XHRcdH0pLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXNvbHZlKHJlc3BvbnNlLmRhdGEpO1xuXHRcdFx0XHRcblx0XHRcdH0sIGZ1bmN0aW9uIGVycm9yQ2FsbGJhY2soZXJyb3IpIHtcblx0XHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXG5cdH1cblxuXHQvL3R1cm4gdGhlIG1ldGhvZFxuICAgIHJldHVybiBkYXRhU2VydmljZTtcdFxufTtcblxuIiwiLypcbipcbipcbiovXG5cbi8vZGVmaW5lIG1vZHVsZVxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ2NuZScpXG4gICAgLmZhY3RvcnkoJ2ZpcmViYXNlU2VydmljZScsIGZpcmViYXNlU2VydmljZSk7XG5cbi8vZGVwZW5kZW5jeSBpbmplY3Rpb25zXG5maXJlYmFzZVNlcnZpY2UuJGluamVjdCA9IFsnJGZpcmViYXNlJywgJyRmaXJlYmFzZU9iamVjdCcsICckZmlyZWJhc2VBcnJheSddO1xuXG4vL2RlY2xhcmUgdGhlIHNlcnZpY2Vcbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gZmlyZWJhc2VTZXJ2aWNlKCRmaXJlYmFzZSwgJGZpcmViYXNlT2JqZWN0LCAkZmlyZWJhc2VBcnJheSkge1xuXG5cdC8vZGVmaW5lIG1ldGhvZHNcblx0dmFyIEZCU2VydmljZSA9IHtcblx0XHRnZXQ6IHtcblx0XHRcdGN1c3RvbWVyX2xpc3Q6IGdldF9jdXN0b21lcl9saXN0LFxuXHRcdFx0YV9yZWNvcmQ6IGdldF9hX3JlY29yZFxuXHRcdH0sXG5cdFx0YXV0aFVzZXI6IHtcblx0XHRcdGVtYWlsOiBhdXRoVXNlcl9lbWFpbFxuXHRcdH0sXG5cdFx0Y29tcGlsZToge1xuXHRcdFx0Y3VzdG9tZXJfc2FsZXNfZGF5czogY29tcGlsZV9jdXN0b21lcl9zYWxlc19kYXlzXG5cdFx0fSxcblx0XHR0ZXN0OiB0ZXN0XG5cdH07XG5cblx0Ly9cdEFVVEhFTlRJQ0FURSBVU0VSXG5cdGZ1bmN0aW9uIGF1dGhVc2VyX2VtYWlsKGVtYWlsLCBwYXNzd29yZCkge1xuXHRcdFxuXHRcdGNvbnNvbGUubG9nKCdhdXRoZW50aWNhdGluZyB1c2VyJylcblxuXHRcdC8vcmV0dXJuIGFzeW5jIHdvcmtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXG5cdFx0XHRmaXJlYmFzZS5hdXRoKCkuc2lnbkluV2l0aEVtYWlsQW5kUGFzc3dvcmQoZW1haWwsIHBhc3N3b3JkKS50aGVuKGZ1bmN0aW9uIHN1Y2VzcyhzKSB7XG5cblx0XHRcdFx0cmVzb2x2ZShzKTtcblxuXHRcdFx0fSkuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdFx0Ly8gSGFuZGxlIEVycm9ycyBoZXJlLlxuXHRcdFx0XHR2YXIgZXJyb3JDb2RlID0gZXJyb3IuY29kZTtcblx0XHRcdFx0dmFyIGVycm9yTWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XG5cdFx0XHRcdHJlamVjdCh7Y29kZTogZXJyb3JDb2RlICwgbWVzc2FnZTogZXJyb3JNZXNzYWdlfSk7XG5cblx0XHRcdH0pO1xuXHRcdH0pO1xuXG5cdH07XG5cblx0Ly9cdEdFVCBDVVNUT01FUiBMSVNUXG5cdGZ1bmN0aW9uIGdldF9jdXN0b21lcl9saXN0KCkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXG5cdFx0Ly9jb25zb2xlLmxvZygnZ2V0dGluZyBjdXN0b21lciBsaXN0Jyk7XG5cblx0XHQvL3JldHVybiBhc3luYyB3b3JrXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHQgICAgICAgIFxuXHQgICAgICAgIDtcblxuXHQgICAgfSk7XG5cdH1cblxuXHQvL1x0R0VUIEEgUkVDT1JEXG5cdGZ1bmN0aW9uIGdldF9hX3JlY29yZChwYXRoKSB7XG5cblx0XHQvL2NvbnNvbGUubG9nKCdnZXR0aW5nJywgcGF0aCk7XG5cdFx0Ly9yZXR1cm4gYXN5bmMgd29ya1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0ICAgICAgICB2YXIgZGVzaXJlZFJlY29yZCA9ICRmaXJlYmFzZU9iamVjdChmaXJlYmFzZS5kYXRhYmFzZSgpLnJlZigpLmNoaWxkKHBhdGgpKTtcblx0ICAgICAgICBcblx0ICAgICAgICBkZXNpcmVkUmVjb3JkLiRsb2FkZWQoKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3Mocykge1xuXHQgICAgICAgIFx0cmVzb2x2ZShzKTtcblx0ICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiBlcnJvcihlKSB7XG5cdCAgICAgICAgXHRyZWplY3QoZSk7XG5cdCAgICAgICAgfSk7XG5cblx0ICAgIH0pO1xuXG5cdH07XG5cblx0Ly9cdENPTVBMSUxFIENVU1RPTUVSIFNBTEVTIERBWVNcblx0ZnVuY3Rpb24gY29tcGlsZV9jdXN0b21lcl9zYWxlc19kYXlzKGN1c3RvbWVyX2lkKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0XG5cdH07XHRcblxuXG5cdC8vXHRURVNUIEZVTkNUSU9OXG5cdGZ1bmN0aW9uIHRlc3QoKSB7IHJldHVybignZ29vZCB0ZXN0IGZyb20gRkIgU2VydmljZScpOyB9O1xuXG5cdC8vdHVybiB0aGUgbWV0aG9kXG4gICAgcmV0dXJuIEZCU2VydmljZTtcdFxufTtcblxuIiwiLypcbipcdENVU1RPTUVSIExJU1RcbipcbipcdFRoaXMgbW9kdWxlIGlzIGRlc2lnbmVkIHRvIFxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdjbmUnKVxuXHQuZGlyZWN0aXZlKCdjdXN0b21lckxpc3QnLCBjdXN0b21lckxpc3QpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGN1c3RvbWVyTGlzdCgpIHtcblx0Ly9kZWZpbmUgdGhlIGRpcmVjdGl2ZVxuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiBcIkFFQ01cIixcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY3VzdG9tZXItbGlzdC5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBjdXN0b21lckxpc3RDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7fVxuXG5cdGN1c3RvbWVyTGlzdENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcblx0XG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBjdXN0b21lckxpc3RDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdGNvbnNvbGUubG9nKCdpbiBjb3N0b21lciBMaXN0IGNvbnRyb2xsZXInKTtcblx0fVxuXG5cdC8vcGFzcyBpdCBiYWNrXG5cdHJldHVybiBkaXJlY3RpdmU7XG59IiwiLypcbipcdFNBTEVTIERBWSBUUkFOU0FDVElPTlNcbipcbipcdFRoaXMgbW9kdWxlIGlzIGRlc2lnbmVkIHRvIFxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdjbmUnKVxuXHQuZGlyZWN0aXZlKCdjdXN0b21lclNhbGVzRGF5cycsIGN1c3RvbWVyU2FsZXNEYXlzKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjdXN0b21lclNhbGVzRGF5cygpIHtcblx0Ly9kZWZpbmUgdGhlIGRpcmVjdGl2ZVxuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiBcIkFFQ01cIixcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY3VzdG9tZXItc2FsZXMtZGF5cy5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRzYWxlc2RheXNMaXN0OiBcIj1cIixcblx0XHRcdHNhbGVzZGF5U2VsZWN0ZWQ6ICc9J1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogY3VzdG9tZXJTYWxlc0RheXNDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG5cblx0XHQvL3VwZGF0ZSB0aGUgc2FsZXNkYXlzTGlzdCB3aGVuIGEgbmV3IGN1c3RvbWVyIGlzIHNlbGVjdGVkXG5cdFx0c2NvcGUuJHdhdGNoKCd2bS5zYWxlc2RheXNMaXN0JywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG5cdFx0XHRcblx0XHRcdC8vd2F0Y2ggZm9yIGEgbmV3IHZhbHVlXG5cdFx0XHRpZihuZXdWYWx1ZSkge1xuXHRcdFx0XHRcblx0XHRcdFx0Ly9pZiB0aGUgdmFsdWUgY2hhbmdlcyBkb3dubG9hZCB0aGUgcmVxdWlyZWQgdmFsdWVzXG5cdFx0XHRcdHNjb3BlLmxvYWRTYWxlRGF5cygpO1xuXG5cdFx0XHR9XG5cblx0XHR9LCB0cnVlKTtcblxuXHR9O1xuXG5cdGN1c3RvbWVyU2FsZXNEYXlzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICdmaXJlYmFzZVNlcnZpY2UnXTtcblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGN1c3RvbWVyU2FsZXNEYXlzQ29udHJvbGxlcigkc2NvcGUsICRsb2csIGZpcmViYXNlU2VydmljZSkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciB2bSA9IHRoaXM7XG5cdFx0dm0uZGV0YWlsZWRTYWxlc0RheXNMaXN0ID0gW107XG5cblx0XHRjb25zb2xlLmxvZygnaW4gdGhlIGN1c3RvbWVyU2FsZXNEYXlzQ29udHJvbGxlcicpO1xuXG5cdFx0ZnVuY3Rpb24gbG9hZEFUeChpZCkge1xuXHRcdFx0dmFyIHBhdGggPSAnc2FsZXNfZGF5cy8nICsgaWQ7XG5cblx0XHRcdC8vcmV0dXJuIGFzeW5jIHdvcmtcblx0XHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXHRcdFx0XHQvL2NvbGxlY3RlZCBkYXRhXG5cdFx0XHRcdGZpcmViYXNlU2VydmljZS5nZXQuYV9yZWNvcmQocGF0aCkudGhlbihmdW5jdGlvbiBzdWNjZXNzKHMpIHtcblx0XHRcdFx0XHRyZXNvbHZlKHMpO1xuXHRcdFx0XHR9KS5jYXRjaChmdW5jdGlvbiBlcnJvcihlKSB7XG5cdFx0XHRcdFx0cmVqZWN0KGUpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0fSk7XG5cblx0XHR9XG5cblx0XHQvL2RlZmluZSBzY29wZSB2YXJpYWJsZXNcblx0XHQvL1x0TE9BRCBTQUxFREFZU1xuXHRcdCRzY29wZS5sb2FkU2FsZURheXMgPSBmdW5jdGlvbigpIHtcblx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdFx0dmFyIGFsbFByb21pc2VzID0gW107XG5cblx0XHRcdC8vaXRlcmF0ZSB0aHJvdWdoIGFsbCB2YWx1ZXNcblx0XHRcdE9iamVjdC5rZXlzKHZtLnNhbGVzZGF5c0xpc3QpLmZvckVhY2goZnVuY3Rpb24oa2V5KXtcblxuXHRcdFx0XHRhbGxQcm9taXNlcy5wdXNoKGxvYWRBVHgodm0uc2FsZXNkYXlzTGlzdFtrZXldKSk7XG5cblx0XHRcdH0pO1xuXG5cdFx0XHQvL3J1biBhbGwgcHJvbWlzZXNcblx0XHRcdFByb21pc2UuYWxsKGFsbFByb21pc2VzKS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3Mocykge1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdhbGwgcHJvbWlzZXMgcmV0dXJuZWQnLCBzKTtcblx0XHRcdFx0dm0uZGV0YWlsZWRTYWxlc0RheXNMaXN0ID0gc1xuXHRcdFx0fSkuY2F0Y2goZnVuY3Rpb24gZXJyb3IoZSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZygnZXJyb3InLGUpO1xuXHRcdFx0fSk7XG5cblxuXHRcdH07XG5cblx0XHQvL1x0U0FMRVMgREFZIFNFTEVDVEVEXG5cdFx0JHNjb3BlLnNhbGVzRGF5U2VsZWN0ZWQgPSBmdW5jdGlvbihpbmRleCkgeyBcblx0XHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdFx0dm0uc2FsZXNkYXlTZWxlY3RlZCA9IHZtLmRldGFpbGVkU2FsZXNEYXlzTGlzdFtpbmRleF0uJGlkO1xuXHRcdFx0Ly9jb25zb2xlLmxvZyh2bS5zYWxlc2RheXNMaXN0W2luZGV4XSk7XG5cdFx0fTtcblxuXHRcdC8vXG5cdFx0dm0uYWRkU2FsZXNEYXlzVG9DYWwgPSBmdW5jdGlvbigpIHsgXG5cdFx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHRcdFxuXHRcdFx0Y29uc29sZS5sb2coJ2FkZFNhbGVzRGF5c1RvQ2FsJyk7XG5cblx0XHR9O1xuXG5cdH1cblxuXHQvL3Bhc3MgaXQgYmFja1xuXHRyZXR1cm4gZGlyZWN0aXZlO1xufSIsIi8qXG4qXHRDVVNUT01FUiBMSVNUXG4qXG4qXHRUaGlzIG1vZHVsZSBpcyBkZXNpZ25lZCB0byBcbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnY25lJylcblx0LmRpcmVjdGl2ZSgnZGF0ZVNlbGVjdG9yJywgZGF0ZVNlbGVjdG9yKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBkYXRlU2VsZWN0b3IoKSB7XG5cdC8vZGVmaW5lIHRoZSBkaXJlY3RpdmVcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogXCJBRUNNXCIsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2RhdGUtc2VsZWN0b3IuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0c2VsZWN0ZWREYXRlOiBcIj1cIixcblx0XHRcdHVwZGF0ZURhdGU6IFwiJlwiXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBkYXRlU2VsZWN0b3JDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7fVxuXG5cdGRhdGVTZWxlY3RvckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcblx0XG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBkYXRlU2VsZWN0b3JDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdGNvbnNvbGUubG9nKCdpbiBkYXRlIHNlbGVjdG9yIGNvbnRyb2xsZXInKTtcblxuXHRcdC8qXG5cdFx0Klx0REFZIENIQU5HRSBcblx0XHQqXG5cdFx0Klx0VGhpcyBmdW5jdGlvbiBpbmNyaW1lbnRzIHRoZSBkYXkgZWl0aGVyIGZvcndhcmQgb3IgYmFja3dhcmRcblx0XHQqL1xuXHRcdHNlbGYuZGF5Q2hhbmdlID0gZnVuY3Rpb24oZGlyZWN0aW9uKSB7XG5cdFx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHRcdHZhciB2bSA9IHNlbGY7XG5cdFx0XHR2YXIgZGlySGFzaCA9IHtcIi1cIjowLCBcIitcIjoxfTtcblx0XHRcdHZhciBjdXJyZW50RGF0ZSA9IG1vbWVudChuZXcgRGF0ZShzZWxmLnNlbGVjdGVkRGF0ZSkpO1xuXG5cdFx0XHRzd2l0Y2goZGlySGFzaFtkaXJlY3Rpb25dKSB7XG5cdFx0XHRcdGNhc2UgMDpcblx0XHRcdFx0XHRjdXJyZW50RGF0ZS5zdWJ0cmFjdCgxLFwiZGF5XCIpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0Y3VycmVudERhdGUuYWRkKDEsXCJkYXlcIilcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH07XG5cblx0XHRcdHNlbGYuc2VsZWN0ZWREYXRlID0gbmV3IERhdGUoY3VycmVudERhdGUuZm9ybWF0KFwiTU0tREQtWVlZWVwiKSk7XG5cblx0XHRcdC8vc3luY0xpc3RzKCk7XG5cdFx0XHRzZWxmLnVwZGF0ZURhdGUoe25ld0RhdGU6IGN1cnJlbnREYXRlLmZvcm1hdChcIk1NLURELVlZWVlcIil9KTtcblx0XHR9XG5cdH1cblxuXHQvL3Bhc3MgaXQgYmFja1xuXHRyZXR1cm4gZGlyZWN0aXZlO1xufSIsIi8qXG4qXHRGTEFWT1IgTUlYRVJcbipcbipcdFRoaXMgbW9kdWxlIGlzIGRlc2lnbmVkIHRvIGFsbG93IGN1c3RvbWVycyB0byBtaXggYW5kIG1hdGNoXG4qXHRvdXIgZGVsaWNpb3VzIGZsYXZvcnMgYW5kIHRvIHBpY2sgdGhpZXIgc2l6aW5nLlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdjbmUnKVxuXHQuZGlyZWN0aXZlKCdsb2dpblBhc3N3b3JkJywgbG9naW5QYXNzd29yZCk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gbG9naW5QYXNzd29yZCgpIHtcblx0Ly9kZWZpbmUgdGhlIGRpcmVjdGl2ZVxuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiBcIkFFQ01cIixcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvbG9naW4tcGFzc3dvcmQuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0cGFzc3dvcmQ6IFwiPVwiLFxuXHRcdFx0YWN0aXZlOiBcIj1cIlxuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogbG9naW5QYXNzd29yZENvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHt9XG5cblx0bG9naW5QYXNzd29yZENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxvZ2luUGFzc3dvcmRDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBzZWxmID0gdGhpcztcblx0fVxuXG5cdC8vcGFzcyBpdCBiYWNrXG5cdHJldHVybiBkaXJlY3RpdmU7XG59IiwiLypcbipcdEZMQVZPUiBNSVhFUlxuKlxuKlx0VGhpcyBtb2R1bGUgaXMgZGVzaWduZWQgdG8gYWxsb3cgY3VzdG9tZXJzIHRvIG1peCBhbmQgbWF0Y2hcbipcdG91ciBkZWxpY2lvdXMgZmxhdm9ycyBhbmQgdG8gcGljayB0aGllciBzaXppbmcuXG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2NuZScpXG5cdC5kaXJlY3RpdmUoJ2xvZ2luVXNlcm5hbWUnLCBsb2dpblVzZXJuYW1lKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsb2dpblVzZXJuYW1lKCkge1xuXHQvL2RlZmluZSB0aGUgZGlyZWN0aXZlXG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6IFwiQUVDTVwiLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9sb2dpbi11c2VybmFtZS5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHR1c2VybmFtZTogXCI9XCIsXG5cdFx0XHRhY3RpdmU6IFwiPVwiXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBsb2dpblVzZXJuYW1lQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge31cblxuXHRsb2dpblVzZXJuYW1lQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbG9naW5Vc2VybmFtZUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdFx0Ly9kZWZpbmUgbG9jYWwgdmFyaWFibGVzXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHR9XG5cblx0Ly9wYXNzIGl0IGJhY2tcblx0cmV0dXJuIGRpcmVjdGl2ZTtcbn0iLCIvKlxuKlx0U0FMRVMgREFZIFRSQU5TQUNUSU9OU1xuKlxuKlx0VGhpcyBtb2R1bGUgaXMgZGVzaWduZWQgdG8gXG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2NuZScpXG5cdC5kaXJlY3RpdmUoJ3NhbGVzRGF5VHhzJywgc2FsZXNEYXlUeHMpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHNhbGVzRGF5VHhzKCkge1xuXHQvL2RlZmluZSB0aGUgZGlyZWN0aXZlXG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6IFwiQUVDTVwiLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9zYWxlcy1kYXktdHJhbnNhY3Rpb25zLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdHR4c0xpc3Q6IFwiPVwiLFxuXHRcdFx0c2FsZXNkYXlTZWxlY3RlZDogJz0nXG5cblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHNhbGVzRGF5VHhzQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuXG5cdFx0Ly91cGRhdGUgdGhlIHNhbGVzZGF5c0xpc3Qgd2hlbiBhIG5ldyBjdXN0b21lciBpcyBzZWxlY3RlZFxuXHRcdHNjb3BlLiR3YXRjaCgndm0uc2FsZXNkYXlTZWxlY3RlZCcsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuXHRcdFx0XG5cdFx0XHQvL3dhdGNoIGZvciBhIG5ldyB2YWx1ZVxuXHRcdFx0aWYobmV3VmFsdWUpIHtcblx0XHRcdFx0XG5cdFx0XHRcdC8vaWYgdGhlIHZhbHVlIGNoYW5nZXMgZG93bmxvYWQgdGhlIHJlcXVpcmVkIHZhbHVlc1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdzYWxlc0RheSBTZWxlY3RlZCcpO1xuXHRcdFx0XHRzY29wZS5sb2FkU0RUeHMoKTtcblxuXHRcdFx0fVxuXG5cdFx0fSwgdHJ1ZSk7XG5cblx0fVxuXG5cdHNhbGVzRGF5VHhzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICdmaXJlYmFzZVNlcnZpY2UnXTtcblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIHNhbGVzRGF5VHhzQ29udHJvbGxlcigkc2NvcGUsICRsb2csIGZpcmViYXNlU2VydmljZSkge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciB2bSA9IHRoaXM7XG5cdFx0dm0ucHJvbWlzZUxpc3QgPSBbXTtcblx0XHR2bS5kZXRhaWxlZFR4TGlzdCA9IFtdO1xuXG5cdFx0Y29uc29sZS5sb2coJ2luIHRoZSBzYWxlc0RheVR4c0NvbnRyb2xsZXInKTtcblxuXHRcdGZ1bmN0aW9uIGxvYWRBUmNyZChwYXRoLCBpZCkge1xuXHRcdFx0dmFyIHBhdGggPSBwYXRoICsgaWQ7XG5cblx0XHRcdC8vY29uc29sZS5sb2coJ2xvYWRBUmNyZCcsIHBhdGgpXG5cblx0XHRcdC8vcmV0dXJuIGFzeW5jIHdvcmtcblx0XHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXHRcdFx0XHQvL2NvbGxlY3RlZCBkYXRhXG5cdFx0XHRcdGZpcmViYXNlU2VydmljZS5nZXQuYV9yZWNvcmQocGF0aCkudGhlbihmdW5jdGlvbiBzdWNjZXNzKHMpIHtcblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdnb3QgdGhpcyByZWNvcmQnLCBzKTtcblx0XHRcdFx0XHRyZXNvbHZlKHMpO1xuXHRcdFx0XHR9KS5jYXRjaChmdW5jdGlvbiBlcnJvcihlKSB7XG5cdFx0XHRcdFx0cmVqZWN0KGUpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0fSk7XG5cblx0XHR9XG5cblx0XHQvL1x0REVGSU5FIFNBTEVTIERBWVMgVFJBTlNBQ1RJT05TXG5cdFx0JHNjb3BlLmxvYWRTRFR4cyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly9jb25zb2xlLmxvZygnbG9hZGluZyBzZCB0eHMnLCB2bS5zYWxlc2RheVNlbGVjdGVkKTtcblxuXHRcdFx0Ly9cblx0XHRcdGxvYWRBUmNyZChcInNhbGVzX2RheXMvXCIsIHZtLnNhbGVzZGF5U2VsZWN0ZWQpLnRoZW4oZnVuY3Rpb24gc3VjY2VzcyhkZXRhaWxlZERheSkge1xuXHRcdFx0XHRcblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnZGV0YWlsZWREYXknLCBkZXRhaWxlZERheS4kcmVzb2x2ZWQpO1xuXHRcdFx0XHQvL0l0ZXJhdGUgb3ZlciBhbGwgb2YgdGhlIHRyYW5zYWN0aW9uc1xuXHRcdFx0XHRPYmplY3Qua2V5cyhkZXRhaWxlZERheS50cmFuc2FjdGlvbnMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhkZXRhaWxlZERheS50cmFuc2FjdGlvbnNba2V5XSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYoZGV0YWlsZWREYXkudHJhbnNhY3Rpb25zW2tleV0gIT0gXCJwbGFjZWhvbGRlclwiKSB7XG5cdFx0XHRcdFx0XHR2bS5wcm9taXNlTGlzdC5wdXNoKGxvYWRBUmNyZChcInRyYW5zYWN0aW9ucy9cIiwgZGV0YWlsZWREYXkudHJhbnNhY3Rpb25zW2tleV0pKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFByb21pc2UuYWxsKHZtLnByb21pc2VMaXN0KS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3Mocykge1xuXHRcdFx0XHRcdC8vY29uc29sZS5sb2cocyk7XG5cdFx0XHRcdFx0dm0uZGV0YWlsZWRUeExpc3QgPSBzO1xuXHRcdFx0XHRcdCRzY29wZS4kYXBwbHkoKTtcblx0XHRcdFx0fSkuY2F0Y2goZnVuY3Rpb24gZXJyb3IoZSkge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiZXJyb3JcIiwgZSk7XG5cdFx0XHRcdH0pO1xuXG5cblx0XHRcdH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKGUpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ2Vycm9yJywgZSk7XG5cdFx0XHR9KTtcblx0XHR9O1xuXHR9XG5cblx0Ly9wYXNzIGl0IGJhY2tcblx0cmV0dXJuIGRpcmVjdGl2ZTtcbn0iLCIvKlxuKlx0VFJBTlNBQ1RJT05TIEJMT0NLIFRBQkxFIERJUkVDVElWRVxuKlxuKlx0VGhpcyBtb2R1bGUgaXMgZGVzaWduZWQgdG8gXG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2NuZScpXG5cdC5kaXJlY3RpdmUoJ3R4QmxvY2tTYWxlc0RheXNUYWJsZScsIHR4QmxvY2tTYWxlc0RheXNUYWJsZSk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gdHhCbG9ja1NhbGVzRGF5c1RhYmxlKCkge1xuXHQvL2RlZmluZSB0aGUgZGlyZWN0aXZlXG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6IFwiQUVDTVwiLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy90eC1ibG9jay1zYWxlcy1kYXlzLXRhYmxlLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdGNtZXM6IFwiPVwiXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiB0eEJsb2NrU2FsZXNEYXlzVGFibGVDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7fVxuXG5cdHR4QmxvY2tTYWxlc0RheXNUYWJsZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcblx0XG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiB0eEJsb2NrU2FsZXNEYXlzVGFibGVDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHRcdC8vZGVmaW5lIGxvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdGNvbnNvbGUubG9nKCdpbiB0eC1ibG9jayBzYWxlcyBkYXlzIHRhYmxlIGNvbnRyb2xsZXInKTtcblx0fVxuXG5cdC8vcGFzcyBpdCBiYWNrXG5cdHJldHVybiBkaXJlY3RpdmU7XG59IiwiLypcbipcdFRSQU5TQUNUSU9OUyBCTE9DSyBUQUJMRSBESVJFQ1RJVkVcbipcbipcdFRoaXMgbW9kdWxlIGlzIGRlc2lnbmVkIHRvIFxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdjbmUnKVxuXHQuZGlyZWN0aXZlKCd0eEJsb2NrVGFibGUnLCB0eEJsb2NrVGFibGUpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHR4QmxvY2tUYWJsZSgpIHtcblx0Ly9kZWZpbmUgdGhlIGRpcmVjdGl2ZVxuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiBcIkFFQ01cIixcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvdHgtYmxvY2stdGFibGUuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0dHhCbG9ja3M6ICc9J1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogdHhCbG9ja1RhYmxlQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge31cblxuXHR0eEJsb2NrVGFibGVDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG5cdFxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gdHhCbG9ja1RhYmxlQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0XHQvL2RlZmluZSBsb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHRjb25zb2xlLmxvZygnaW4gdHgtYmxvY2sgdGFibGUgY29udHJvbGxlcicpO1xuXHR9XG5cblx0Ly9wYXNzIGl0IGJhY2tcblx0cmV0dXJuIGRpcmVjdGl2ZTtcbn0iLCIvKlxuKlx0Uk9VVEVTLUNPTkZJR1xuKlxuKlx0VGhpcyBtb2R1bGUgc2V0cyB1cCBhbGwgdGhlIHJlcXVpcmVkIGFuZ3VsYXIgcm91dGVzIGZvciB0aGlzIHdlYiBhcHAuXG4qL1xuYW5ndWxhclxuICAgIC5tb2R1bGUoJ2NuZScpXG4gICAgLmNvbmZpZyhjb25maWcpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNvbmZpZygkcm91dGVQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcblx0JGxvY2F0aW9uUHJvdmlkZXIuaGFzaFByZWZpeCgnJyk7XG4gICAgJHJvdXRlUHJvdmlkZXJcblx0Ly9QVUJMSUMgUk9VVEVTXG4gICAgLndoZW4oJy8nLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvbGFuZGluZ1BhZ2UuaHRtJywgICAgICAvLyd2aWV3cy9tYWluUGFnZS5odG0nXG4gICAgICAgIGNvbnRyb2xsZXI6ICdsYW5kaW5nQ29udHJvbGxlcicsICAgICAgICAgICAvLydtYWluQ29udHJvbGxlcidcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL2N1c3RvbWVycycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9jdXN0b21lcnNQYWdlLmh0bScsICAgICAgLy8ndmlld3MvbWFpblBhZ2UuaHRtJ1xuICAgICAgICBjb250cm9sbGVyOiAnY3VzdG9tZXJzQ29udHJvbGxlcicsICAgICAgICAgICAvLydtYWluQ29udHJvbGxlcidcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICByZXNvbHZlOiB7IC8qIEBuZ0luamVjdCAqL1xuICAgICAgICAgICAgY3VzdG9tZXJMaXN0OiBjdXN0b21lckxpc3RcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLndoZW4oJy9jdXN0b21lcnMvOmN1c3RvbWVyaWQnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvYUN1c3RvbWVyc1BhZ2UuaHRtJywgICAgICAvLyd2aWV3cy9tYWluUGFnZS5odG0nXG4gICAgICAgIGNvbnRyb2xsZXI6ICdhQ3VzdG9tZXJzQ29udHJvbGxlcicsICAgICAgICAgICAvLydtYWluQ29udHJvbGxlcidcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICByZXNvbHZlOiB7IC8qIEBuZ0luamVjdCAqL1xuICAgICAgICAgICAgY3VzdG9tZXJMaXN0OiBjdXN0b21lckxpc3RcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLndoZW4oJy9zYWxlc2RheXMnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3Mvc2FsZXNEYXlzUGFnZS5odG0nLCAgICAgIC8vJ3ZpZXdzL21haW5QYWdlLmh0bSdcbiAgICAgICAgY29udHJvbGxlcjogJ3NhbGVzRGF5c0NvbnRyb2xsZXInLCAgICAgICAgICAgLy8nbWFpbkNvbnRyb2xsZXInXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLndoZW4oJy9zYWxlc2RheXMvOnNhbGVzZGF5aWQnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvYVNhbGVzZGF5UGFnZS5odG0nLCAgICAgIC8vJ3ZpZXdzL21haW5QYWdlLmh0bSdcbiAgICAgICAgY29udHJvbGxlcjogJ2FTYWxlc2RheUNvbnRyb2xsZXInLCAgICAgICAgICAgLy8nbWFpbkNvbnRyb2xsZXInXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLndoZW4oJy9jYXNoX2RyYXdlcl9hc3NpZ25tZW50cycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9jYXNoRHJhd2VyQXNzaWdubWVudHNQYWdlLmh0bScsICAgICAgLy8ndmlld3MvbWFpblBhZ2UuaHRtJ1xuICAgICAgICBjb250cm9sbGVyOiAnY2FzaERyYXdlckFzc2lnbm1lbnRzQ29udHJvbGxlcicsICAgICAgICAgICAvLydtYWluQ29udHJvbGxlcidcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSkgICBcbiAgICAud2hlbignL3NxdWFyZV90eHMnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3Mvc3F1YXJlVHhzUGFnZS5odG0nLCAgICAgIC8vJ3ZpZXdzL21haW5QYWdlLmh0bSdcbiAgICAgICAgY29udHJvbGxlcjogJ3NxdWFyZVR4c0NvbnRyb2xsZXInLCAgICAgICAgICAgLy8nbWFpbkNvbnRyb2xsZXInXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pICBcbiAgICAud2hlbignL3R4X2Jsb2NrcycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy90eHNCbG9ja1BhZ2UuaHRtJywgICAgICAvLyd2aWV3cy9tYWluUGFnZS5odG0nXG4gICAgICAgIGNvbnRyb2xsZXI6ICd0eHNCbG9ja0NvbnRyb2xsZXInLCAgICAgICAgICAgLy8nbWFpbkNvbnRyb2xsZXInXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pICBcbiAgICAud2hlbignL2xvZ2luJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2xvZ2luUGFnZS5odG0nLCAgICAgIC8vJ3ZpZXdzL21haW5QYWdlLmh0bSdcbiAgICAgICAgY29udHJvbGxlcjogJ2xvZ2luQ29udHJvbGxlcicsICAgICAgICAgICAvLydtYWluQ29udHJvbGxlcidcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL2NtZV9zY2hlZHVsZScsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9jbWVTY2hlZHVsaW5nUGFnZS5odG0nLCAgICAgIC8vJ3ZpZXdzL21haW5QYWdlLmh0bSdcbiAgICAgICAgY29udHJvbGxlcjogJ2NtZVNjaGVkdWxlQ29udHJvbGxlcicsICAgICAgICAgICAvLydtYWluQ29udHJvbGxlcidcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcblx0Lm90aGVyd2lzZSh7XG4gICAgICAgIHJlZGlyZWN0VG86ICcvJ1xuICAgIH0pO1xufVxuXG4vKlxuKiAgIFJFUVVJUkVEIEZVTkNUSU9OU1xuKlxuKi9cblxuLy8gIENVU1RPTUVSUyBMSVNUXG5mdW5jdGlvbiBjdXN0b21lckxpc3QoKSB7XG4gICAgXG4gICAgLy9yZXR1cm4gdGhlIHByb21pc2VcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIC8vaGl0IHRoZSBzZXJ2ZXIgZm9yIHRoZSBcbiAgICAgICAgcmVzb2x2ZSgnZ29vZCB0ZXN0Jyk7XG4gICAgfSk7XG5cbn07XG5cbiJdfQ==
